// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS2_Frpg2PlayerData.proto

#ifndef PROTOBUF_DS2_5fFrpg2PlayerData_2eproto__INCLUDED
#define PROTOBUF_DS2_5fFrpg2PlayerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace DS2_Frpg2PlayerData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

class AllStatus;
class ArmorStatus;
class DateTime;
class EquipmentInfo;
class ItemUsingInfo;
class LevelStatus;
class PhantomTypeCount;
class PhysicalStatus;
class PlayerLocation;
class PlayerStatus_Phantom_leave_at;
class PlayerStatus;
class ServerSideStatus;
class StatsInfo_Bonfire_levels;
class StatsInfo;
class Vector;
class WeaponStatus;

// ===================================================================

class AllStatus : public ::google::protobuf::MessageLite {
 public:
  AllStatus();
  virtual ~AllStatus();

  AllStatus(const AllStatus& from);

  inline AllStatus& operator=(const AllStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AllStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AllStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AllStatus* other);

  // implements Message ----------------------------------------------

  AllStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AllStatus& from);
  void MergeFrom(const AllStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DS2_Frpg2PlayerData.PlayerLocation player_location = 1;
  inline bool has_player_location() const;
  inline void clear_player_location();
  static const int kPlayerLocationFieldNumber = 1;
  inline const ::DS2_Frpg2PlayerData::PlayerLocation& player_location() const;
  inline ::DS2_Frpg2PlayerData::PlayerLocation* mutable_player_location();
  inline ::DS2_Frpg2PlayerData::PlayerLocation* release_player_location();
  inline void set_allocated_player_location(::DS2_Frpg2PlayerData::PlayerLocation* player_location);

  // optional .DS2_Frpg2PlayerData.PlayerStatus player_status = 2;
  inline bool has_player_status() const;
  inline void clear_player_status();
  static const int kPlayerStatusFieldNumber = 2;
  inline const ::DS2_Frpg2PlayerData::PlayerStatus& player_status() const;
  inline ::DS2_Frpg2PlayerData::PlayerStatus* mutable_player_status();
  inline ::DS2_Frpg2PlayerData::PlayerStatus* release_player_status();
  inline void set_allocated_player_status(::DS2_Frpg2PlayerData::PlayerStatus* player_status);

  // optional .DS2_Frpg2PlayerData.ItemUsingInfo item_using_info = 3;
  inline bool has_item_using_info() const;
  inline void clear_item_using_info();
  static const int kItemUsingInfoFieldNumber = 3;
  inline const ::DS2_Frpg2PlayerData::ItemUsingInfo& item_using_info() const;
  inline ::DS2_Frpg2PlayerData::ItemUsingInfo* mutable_item_using_info();
  inline ::DS2_Frpg2PlayerData::ItemUsingInfo* release_item_using_info();
  inline void set_allocated_item_using_info(::DS2_Frpg2PlayerData::ItemUsingInfo* item_using_info);

  // optional .DS2_Frpg2PlayerData.StatsInfo stats_info = 4;
  inline bool has_stats_info() const;
  inline void clear_stats_info();
  static const int kStatsInfoFieldNumber = 4;
  inline const ::DS2_Frpg2PlayerData::StatsInfo& stats_info() const;
  inline ::DS2_Frpg2PlayerData::StatsInfo* mutable_stats_info();
  inline ::DS2_Frpg2PlayerData::StatsInfo* release_stats_info();
  inline void set_allocated_stats_info(::DS2_Frpg2PlayerData::StatsInfo* stats_info);

  // optional .DS2_Frpg2PlayerData.LevelStatus attributes = 5;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 5;
  inline const ::DS2_Frpg2PlayerData::LevelStatus& attributes() const;
  inline ::DS2_Frpg2PlayerData::LevelStatus* mutable_attributes();
  inline ::DS2_Frpg2PlayerData::LevelStatus* release_attributes();
  inline void set_allocated_attributes(::DS2_Frpg2PlayerData::LevelStatus* attributes);

  // optional .DS2_Frpg2PlayerData.PhysicalStatus physical_status = 6;
  inline bool has_physical_status() const;
  inline void clear_physical_status();
  static const int kPhysicalStatusFieldNumber = 6;
  inline const ::DS2_Frpg2PlayerData::PhysicalStatus& physical_status() const;
  inline ::DS2_Frpg2PlayerData::PhysicalStatus* mutable_physical_status();
  inline ::DS2_Frpg2PlayerData::PhysicalStatus* release_physical_status();
  inline void set_allocated_physical_status(::DS2_Frpg2PlayerData::PhysicalStatus* physical_status);

  // optional .DS2_Frpg2PlayerData.WeaponStatus weapon_status = 7;
  inline bool has_weapon_status() const;
  inline void clear_weapon_status();
  static const int kWeaponStatusFieldNumber = 7;
  inline const ::DS2_Frpg2PlayerData::WeaponStatus& weapon_status() const;
  inline ::DS2_Frpg2PlayerData::WeaponStatus* mutable_weapon_status();
  inline ::DS2_Frpg2PlayerData::WeaponStatus* release_weapon_status();
  inline void set_allocated_weapon_status(::DS2_Frpg2PlayerData::WeaponStatus* weapon_status);

  // optional .DS2_Frpg2PlayerData.ArmorStatus armor_status = 8;
  inline bool has_armor_status() const;
  inline void clear_armor_status();
  static const int kArmorStatusFieldNumber = 8;
  inline const ::DS2_Frpg2PlayerData::ArmorStatus& armor_status() const;
  inline ::DS2_Frpg2PlayerData::ArmorStatus* mutable_armor_status();
  inline ::DS2_Frpg2PlayerData::ArmorStatus* release_armor_status();
  inline void set_allocated_armor_status(::DS2_Frpg2PlayerData::ArmorStatus* armor_status);

  // optional .DS2_Frpg2PlayerData.ServerSideStatus server_side_status = 9;
  inline bool has_server_side_status() const;
  inline void clear_server_side_status();
  static const int kServerSideStatusFieldNumber = 9;
  inline const ::DS2_Frpg2PlayerData::ServerSideStatus& server_side_status() const;
  inline ::DS2_Frpg2PlayerData::ServerSideStatus* mutable_server_side_status();
  inline ::DS2_Frpg2PlayerData::ServerSideStatus* release_server_side_status();
  inline void set_allocated_server_side_status(::DS2_Frpg2PlayerData::ServerSideStatus* server_side_status);

  // optional .DS2_Frpg2PlayerData.EquipmentInfo equipment_info = 10;
  inline bool has_equipment_info() const;
  inline void clear_equipment_info();
  static const int kEquipmentInfoFieldNumber = 10;
  inline const ::DS2_Frpg2PlayerData::EquipmentInfo& equipment_info() const;
  inline ::DS2_Frpg2PlayerData::EquipmentInfo* mutable_equipment_info();
  inline ::DS2_Frpg2PlayerData::EquipmentInfo* release_equipment_info();
  inline void set_allocated_equipment_info(::DS2_Frpg2PlayerData::EquipmentInfo* equipment_info);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.AllStatus)
 private:
  inline void set_has_player_location();
  inline void clear_has_player_location();
  inline void set_has_player_status();
  inline void clear_has_player_status();
  inline void set_has_item_using_info();
  inline void clear_has_item_using_info();
  inline void set_has_stats_info();
  inline void clear_has_stats_info();
  inline void set_has_attributes();
  inline void clear_has_attributes();
  inline void set_has_physical_status();
  inline void clear_has_physical_status();
  inline void set_has_weapon_status();
  inline void clear_has_weapon_status();
  inline void set_has_armor_status();
  inline void clear_has_armor_status();
  inline void set_has_server_side_status();
  inline void clear_has_server_side_status();
  inline void set_has_equipment_info();
  inline void clear_has_equipment_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DS2_Frpg2PlayerData::PlayerLocation* player_location_;
  ::DS2_Frpg2PlayerData::PlayerStatus* player_status_;
  ::DS2_Frpg2PlayerData::ItemUsingInfo* item_using_info_;
  ::DS2_Frpg2PlayerData::StatsInfo* stats_info_;
  ::DS2_Frpg2PlayerData::LevelStatus* attributes_;
  ::DS2_Frpg2PlayerData::PhysicalStatus* physical_status_;
  ::DS2_Frpg2PlayerData::WeaponStatus* weapon_status_;
  ::DS2_Frpg2PlayerData::ArmorStatus* armor_status_;
  ::DS2_Frpg2PlayerData::ServerSideStatus* server_side_status_;
  ::DS2_Frpg2PlayerData::EquipmentInfo* equipment_info_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static AllStatus* default_instance_;
};
// -------------------------------------------------------------------

class ArmorStatus : public ::google::protobuf::MessageLite {
 public:
  ArmorStatus();
  virtual ~ArmorStatus();

  ArmorStatus(const ArmorStatus& from);

  inline ArmorStatus& operator=(const ArmorStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ArmorStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ArmorStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ArmorStatus* other);

  // implements Message ----------------------------------------------

  ArmorStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ArmorStatus& from);
  void MergeFrom(const ArmorStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 strike_def = 1;
  inline bool has_strike_def() const;
  inline void clear_strike_def();
  static const int kStrikeDefFieldNumber = 1;
  inline ::google::protobuf::uint32 strike_def() const;
  inline void set_strike_def(::google::protobuf::uint32 value);

  // optional uint32 slash_def = 2;
  inline bool has_slash_def() const;
  inline void clear_slash_def();
  static const int kSlashDefFieldNumber = 2;
  inline ::google::protobuf::uint32 slash_def() const;
  inline void set_slash_def(::google::protobuf::uint32 value);

  // optional uint32 thrust_def = 3;
  inline bool has_thrust_def() const;
  inline void clear_thrust_def();
  static const int kThrustDefFieldNumber = 3;
  inline ::google::protobuf::uint32 thrust_def() const;
  inline void set_thrust_def(::google::protobuf::uint32 value);

  // optional float poise = 4;
  inline bool has_poise() const;
  inline void clear_poise();
  static const int kPoiseFieldNumber = 4;
  inline float poise() const;
  inline void set_poise(float value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.ArmorStatus)
 private:
  inline void set_has_strike_def();
  inline void clear_has_strike_def();
  inline void set_has_slash_def();
  inline void clear_has_slash_def();
  inline void set_has_thrust_def();
  inline void clear_has_thrust_def();
  inline void set_has_poise();
  inline void clear_has_poise();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 strike_def_;
  ::google::protobuf::uint32 slash_def_;
  ::google::protobuf::uint32 thrust_def_;
  float poise_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static ArmorStatus* default_instance_;
};
// -------------------------------------------------------------------

class DateTime : public ::google::protobuf::MessageLite {
 public:
  DateTime();
  virtual ~DateTime();

  DateTime(const DateTime& from);

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DateTime& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DateTime* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DateTime* other);

  // implements Message ----------------------------------------------

  DateTime* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // required uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // required uint32 hours = 4;
  inline bool has_hours() const;
  inline void clear_hours();
  static const int kHoursFieldNumber = 4;
  inline ::google::protobuf::uint32 hours() const;
  inline void set_hours(::google::protobuf::uint32 value);

  // required uint32 minutes = 5;
  inline bool has_minutes() const;
  inline void clear_minutes();
  static const int kMinutesFieldNumber = 5;
  inline ::google::protobuf::uint32 minutes() const;
  inline void set_minutes(::google::protobuf::uint32 value);

  // required uint32 seconds = 6;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 6;
  inline ::google::protobuf::uint32 seconds() const;
  inline void set_seconds(::google::protobuf::uint32 value);

  // required uint32 tzdiff = 7;
  inline bool has_tzdiff() const;
  inline void clear_tzdiff();
  static const int kTzdiffFieldNumber = 7;
  inline ::google::protobuf::uint32 tzdiff() const;
  inline void set_tzdiff(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.DateTime)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hours();
  inline void clear_has_hours();
  inline void set_has_minutes();
  inline void clear_has_minutes();
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_tzdiff();
  inline void clear_has_tzdiff();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hours_;
  ::google::protobuf::uint32 minutes_;
  ::google::protobuf::uint32 seconds_;
  ::google::protobuf::uint32 tzdiff_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static DateTime* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentInfo : public ::google::protobuf::MessageLite {
 public:
  EquipmentInfo();
  virtual ~EquipmentInfo();

  EquipmentInfo(const EquipmentInfo& from);

  inline EquipmentInfo& operator=(const EquipmentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const EquipmentInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EquipmentInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EquipmentInfo* other);

  // implements Message ----------------------------------------------

  EquipmentInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EquipmentInfo& from);
  void MergeFrom(const EquipmentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 weapon_slots = 1;
  inline bool has_weapon_slots() const;
  inline void clear_weapon_slots();
  static const int kWeaponSlotsFieldNumber = 1;
  inline ::google::protobuf::uint32 weapon_slots() const;
  inline void set_weapon_slots(::google::protobuf::uint32 value);

  // optional uint32 armor_slots = 2;
  inline bool has_armor_slots() const;
  inline void clear_armor_slots();
  static const int kArmorSlotsFieldNumber = 2;
  inline ::google::protobuf::uint32 armor_slots() const;
  inline void set_armor_slots(::google::protobuf::uint32 value);

  // optional uint32 ring_slots = 3;
  inline bool has_ring_slots() const;
  inline void clear_ring_slots();
  static const int kRingSlotsFieldNumber = 3;
  inline ::google::protobuf::uint32 ring_slots() const;
  inline void set_ring_slots(::google::protobuf::uint32 value);

  // optional uint32 ammunition_slots = 4;
  inline bool has_ammunition_slots() const;
  inline void clear_ammunition_slots();
  static const int kAmmunitionSlotsFieldNumber = 4;
  inline ::google::protobuf::uint32 ammunition_slots() const;
  inline void set_ammunition_slots(::google::protobuf::uint32 value);

  // optional uint32 belt_slots = 5;
  inline bool has_belt_slots() const;
  inline void clear_belt_slots();
  static const int kBeltSlotsFieldNumber = 5;
  inline ::google::protobuf::uint32 belt_slots() const;
  inline void set_belt_slots(::google::protobuf::uint32 value);

  // optional uint32 spell_slots = 6;
  inline bool has_spell_slots() const;
  inline void clear_spell_slots();
  static const int kSpellSlotsFieldNumber = 6;
  inline ::google::protobuf::uint32 spell_slots() const;
  inline void set_spell_slots(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.EquipmentInfo)
 private:
  inline void set_has_weapon_slots();
  inline void clear_has_weapon_slots();
  inline void set_has_armor_slots();
  inline void clear_has_armor_slots();
  inline void set_has_ring_slots();
  inline void clear_has_ring_slots();
  inline void set_has_ammunition_slots();
  inline void clear_has_ammunition_slots();
  inline void set_has_belt_slots();
  inline void clear_has_belt_slots();
  inline void set_has_spell_slots();
  inline void clear_has_spell_slots();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 weapon_slots_;
  ::google::protobuf::uint32 armor_slots_;
  ::google::protobuf::uint32 ring_slots_;
  ::google::protobuf::uint32 ammunition_slots_;
  ::google::protobuf::uint32 belt_slots_;
  ::google::protobuf::uint32 spell_slots_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static EquipmentInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemUsingInfo : public ::google::protobuf::MessageLite {
 public:
  ItemUsingInfo();
  virtual ~ItemUsingInfo();

  ItemUsingInfo(const ItemUsingInfo& from);

  inline ItemUsingInfo& operator=(const ItemUsingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ItemUsingInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ItemUsingInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ItemUsingInfo* other);

  // implements Message ----------------------------------------------

  ItemUsingInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ItemUsingInfo& from);
  void MergeFrom(const ItemUsingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 named_ring_god = 1;
  inline bool has_named_ring_god() const;
  inline void clear_named_ring_god();
  static const int kNamedRingGodFieldNumber = 1;
  inline ::google::protobuf::uint32 named_ring_god() const;
  inline void set_named_ring_god(::google::protobuf::uint32 value);

  // optional uint32 using_dried_fingers = 2;
  inline bool has_using_dried_fingers() const;
  inline void clear_using_dried_fingers();
  static const int kUsingDriedFingersFieldNumber = 2;
  inline ::google::protobuf::uint32 using_dried_fingers() const;
  inline void set_using_dried_fingers(::google::protobuf::uint32 value);

  // optional uint32 unknown_3 = 3;
  inline bool has_unknown_3() const;
  inline void clear_unknown_3();
  static const int kUnknown3FieldNumber = 3;
  inline ::google::protobuf::uint32 unknown_3() const;
  inline void set_unknown_3(::google::protobuf::uint32 value);

  // optional uint32 guardians_seal = 4;
  inline bool has_guardians_seal() const;
  inline void clear_guardians_seal();
  static const int kGuardiansSealFieldNumber = 4;
  inline ::google::protobuf::uint32 guardians_seal() const;
  inline void set_guardians_seal(::google::protobuf::uint32 value);

  // optional uint32 bell_keepers_seal = 5;
  inline bool has_bell_keepers_seal() const;
  inline void clear_bell_keepers_seal();
  static const int kBellKeepersSealFieldNumber = 5;
  inline ::google::protobuf::uint32 bell_keepers_seal() const;
  inline void set_bell_keepers_seal(::google::protobuf::uint32 value);

  // optional uint32 crest_of_the_rat = 6;
  inline bool has_crest_of_the_rat() const;
  inline void clear_crest_of_the_rat();
  static const int kCrestOfTheRatFieldNumber = 6;
  inline ::google::protobuf::uint32 crest_of_the_rat() const;
  inline void set_crest_of_the_rat(::google::protobuf::uint32 value);

  // optional uint32 unknown_7 = 7;
  inline bool has_unknown_7() const;
  inline void clear_unknown_7();
  static const int kUnknown7FieldNumber = 7;
  inline ::google::protobuf::uint32 unknown_7() const;
  inline void set_unknown_7(::google::protobuf::uint32 value);

  // optional uint32 unknown_8 = 8;
  inline bool has_unknown_8() const;
  inline void clear_unknown_8();
  static const int kUnknown8FieldNumber = 8;
  inline ::google::protobuf::uint32 unknown_8() const;
  inline void set_unknown_8(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.ItemUsingInfo)
 private:
  inline void set_has_named_ring_god();
  inline void clear_has_named_ring_god();
  inline void set_has_using_dried_fingers();
  inline void clear_has_using_dried_fingers();
  inline void set_has_unknown_3();
  inline void clear_has_unknown_3();
  inline void set_has_guardians_seal();
  inline void clear_has_guardians_seal();
  inline void set_has_bell_keepers_seal();
  inline void clear_has_bell_keepers_seal();
  inline void set_has_crest_of_the_rat();
  inline void clear_has_crest_of_the_rat();
  inline void set_has_unknown_7();
  inline void clear_has_unknown_7();
  inline void set_has_unknown_8();
  inline void clear_has_unknown_8();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 named_ring_god_;
  ::google::protobuf::uint32 using_dried_fingers_;
  ::google::protobuf::uint32 unknown_3_;
  ::google::protobuf::uint32 guardians_seal_;
  ::google::protobuf::uint32 bell_keepers_seal_;
  ::google::protobuf::uint32 crest_of_the_rat_;
  ::google::protobuf::uint32 unknown_7_;
  ::google::protobuf::uint32 unknown_8_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static ItemUsingInfo* default_instance_;
};
// -------------------------------------------------------------------

class LevelStatus : public ::google::protobuf::MessageLite {
 public:
  LevelStatus();
  virtual ~LevelStatus();

  LevelStatus(const LevelStatus& from);

  inline LevelStatus& operator=(const LevelStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LevelStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LevelStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LevelStatus* other);

  // implements Message ----------------------------------------------

  LevelStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LevelStatus& from);
  void MergeFrom(const LevelStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 vigor = 1;
  inline bool has_vigor() const;
  inline void clear_vigor();
  static const int kVigorFieldNumber = 1;
  inline ::google::protobuf::uint32 vigor() const;
  inline void set_vigor(::google::protobuf::uint32 value);

  // optional uint32 endurance = 2;
  inline bool has_endurance() const;
  inline void clear_endurance();
  static const int kEnduranceFieldNumber = 2;
  inline ::google::protobuf::uint32 endurance() const;
  inline void set_endurance(::google::protobuf::uint32 value);

  // optional uint32 vitality = 3;
  inline bool has_vitality() const;
  inline void clear_vitality();
  static const int kVitalityFieldNumber = 3;
  inline ::google::protobuf::uint32 vitality() const;
  inline void set_vitality(::google::protobuf::uint32 value);

  // optional uint32 attunement = 4;
  inline bool has_attunement() const;
  inline void clear_attunement();
  static const int kAttunementFieldNumber = 4;
  inline ::google::protobuf::uint32 attunement() const;
  inline void set_attunement(::google::protobuf::uint32 value);

  // optional uint32 strenght = 5;
  inline bool has_strenght() const;
  inline void clear_strenght();
  static const int kStrenghtFieldNumber = 5;
  inline ::google::protobuf::uint32 strenght() const;
  inline void set_strenght(::google::protobuf::uint32 value);

  // optional uint32 dexterity = 6;
  inline bool has_dexterity() const;
  inline void clear_dexterity();
  static const int kDexterityFieldNumber = 6;
  inline ::google::protobuf::uint32 dexterity() const;
  inline void set_dexterity(::google::protobuf::uint32 value);

  // optional uint32 intelligence = 7;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 7;
  inline ::google::protobuf::uint32 intelligence() const;
  inline void set_intelligence(::google::protobuf::uint32 value);

  // optional uint32 faith = 8;
  inline bool has_faith() const;
  inline void clear_faith();
  static const int kFaithFieldNumber = 8;
  inline ::google::protobuf::uint32 faith() const;
  inline void set_faith(::google::protobuf::uint32 value);

  // optional uint32 adaptability = 9;
  inline bool has_adaptability() const;
  inline void clear_adaptability();
  static const int kAdaptabilityFieldNumber = 9;
  inline ::google::protobuf::uint32 adaptability() const;
  inline void set_adaptability(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.LevelStatus)
 private:
  inline void set_has_vigor();
  inline void clear_has_vigor();
  inline void set_has_endurance();
  inline void clear_has_endurance();
  inline void set_has_vitality();
  inline void clear_has_vitality();
  inline void set_has_attunement();
  inline void clear_has_attunement();
  inline void set_has_strenght();
  inline void clear_has_strenght();
  inline void set_has_dexterity();
  inline void clear_has_dexterity();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_faith();
  inline void clear_has_faith();
  inline void set_has_adaptability();
  inline void clear_has_adaptability();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 vigor_;
  ::google::protobuf::uint32 endurance_;
  ::google::protobuf::uint32 vitality_;
  ::google::protobuf::uint32 attunement_;
  ::google::protobuf::uint32 strenght_;
  ::google::protobuf::uint32 dexterity_;
  ::google::protobuf::uint32 intelligence_;
  ::google::protobuf::uint32 faith_;
  ::google::protobuf::uint32 adaptability_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static LevelStatus* default_instance_;
};
// -------------------------------------------------------------------

class PhantomTypeCount : public ::google::protobuf::MessageLite {
 public:
  PhantomTypeCount();
  virtual ~PhantomTypeCount();

  PhantomTypeCount(const PhantomTypeCount& from);

  inline PhantomTypeCount& operator=(const PhantomTypeCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PhantomTypeCount& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PhantomTypeCount* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PhantomTypeCount* other);

  // implements Message ----------------------------------------------

  PhantomTypeCount* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PhantomTypeCount& from);
  void MergeFrom(const PhantomTypeCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::uint32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::uint32 value);

  // optional uint32 unknown_2 = 2;
  inline bool has_unknown_2() const;
  inline void clear_unknown_2();
  static const int kUnknown2FieldNumber = 2;
  inline ::google::protobuf::uint32 unknown_2() const;
  inline void set_unknown_2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.PhantomTypeCount)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_unknown_2();
  inline void clear_has_unknown_2();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unknown_1_;
  ::google::protobuf::uint32 unknown_2_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PhantomTypeCount* default_instance_;
};
// -------------------------------------------------------------------

class PhysicalStatus : public ::google::protobuf::MessageLite {
 public:
  PhysicalStatus();
  virtual ~PhysicalStatus();

  PhysicalStatus(const PhysicalStatus& from);

  inline PhysicalStatus& operator=(const PhysicalStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PhysicalStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PhysicalStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PhysicalStatus* other);

  // implements Message ----------------------------------------------

  PhysicalStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PhysicalStatus& from);
  void MergeFrom(const PhysicalStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 health = 1;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 1;
  inline ::google::protobuf::uint32 health() const;
  inline void set_health(::google::protobuf::uint32 value);

  // optional uint32 stamina = 2;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 2;
  inline ::google::protobuf::uint32 stamina() const;
  inline void set_stamina(::google::protobuf::uint32 value);

  // optional float equip_load = 3;
  inline bool has_equip_load() const;
  inline void clear_equip_load();
  static const int kEquipLoadFieldNumber = 3;
  inline float equip_load() const;
  inline void set_equip_load(float value);

  // optional uint32 unknown_4 = 4;
  inline bool has_unknown_4() const;
  inline void clear_unknown_4();
  static const int kUnknown4FieldNumber = 4;
  inline ::google::protobuf::uint32 unknown_4() const;
  inline void set_unknown_4(::google::protobuf::uint32 value);

  // optional uint32 unknown_5 = 5;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 5;
  inline ::google::protobuf::uint32 unknown_5() const;
  inline void set_unknown_5(::google::protobuf::uint32 value);

  // optional uint32 attack_strength = 6;
  inline bool has_attack_strength() const;
  inline void clear_attack_strength();
  static const int kAttackStrengthFieldNumber = 6;
  inline ::google::protobuf::uint32 attack_strength() const;
  inline void set_attack_strength(::google::protobuf::uint32 value);

  // optional uint32 attack_dexterity = 7;
  inline bool has_attack_dexterity() const;
  inline void clear_attack_dexterity();
  static const int kAttackDexterityFieldNumber = 7;
  inline ::google::protobuf::uint32 attack_dexterity() const;
  inline void set_attack_dexterity(::google::protobuf::uint32 value);

  // optional uint32 unknown_8 = 8;
  inline bool has_unknown_8() const;
  inline void clear_unknown_8();
  static const int kUnknown8FieldNumber = 8;
  inline ::google::protobuf::uint32 unknown_8() const;
  inline void set_unknown_8(::google::protobuf::uint32 value);

  // optional uint32 unknown_9 = 9;
  inline bool has_unknown_9() const;
  inline void clear_unknown_9();
  static const int kUnknown9FieldNumber = 9;
  inline ::google::protobuf::uint32 unknown_9() const;
  inline void set_unknown_9(::google::protobuf::uint32 value);

  // optional uint32 unknown_10 = 10;
  inline bool has_unknown_10() const;
  inline void clear_unknown_10();
  static const int kUnknown10FieldNumber = 10;
  inline ::google::protobuf::uint32 unknown_10() const;
  inline void set_unknown_10(::google::protobuf::uint32 value);

  // optional uint32 unknown_11 = 11;
  inline bool has_unknown_11() const;
  inline void clear_unknown_11();
  static const int kUnknown11FieldNumber = 11;
  inline ::google::protobuf::uint32 unknown_11() const;
  inline void set_unknown_11(::google::protobuf::uint32 value);

  // optional uint32 unknown_12 = 12;
  inline bool has_unknown_12() const;
  inline void clear_unknown_12();
  static const int kUnknown12FieldNumber = 12;
  inline ::google::protobuf::uint32 unknown_12() const;
  inline void set_unknown_12(::google::protobuf::uint32 value);

  // optional uint32 unknown_13 = 13;
  inline bool has_unknown_13() const;
  inline void clear_unknown_13();
  static const int kUnknown13FieldNumber = 13;
  inline ::google::protobuf::uint32 unknown_13() const;
  inline void set_unknown_13(::google::protobuf::uint32 value);

  // optional uint32 physical_defence = 14;
  inline bool has_physical_defence() const;
  inline void clear_physical_defence();
  static const int kPhysicalDefenceFieldNumber = 14;
  inline ::google::protobuf::uint32 physical_defence() const;
  inline void set_physical_defence(::google::protobuf::uint32 value);

  // optional uint32 unknown_15 = 15;
  inline bool has_unknown_15() const;
  inline void clear_unknown_15();
  static const int kUnknown15FieldNumber = 15;
  inline ::google::protobuf::uint32 unknown_15() const;
  inline void set_unknown_15(::google::protobuf::uint32 value);

  // optional uint32 unknown_16 = 16;
  inline bool has_unknown_16() const;
  inline void clear_unknown_16();
  static const int kUnknown16FieldNumber = 16;
  inline ::google::protobuf::uint32 unknown_16() const;
  inline void set_unknown_16(::google::protobuf::uint32 value);

  // optional uint32 unknown_17 = 17;
  inline bool has_unknown_17() const;
  inline void clear_unknown_17();
  static const int kUnknown17FieldNumber = 17;
  inline ::google::protobuf::uint32 unknown_17() const;
  inline void set_unknown_17(::google::protobuf::uint32 value);

  // optional uint32 unknown_18 = 18;
  inline bool has_unknown_18() const;
  inline void clear_unknown_18();
  static const int kUnknown18FieldNumber = 18;
  inline ::google::protobuf::uint32 unknown_18() const;
  inline void set_unknown_18(::google::protobuf::uint32 value);

  // optional uint32 unknown_19 = 19;
  inline bool has_unknown_19() const;
  inline void clear_unknown_19();
  static const int kUnknown19FieldNumber = 19;
  inline ::google::protobuf::uint32 unknown_19() const;
  inline void set_unknown_19(::google::protobuf::uint32 value);

  // optional uint32 unknown_20 = 20;
  inline bool has_unknown_20() const;
  inline void clear_unknown_20();
  static const int kUnknown20FieldNumber = 20;
  inline ::google::protobuf::uint32 unknown_20() const;
  inline void set_unknown_20(::google::protobuf::uint32 value);

  // optional uint32 petrify_resist = 21;
  inline bool has_petrify_resist() const;
  inline void clear_petrify_resist();
  static const int kPetrifyResistFieldNumber = 21;
  inline ::google::protobuf::uint32 petrify_resist() const;
  inline void set_petrify_resist(::google::protobuf::uint32 value);

  // optional uint32 curse_resist = 22;
  inline bool has_curse_resist() const;
  inline void clear_curse_resist();
  static const int kCurseResistFieldNumber = 22;
  inline ::google::protobuf::uint32 curse_resist() const;
  inline void set_curse_resist(::google::protobuf::uint32 value);

  // optional uint32 agility = 23;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 23;
  inline ::google::protobuf::uint32 agility() const;
  inline void set_agility(::google::protobuf::uint32 value);

  // optional float poise = 24;
  inline bool has_poise() const;
  inline void clear_poise();
  static const int kPoiseFieldNumber = 24;
  inline float poise() const;
  inline void set_poise(float value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.PhysicalStatus)
 private:
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_equip_load();
  inline void clear_has_equip_load();
  inline void set_has_unknown_4();
  inline void clear_has_unknown_4();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();
  inline void set_has_attack_strength();
  inline void clear_has_attack_strength();
  inline void set_has_attack_dexterity();
  inline void clear_has_attack_dexterity();
  inline void set_has_unknown_8();
  inline void clear_has_unknown_8();
  inline void set_has_unknown_9();
  inline void clear_has_unknown_9();
  inline void set_has_unknown_10();
  inline void clear_has_unknown_10();
  inline void set_has_unknown_11();
  inline void clear_has_unknown_11();
  inline void set_has_unknown_12();
  inline void clear_has_unknown_12();
  inline void set_has_unknown_13();
  inline void clear_has_unknown_13();
  inline void set_has_physical_defence();
  inline void clear_has_physical_defence();
  inline void set_has_unknown_15();
  inline void clear_has_unknown_15();
  inline void set_has_unknown_16();
  inline void clear_has_unknown_16();
  inline void set_has_unknown_17();
  inline void clear_has_unknown_17();
  inline void set_has_unknown_18();
  inline void clear_has_unknown_18();
  inline void set_has_unknown_19();
  inline void clear_has_unknown_19();
  inline void set_has_unknown_20();
  inline void clear_has_unknown_20();
  inline void set_has_petrify_resist();
  inline void clear_has_petrify_resist();
  inline void set_has_curse_resist();
  inline void clear_has_curse_resist();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_poise();
  inline void clear_has_poise();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 health_;
  ::google::protobuf::uint32 stamina_;
  float equip_load_;
  ::google::protobuf::uint32 unknown_4_;
  ::google::protobuf::uint32 unknown_5_;
  ::google::protobuf::uint32 attack_strength_;
  ::google::protobuf::uint32 attack_dexterity_;
  ::google::protobuf::uint32 unknown_8_;
  ::google::protobuf::uint32 unknown_9_;
  ::google::protobuf::uint32 unknown_10_;
  ::google::protobuf::uint32 unknown_11_;
  ::google::protobuf::uint32 unknown_12_;
  ::google::protobuf::uint32 unknown_13_;
  ::google::protobuf::uint32 physical_defence_;
  ::google::protobuf::uint32 unknown_15_;
  ::google::protobuf::uint32 unknown_16_;
  ::google::protobuf::uint32 unknown_17_;
  ::google::protobuf::uint32 unknown_18_;
  ::google::protobuf::uint32 unknown_19_;
  ::google::protobuf::uint32 unknown_20_;
  ::google::protobuf::uint32 petrify_resist_;
  ::google::protobuf::uint32 curse_resist_;
  ::google::protobuf::uint32 agility_;
  float poise_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PhysicalStatus* default_instance_;
};
// -------------------------------------------------------------------

class PlayerLocation : public ::google::protobuf::MessageLite {
 public:
  PlayerLocation();
  virtual ~PlayerLocation();

  PlayerLocation(const PlayerLocation& from);

  inline PlayerLocation& operator=(const PlayerLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PlayerLocation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerLocation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerLocation* other);

  // implements Message ----------------------------------------------

  PlayerLocation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerLocation& from);
  void MergeFrom(const PlayerLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 online_area_id = 1;
  inline bool has_online_area_id() const;
  inline void clear_online_area_id();
  static const int kOnlineAreaIdFieldNumber = 1;
  inline ::google::protobuf::uint32 online_area_id() const;
  inline void set_online_area_id(::google::protobuf::uint32 value);

  // optional uint32 cell_id = 2;
  inline bool has_cell_id() const;
  inline void clear_cell_id();
  static const int kCellIdFieldNumber = 2;
  inline ::google::protobuf::uint32 cell_id() const;
  inline void set_cell_id(::google::protobuf::uint32 value);

  // optional uint32 online_activity_area_id = 3;
  inline bool has_online_activity_area_id() const;
  inline void clear_online_activity_area_id();
  static const int kOnlineActivityAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 online_activity_area_id() const;
  inline void set_online_activity_area_id(::google::protobuf::uint32 value);

  // optional .DS2_Frpg2PlayerData.Vector position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::DS2_Frpg2PlayerData::Vector& position() const;
  inline ::DS2_Frpg2PlayerData::Vector* mutable_position();
  inline ::DS2_Frpg2PlayerData::Vector* release_position();
  inline void set_allocated_position(::DS2_Frpg2PlayerData::Vector* position);

  // optional float unknown_5 = 5;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 5;
  inline float unknown_5() const;
  inline void set_unknown_5(float value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.PlayerLocation)
 private:
  inline void set_has_online_area_id();
  inline void clear_has_online_area_id();
  inline void set_has_cell_id();
  inline void clear_has_cell_id();
  inline void set_has_online_activity_area_id();
  inline void clear_has_online_activity_area_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 online_area_id_;
  ::google::protobuf::uint32 cell_id_;
  ::DS2_Frpg2PlayerData::Vector* position_;
  ::google::protobuf::uint32 online_activity_area_id_;
  float unknown_5_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayerLocation* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStatus_Phantom_leave_at : public ::google::protobuf::MessageLite {
 public:
  PlayerStatus_Phantom_leave_at();
  virtual ~PlayerStatus_Phantom_leave_at();

  PlayerStatus_Phantom_leave_at(const PlayerStatus_Phantom_leave_at& from);

  inline PlayerStatus_Phantom_leave_at& operator=(const PlayerStatus_Phantom_leave_at& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PlayerStatus_Phantom_leave_at& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerStatus_Phantom_leave_at* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerStatus_Phantom_leave_at* other);

  // implements Message ----------------------------------------------

  PlayerStatus_Phantom_leave_at* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerStatus_Phantom_leave_at& from);
  void MergeFrom(const PlayerStatus_Phantom_leave_at& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::uint32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::uint32 value);

  // optional .DS2_Frpg2PlayerData.DateTime datetime = 2;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  inline const ::DS2_Frpg2PlayerData::DateTime& datetime() const;
  inline ::DS2_Frpg2PlayerData::DateTime* mutable_datetime();
  inline ::DS2_Frpg2PlayerData::DateTime* release_datetime();
  inline void set_allocated_datetime(::DS2_Frpg2PlayerData::DateTime* datetime);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_datetime();
  inline void clear_has_datetime();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DS2_Frpg2PlayerData::DateTime* datetime_;
  ::google::protobuf::uint32 unknown_1_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayerStatus_Phantom_leave_at* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStatus : public ::google::protobuf::MessageLite {
 public:
  PlayerStatus();
  virtual ~PlayerStatus();

  PlayerStatus(const PlayerStatus& from);

  inline PlayerStatus& operator=(const PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PlayerStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerStatus* other);

  // implements Message ----------------------------------------------

  PlayerStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerStatus& from);
  void MergeFrom(const PlayerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 archetype = 2;
  inline bool has_archetype() const;
  inline void clear_archetype();
  static const int kArchetypeFieldNumber = 2;
  inline ::google::protobuf::uint32 archetype() const;
  inline void set_archetype(::google::protobuf::uint32 value);

  // optional uint32 covenant = 3;
  inline bool has_covenant() const;
  inline void clear_covenant();
  static const int kCovenantFieldNumber = 3;
  inline ::google::protobuf::uint32 covenant() const;
  inline void set_covenant(::google::protobuf::uint32 value);

  // optional uint32 unknown_4 = 4;
  inline bool has_unknown_4() const;
  inline void clear_unknown_4();
  static const int kUnknown4FieldNumber = 4;
  inline ::google::protobuf::uint32 unknown_4() const;
  inline void set_unknown_4(::google::protobuf::uint32 value);

  // optional uint32 unknown_5 = 5;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 5;
  inline ::google::protobuf::uint32 unknown_5() const;
  inline void set_unknown_5(::google::protobuf::uint32 value);

  // optional uint32 unknown_6 = 6;
  inline bool has_unknown_6() const;
  inline void clear_unknown_6();
  static const int kUnknown6FieldNumber = 6;
  inline ::google::protobuf::uint32 unknown_6() const;
  inline void set_unknown_6(::google::protobuf::uint32 value);

  // optional uint32 sitting_at_bonfire = 7;
  inline bool has_sitting_at_bonfire() const;
  inline void clear_sitting_at_bonfire();
  static const int kSittingAtBonfireFieldNumber = 7;
  inline ::google::protobuf::uint32 sitting_at_bonfire() const;
  inline void set_sitting_at_bonfire(::google::protobuf::uint32 value);

  // optional .DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at phantom_leave_at = 8;
  inline bool has_phantom_leave_at() const;
  inline void clear_phantom_leave_at();
  static const int kPhantomLeaveAtFieldNumber = 8;
  inline const ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at& phantom_leave_at() const;
  inline ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* mutable_phantom_leave_at();
  inline ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* release_phantom_leave_at();
  inline void set_allocated_phantom_leave_at(::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* phantom_leave_at);

  // optional uint32 disable_cross_region_play = 9;
  inline bool has_disable_cross_region_play() const;
  inline void clear_disable_cross_region_play();
  static const int kDisableCrossRegionPlayFieldNumber = 9;
  inline ::google::protobuf::uint32 disable_cross_region_play() const;
  inline void set_disable_cross_region_play(::google::protobuf::uint32 value);

  // optional uint32 character_id = 10;
  inline bool has_character_id() const;
  inline void clear_character_id();
  static const int kCharacterIdFieldNumber = 10;
  inline ::google::protobuf::uint32 character_id() const;
  inline void set_character_id(::google::protobuf::uint32 value);

  // optional uint32 human_effigy_burnt = 11;
  inline bool has_human_effigy_burnt() const;
  inline void clear_human_effigy_burnt();
  static const int kHumanEffigyBurntFieldNumber = 11;
  inline ::google::protobuf::uint32 human_effigy_burnt() const;
  inline void set_human_effigy_burnt(::google::protobuf::uint32 value);

  // repeated uint32 played_areas = 12;
  inline int played_areas_size() const;
  inline void clear_played_areas();
  static const int kPlayedAreasFieldNumber = 12;
  inline ::google::protobuf::uint32 played_areas(int index) const;
  inline void set_played_areas(int index, ::google::protobuf::uint32 value);
  inline void add_played_areas(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      played_areas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_played_areas();

  // optional uint32 unknown_13 = 13;
  inline bool has_unknown_13() const;
  inline void clear_unknown_13();
  static const int kUnknown13FieldNumber = 13;
  inline ::google::protobuf::uint32 unknown_13() const;
  inline void set_unknown_13(::google::protobuf::uint32 value);

  // optional uint32 unknown_14 = 14;
  inline bool has_unknown_14() const;
  inline void clear_unknown_14();
  static const int kUnknown14FieldNumber = 14;
  inline ::google::protobuf::uint32 unknown_14() const;
  inline void set_unknown_14(::google::protobuf::uint32 value);

  // optional uint32 soul_level = 15;
  inline bool has_soul_level() const;
  inline void clear_soul_level();
  static const int kSoulLevelFieldNumber = 15;
  inline ::google::protobuf::uint32 soul_level() const;
  inline void set_soul_level(::google::protobuf::uint32 value);

  // optional uint32 unknown_16 = 16;
  inline bool has_unknown_16() const;
  inline void clear_unknown_16();
  static const int kUnknown16FieldNumber = 16;
  inline ::google::protobuf::uint32 unknown_16() const;
  inline void set_unknown_16(::google::protobuf::uint32 value);

  // optional uint32 unknown_17 = 17;
  inline bool has_unknown_17() const;
  inline void clear_unknown_17();
  static const int kUnknown17FieldNumber = 17;
  inline ::google::protobuf::uint32 unknown_17() const;
  inline void set_unknown_17(::google::protobuf::uint32 value);

  // optional uint32 play_time_seconds = 18;
  inline bool has_play_time_seconds() const;
  inline void clear_play_time_seconds();
  static const int kPlayTimeSecondsFieldNumber = 18;
  inline ::google::protobuf::uint32 play_time_seconds() const;
  inline void set_play_time_seconds(::google::protobuf::uint32 value);

  // optional uint32 soul_memory = 19;
  inline bool has_soul_memory() const;
  inline void clear_soul_memory();
  static const int kSoulMemoryFieldNumber = 19;
  inline ::google::protobuf::uint32 soul_memory() const;
  inline void set_soul_memory(::google::protobuf::uint32 value);

  // optional uint32 unknown_20 = 20;
  inline bool has_unknown_20() const;
  inline void clear_unknown_20();
  static const int kUnknown20FieldNumber = 20;
  inline ::google::protobuf::uint32 unknown_20() const;
  inline void set_unknown_20(::google::protobuf::uint32 value);

  // optional string unknown_21 = 21;
  inline bool has_unknown_21() const;
  inline void clear_unknown_21();
  static const int kUnknown21FieldNumber = 21;
  inline const ::std::string& unknown_21() const;
  inline void set_unknown_21(const ::std::string& value);
  inline void set_unknown_21(const char* value);
  inline void set_unknown_21(const char* value, size_t size);
  inline ::std::string* mutable_unknown_21();
  inline ::std::string* release_unknown_21();
  inline void set_allocated_unknown_21(::std::string* unknown_21);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.PlayerStatus)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_archetype();
  inline void clear_has_archetype();
  inline void set_has_covenant();
  inline void clear_has_covenant();
  inline void set_has_unknown_4();
  inline void clear_has_unknown_4();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();
  inline void set_has_unknown_6();
  inline void clear_has_unknown_6();
  inline void set_has_sitting_at_bonfire();
  inline void clear_has_sitting_at_bonfire();
  inline void set_has_phantom_leave_at();
  inline void clear_has_phantom_leave_at();
  inline void set_has_disable_cross_region_play();
  inline void clear_has_disable_cross_region_play();
  inline void set_has_character_id();
  inline void clear_has_character_id();
  inline void set_has_human_effigy_burnt();
  inline void clear_has_human_effigy_burnt();
  inline void set_has_unknown_13();
  inline void clear_has_unknown_13();
  inline void set_has_unknown_14();
  inline void clear_has_unknown_14();
  inline void set_has_soul_level();
  inline void clear_has_soul_level();
  inline void set_has_unknown_16();
  inline void clear_has_unknown_16();
  inline void set_has_unknown_17();
  inline void clear_has_unknown_17();
  inline void set_has_play_time_seconds();
  inline void clear_has_play_time_seconds();
  inline void set_has_soul_memory();
  inline void clear_has_soul_memory();
  inline void set_has_unknown_20();
  inline void clear_has_unknown_20();
  inline void set_has_unknown_21();
  inline void clear_has_unknown_21();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 archetype_;
  ::google::protobuf::uint32 covenant_;
  ::google::protobuf::uint32 unknown_4_;
  ::google::protobuf::uint32 unknown_5_;
  ::google::protobuf::uint32 unknown_6_;
  ::google::protobuf::uint32 sitting_at_bonfire_;
  ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* phantom_leave_at_;
  ::google::protobuf::uint32 disable_cross_region_play_;
  ::google::protobuf::uint32 character_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > played_areas_;
  ::google::protobuf::uint32 human_effigy_burnt_;
  ::google::protobuf::uint32 unknown_13_;
  ::google::protobuf::uint32 unknown_14_;
  ::google::protobuf::uint32 soul_level_;
  ::google::protobuf::uint32 unknown_16_;
  ::google::protobuf::uint32 unknown_17_;
  ::google::protobuf::uint32 play_time_seconds_;
  ::google::protobuf::uint32 soul_memory_;
  ::std::string* unknown_21_;
  ::google::protobuf::uint32 unknown_20_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayerStatus* default_instance_;
};
// -------------------------------------------------------------------

class ServerSideStatus : public ::google::protobuf::MessageLite {
 public:
  ServerSideStatus();
  virtual ~ServerSideStatus();

  ServerSideStatus(const ServerSideStatus& from);

  inline ServerSideStatus& operator=(const ServerSideStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ServerSideStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerSideStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerSideStatus* other);

  // implements Message ----------------------------------------------

  ServerSideStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerSideStatus& from);
  void MergeFrom(const ServerSideStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::uint32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.ServerSideStatus)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unknown_1_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static ServerSideStatus* default_instance_;
};
// -------------------------------------------------------------------

class StatsInfo_Bonfire_levels : public ::google::protobuf::MessageLite {
 public:
  StatsInfo_Bonfire_levels();
  virtual ~StatsInfo_Bonfire_levels();

  StatsInfo_Bonfire_levels(const StatsInfo_Bonfire_levels& from);

  inline StatsInfo_Bonfire_levels& operator=(const StatsInfo_Bonfire_levels& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const StatsInfo_Bonfire_levels& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StatsInfo_Bonfire_levels* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StatsInfo_Bonfire_levels* other);

  // implements Message ----------------------------------------------

  StatsInfo_Bonfire_levels* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StatsInfo_Bonfire_levels& from);
  void MergeFrom(const StatsInfo_Bonfire_levels& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bonfire_id = 1;
  inline bool has_bonfire_id() const;
  inline void clear_bonfire_id();
  static const int kBonfireIdFieldNumber = 1;
  inline ::google::protobuf::uint32 bonfire_id() const;
  inline void set_bonfire_id(::google::protobuf::uint32 value);

  // optional uint32 bonfire_level = 2;
  inline bool has_bonfire_level() const;
  inline void clear_bonfire_level();
  static const int kBonfireLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 bonfire_level() const;
  inline void set_bonfire_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
 private:
  inline void set_has_bonfire_id();
  inline void clear_has_bonfire_id();
  inline void set_has_bonfire_level();
  inline void clear_has_bonfire_level();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bonfire_id_;
  ::google::protobuf::uint32 bonfire_level_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static StatsInfo_Bonfire_levels* default_instance_;
};
// -------------------------------------------------------------------

class StatsInfo : public ::google::protobuf::MessageLite {
 public:
  StatsInfo();
  virtual ~StatsInfo();

  StatsInfo(const StatsInfo& from);

  inline StatsInfo& operator=(const StatsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const StatsInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StatsInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StatsInfo* other);

  // implements Message ----------------------------------------------

  StatsInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StatsInfo& from);
  void MergeFrom(const StatsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::uint32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::uint32 value);

  // optional uint32 unknown_2 = 2;
  inline bool has_unknown_2() const;
  inline void clear_unknown_2();
  static const int kUnknown2FieldNumber = 2;
  inline ::google::protobuf::uint32 unknown_2() const;
  inline void set_unknown_2(::google::protobuf::uint32 value);

  // optional uint32 sinner_points = 3;
  inline bool has_sinner_points() const;
  inline void clear_sinner_points();
  static const int kSinnerPointsFieldNumber = 3;
  inline ::google::protobuf::uint32 sinner_points() const;
  inline void set_sinner_points(::google::protobuf::uint32 value);

  // repeated .DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels bonfire_levels = 4;
  inline int bonfire_levels_size() const;
  inline void clear_bonfire_levels();
  static const int kBonfireLevelsFieldNumber = 4;
  inline const ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels& bonfire_levels(int index) const;
  inline ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels* mutable_bonfire_levels(int index);
  inline ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels* add_bonfire_levels();
  inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels >&
      bonfire_levels() const;
  inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels >*
      mutable_bonfire_levels();

  // optional uint32 unknown_5 = 5;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 5;
  inline ::google::protobuf::uint32 unknown_5() const;
  inline void set_unknown_5(::google::protobuf::uint32 value);

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_6 = 6;
  inline int phantom_type_count_6_size() const;
  inline void clear_phantom_type_count_6();
  static const int kPhantomTypeCount6FieldNumber = 6;
  inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& phantom_type_count_6(int index) const;
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* mutable_phantom_type_count_6(int index);
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* add_phantom_type_count_6();
  inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
      phantom_type_count_6() const;
  inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
      mutable_phantom_type_count_6();

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_7 = 7;
  inline int phantom_type_count_7_size() const;
  inline void clear_phantom_type_count_7();
  static const int kPhantomTypeCount7FieldNumber = 7;
  inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& phantom_type_count_7(int index) const;
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* mutable_phantom_type_count_7(int index);
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* add_phantom_type_count_7();
  inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
      phantom_type_count_7() const;
  inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
      mutable_phantom_type_count_7();

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_8 = 8;
  inline int phantom_type_count_8_size() const;
  inline void clear_phantom_type_count_8();
  static const int kPhantomTypeCount8FieldNumber = 8;
  inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& phantom_type_count_8(int index) const;
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* mutable_phantom_type_count_8(int index);
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* add_phantom_type_count_8();
  inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
      phantom_type_count_8() const;
  inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
      mutable_phantom_type_count_8();

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_9 = 9;
  inline int phantom_type_count_9_size() const;
  inline void clear_phantom_type_count_9();
  static const int kPhantomTypeCount9FieldNumber = 9;
  inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& phantom_type_count_9(int index) const;
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* mutable_phantom_type_count_9(int index);
  inline ::DS2_Frpg2PlayerData::PhantomTypeCount* add_phantom_type_count_9();
  inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
      phantom_type_count_9() const;
  inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
      mutable_phantom_type_count_9();

  // optional uint32 unknown_10 = 10;
  inline bool has_unknown_10() const;
  inline void clear_unknown_10();
  static const int kUnknown10FieldNumber = 10;
  inline ::google::protobuf::uint32 unknown_10() const;
  inline void set_unknown_10(::google::protobuf::uint32 value);

  // repeated uint32 unknown_11 = 11;
  inline int unknown_11_size() const;
  inline void clear_unknown_11();
  static const int kUnknown11FieldNumber = 11;
  inline ::google::protobuf::uint32 unknown_11(int index) const;
  inline void set_unknown_11(int index, ::google::protobuf::uint32 value);
  inline void add_unknown_11(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unknown_11() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unknown_11();

  // optional uint32 unknown_12 = 12;
  inline bool has_unknown_12() const;
  inline void clear_unknown_12();
  static const int kUnknown12FieldNumber = 12;
  inline ::google::protobuf::uint32 unknown_12() const;
  inline void set_unknown_12(::google::protobuf::uint32 value);

  // optional uint32 unknown_13 = 13;
  inline bool has_unknown_13() const;
  inline void clear_unknown_13();
  static const int kUnknown13FieldNumber = 13;
  inline ::google::protobuf::uint32 unknown_13() const;
  inline void set_unknown_13(::google::protobuf::uint32 value);

  // optional uint32 unknown_14 = 14;
  inline bool has_unknown_14() const;
  inline void clear_unknown_14();
  static const int kUnknown14FieldNumber = 14;
  inline ::google::protobuf::uint32 unknown_14() const;
  inline void set_unknown_14(::google::protobuf::uint32 value);

  // optional uint32 unknown_15 = 15;
  inline bool has_unknown_15() const;
  inline void clear_unknown_15();
  static const int kUnknown15FieldNumber = 15;
  inline ::google::protobuf::uint32 unknown_15() const;
  inline void set_unknown_15(::google::protobuf::uint32 value);

  // optional uint32 unknown_16 = 16;
  inline bool has_unknown_16() const;
  inline void clear_unknown_16();
  static const int kUnknown16FieldNumber = 16;
  inline ::google::protobuf::uint32 unknown_16() const;
  inline void set_unknown_16(::google::protobuf::uint32 value);

  // optional .DS2_Frpg2PlayerData.DateTime datetime = 17;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 17;
  inline const ::DS2_Frpg2PlayerData::DateTime& datetime() const;
  inline ::DS2_Frpg2PlayerData::DateTime* mutable_datetime();
  inline ::DS2_Frpg2PlayerData::DateTime* release_datetime();
  inline void set_allocated_datetime(::DS2_Frpg2PlayerData::DateTime* datetime);

  // optional uint32 unknown_18 = 18;
  inline bool has_unknown_18() const;
  inline void clear_unknown_18();
  static const int kUnknown18FieldNumber = 18;
  inline ::google::protobuf::uint32 unknown_18() const;
  inline void set_unknown_18(::google::protobuf::uint32 value);

  // repeated uint32 unlocked_bonfires = 19;
  inline int unlocked_bonfires_size() const;
  inline void clear_unlocked_bonfires();
  static const int kUnlockedBonfiresFieldNumber = 19;
  inline ::google::protobuf::uint32 unlocked_bonfires(int index) const;
  inline void set_unlocked_bonfires(int index, ::google::protobuf::uint32 value);
  inline void add_unlocked_bonfires(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlocked_bonfires() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlocked_bonfires();

  // optional uint32 unknown_20 = 20;
  inline bool has_unknown_20() const;
  inline void clear_unknown_20();
  static const int kUnknown20FieldNumber = 20;
  inline ::google::protobuf::uint32 unknown_20() const;
  inline void set_unknown_20(::google::protobuf::uint32 value);

  // repeated uint32 unknown_21 = 21;
  inline int unknown_21_size() const;
  inline void clear_unknown_21();
  static const int kUnknown21FieldNumber = 21;
  inline ::google::protobuf::uint32 unknown_21(int index) const;
  inline void set_unknown_21(int index, ::google::protobuf::uint32 value);
  inline void add_unknown_21(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unknown_21() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unknown_21();

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.StatsInfo)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_unknown_2();
  inline void clear_has_unknown_2();
  inline void set_has_sinner_points();
  inline void clear_has_sinner_points();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();
  inline void set_has_unknown_10();
  inline void clear_has_unknown_10();
  inline void set_has_unknown_12();
  inline void clear_has_unknown_12();
  inline void set_has_unknown_13();
  inline void clear_has_unknown_13();
  inline void set_has_unknown_14();
  inline void clear_has_unknown_14();
  inline void set_has_unknown_15();
  inline void clear_has_unknown_15();
  inline void set_has_unknown_16();
  inline void clear_has_unknown_16();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_unknown_18();
  inline void clear_has_unknown_18();
  inline void set_has_unknown_20();
  inline void clear_has_unknown_20();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unknown_1_;
  ::google::protobuf::uint32 unknown_2_;
  ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels > bonfire_levels_;
  ::google::protobuf::uint32 sinner_points_;
  ::google::protobuf::uint32 unknown_5_;
  ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount > phantom_type_count_6_;
  ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount > phantom_type_count_7_;
  ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount > phantom_type_count_8_;
  ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount > phantom_type_count_9_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unknown_11_;
  ::google::protobuf::uint32 unknown_10_;
  ::google::protobuf::uint32 unknown_12_;
  ::google::protobuf::uint32 unknown_13_;
  ::google::protobuf::uint32 unknown_14_;
  ::google::protobuf::uint32 unknown_15_;
  ::google::protobuf::uint32 unknown_16_;
  ::DS2_Frpg2PlayerData::DateTime* datetime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlocked_bonfires_;
  ::google::protobuf::uint32 unknown_18_;
  ::google::protobuf::uint32 unknown_20_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unknown_21_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static StatsInfo* default_instance_;
};
// -------------------------------------------------------------------

class Vector : public ::google::protobuf::MessageLite {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Vector& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Vector* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Vector* other);

  // implements Message ----------------------------------------------

  Vector* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.Vector)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static Vector* default_instance_;
};
// -------------------------------------------------------------------

class WeaponStatus : public ::google::protobuf::MessageLite {
 public:
  WeaponStatus();
  virtual ~WeaponStatus();

  WeaponStatus(const WeaponStatus& from);

  inline WeaponStatus& operator=(const WeaponStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WeaponStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WeaponStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WeaponStatus* other);

  // implements Message ----------------------------------------------

  WeaponStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WeaponStatus& from);
  void MergeFrom(const WeaponStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 left_ar_1 = 1;
  inline bool has_left_ar_1() const;
  inline void clear_left_ar_1();
  static const int kLeftAr1FieldNumber = 1;
  inline ::google::protobuf::uint32 left_ar_1() const;
  inline void set_left_ar_1(::google::protobuf::uint32 value);

  // optional uint32 left_ar_2 = 2;
  inline bool has_left_ar_2() const;
  inline void clear_left_ar_2();
  static const int kLeftAr2FieldNumber = 2;
  inline ::google::protobuf::uint32 left_ar_2() const;
  inline void set_left_ar_2(::google::protobuf::uint32 value);

  // optional uint32 left_ar_3 = 3;
  inline bool has_left_ar_3() const;
  inline void clear_left_ar_3();
  static const int kLeftAr3FieldNumber = 3;
  inline ::google::protobuf::uint32 left_ar_3() const;
  inline void set_left_ar_3(::google::protobuf::uint32 value);

  // optional uint32 right_ar_1 = 4;
  inline bool has_right_ar_1() const;
  inline void clear_right_ar_1();
  static const int kRightAr1FieldNumber = 4;
  inline ::google::protobuf::uint32 right_ar_1() const;
  inline void set_right_ar_1(::google::protobuf::uint32 value);

  // optional uint32 right_ar_2 = 5;
  inline bool has_right_ar_2() const;
  inline void clear_right_ar_2();
  static const int kRightAr2FieldNumber = 5;
  inline ::google::protobuf::uint32 right_ar_2() const;
  inline void set_right_ar_2(::google::protobuf::uint32 value);

  // optional uint32 right_ar_3 = 6;
  inline bool has_right_ar_3() const;
  inline void clear_right_ar_3();
  static const int kRightAr3FieldNumber = 6;
  inline ::google::protobuf::uint32 right_ar_3() const;
  inline void set_right_ar_3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DS2_Frpg2PlayerData.WeaponStatus)
 private:
  inline void set_has_left_ar_1();
  inline void clear_has_left_ar_1();
  inline void set_has_left_ar_2();
  inline void clear_has_left_ar_2();
  inline void set_has_left_ar_3();
  inline void clear_has_left_ar_3();
  inline void set_has_right_ar_1();
  inline void clear_has_right_ar_1();
  inline void set_has_right_ar_2();
  inline void clear_has_right_ar_2();
  inline void set_has_right_ar_3();
  inline void clear_has_right_ar_3();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 left_ar_1_;
  ::google::protobuf::uint32 left_ar_2_;
  ::google::protobuf::uint32 left_ar_3_;
  ::google::protobuf::uint32 right_ar_1_;
  ::google::protobuf::uint32 right_ar_2_;
  ::google::protobuf::uint32 right_ar_3_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_DS2_5fFrpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static WeaponStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// AllStatus

// optional .DS2_Frpg2PlayerData.PlayerLocation player_location = 1;
inline bool AllStatus::has_player_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllStatus::set_has_player_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllStatus::clear_has_player_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllStatus::clear_player_location() {
  if (player_location_ != NULL) player_location_->::DS2_Frpg2PlayerData::PlayerLocation::Clear();
  clear_has_player_location();
}
inline const ::DS2_Frpg2PlayerData::PlayerLocation& AllStatus::player_location() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.player_location)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_location_ != NULL ? *player_location_ : *default_instance().player_location_;
#else
  return player_location_ != NULL ? *player_location_ : *default_instance_->player_location_;
#endif
}
inline ::DS2_Frpg2PlayerData::PlayerLocation* AllStatus::mutable_player_location() {
  set_has_player_location();
  if (player_location_ == NULL) player_location_ = new ::DS2_Frpg2PlayerData::PlayerLocation;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.player_location)
  return player_location_;
}
inline ::DS2_Frpg2PlayerData::PlayerLocation* AllStatus::release_player_location() {
  clear_has_player_location();
  ::DS2_Frpg2PlayerData::PlayerLocation* temp = player_location_;
  player_location_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_player_location(::DS2_Frpg2PlayerData::PlayerLocation* player_location) {
  delete player_location_;
  player_location_ = player_location;
  if (player_location) {
    set_has_player_location();
  } else {
    clear_has_player_location();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.player_location)
}

// optional .DS2_Frpg2PlayerData.PlayerStatus player_status = 2;
inline bool AllStatus::has_player_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllStatus::set_has_player_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllStatus::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllStatus::clear_player_status() {
  if (player_status_ != NULL) player_status_->::DS2_Frpg2PlayerData::PlayerStatus::Clear();
  clear_has_player_status();
}
inline const ::DS2_Frpg2PlayerData::PlayerStatus& AllStatus::player_status() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.player_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_status_ != NULL ? *player_status_ : *default_instance().player_status_;
#else
  return player_status_ != NULL ? *player_status_ : *default_instance_->player_status_;
#endif
}
inline ::DS2_Frpg2PlayerData::PlayerStatus* AllStatus::mutable_player_status() {
  set_has_player_status();
  if (player_status_ == NULL) player_status_ = new ::DS2_Frpg2PlayerData::PlayerStatus;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.player_status)
  return player_status_;
}
inline ::DS2_Frpg2PlayerData::PlayerStatus* AllStatus::release_player_status() {
  clear_has_player_status();
  ::DS2_Frpg2PlayerData::PlayerStatus* temp = player_status_;
  player_status_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_player_status(::DS2_Frpg2PlayerData::PlayerStatus* player_status) {
  delete player_status_;
  player_status_ = player_status;
  if (player_status) {
    set_has_player_status();
  } else {
    clear_has_player_status();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.player_status)
}

// optional .DS2_Frpg2PlayerData.ItemUsingInfo item_using_info = 3;
inline bool AllStatus::has_item_using_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllStatus::set_has_item_using_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllStatus::clear_has_item_using_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllStatus::clear_item_using_info() {
  if (item_using_info_ != NULL) item_using_info_->::DS2_Frpg2PlayerData::ItemUsingInfo::Clear();
  clear_has_item_using_info();
}
inline const ::DS2_Frpg2PlayerData::ItemUsingInfo& AllStatus::item_using_info() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.item_using_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return item_using_info_ != NULL ? *item_using_info_ : *default_instance().item_using_info_;
#else
  return item_using_info_ != NULL ? *item_using_info_ : *default_instance_->item_using_info_;
#endif
}
inline ::DS2_Frpg2PlayerData::ItemUsingInfo* AllStatus::mutable_item_using_info() {
  set_has_item_using_info();
  if (item_using_info_ == NULL) item_using_info_ = new ::DS2_Frpg2PlayerData::ItemUsingInfo;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.item_using_info)
  return item_using_info_;
}
inline ::DS2_Frpg2PlayerData::ItemUsingInfo* AllStatus::release_item_using_info() {
  clear_has_item_using_info();
  ::DS2_Frpg2PlayerData::ItemUsingInfo* temp = item_using_info_;
  item_using_info_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_item_using_info(::DS2_Frpg2PlayerData::ItemUsingInfo* item_using_info) {
  delete item_using_info_;
  item_using_info_ = item_using_info;
  if (item_using_info) {
    set_has_item_using_info();
  } else {
    clear_has_item_using_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.item_using_info)
}

// optional .DS2_Frpg2PlayerData.StatsInfo stats_info = 4;
inline bool AllStatus::has_stats_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllStatus::set_has_stats_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllStatus::clear_has_stats_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllStatus::clear_stats_info() {
  if (stats_info_ != NULL) stats_info_->::DS2_Frpg2PlayerData::StatsInfo::Clear();
  clear_has_stats_info();
}
inline const ::DS2_Frpg2PlayerData::StatsInfo& AllStatus::stats_info() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.stats_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stats_info_ != NULL ? *stats_info_ : *default_instance().stats_info_;
#else
  return stats_info_ != NULL ? *stats_info_ : *default_instance_->stats_info_;
#endif
}
inline ::DS2_Frpg2PlayerData::StatsInfo* AllStatus::mutable_stats_info() {
  set_has_stats_info();
  if (stats_info_ == NULL) stats_info_ = new ::DS2_Frpg2PlayerData::StatsInfo;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.stats_info)
  return stats_info_;
}
inline ::DS2_Frpg2PlayerData::StatsInfo* AllStatus::release_stats_info() {
  clear_has_stats_info();
  ::DS2_Frpg2PlayerData::StatsInfo* temp = stats_info_;
  stats_info_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_stats_info(::DS2_Frpg2PlayerData::StatsInfo* stats_info) {
  delete stats_info_;
  stats_info_ = stats_info;
  if (stats_info) {
    set_has_stats_info();
  } else {
    clear_has_stats_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.stats_info)
}

// optional .DS2_Frpg2PlayerData.LevelStatus attributes = 5;
inline bool AllStatus::has_attributes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllStatus::set_has_attributes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllStatus::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllStatus::clear_attributes() {
  if (attributes_ != NULL) attributes_->::DS2_Frpg2PlayerData::LevelStatus::Clear();
  clear_has_attributes();
}
inline const ::DS2_Frpg2PlayerData::LevelStatus& AllStatus::attributes() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.attributes)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return attributes_ != NULL ? *attributes_ : *default_instance().attributes_;
#else
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
#endif
}
inline ::DS2_Frpg2PlayerData::LevelStatus* AllStatus::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::DS2_Frpg2PlayerData::LevelStatus;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.attributes)
  return attributes_;
}
inline ::DS2_Frpg2PlayerData::LevelStatus* AllStatus::release_attributes() {
  clear_has_attributes();
  ::DS2_Frpg2PlayerData::LevelStatus* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_attributes(::DS2_Frpg2PlayerData::LevelStatus* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.attributes)
}

// optional .DS2_Frpg2PlayerData.PhysicalStatus physical_status = 6;
inline bool AllStatus::has_physical_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllStatus::set_has_physical_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllStatus::clear_has_physical_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllStatus::clear_physical_status() {
  if (physical_status_ != NULL) physical_status_->::DS2_Frpg2PlayerData::PhysicalStatus::Clear();
  clear_has_physical_status();
}
inline const ::DS2_Frpg2PlayerData::PhysicalStatus& AllStatus::physical_status() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.physical_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return physical_status_ != NULL ? *physical_status_ : *default_instance().physical_status_;
#else
  return physical_status_ != NULL ? *physical_status_ : *default_instance_->physical_status_;
#endif
}
inline ::DS2_Frpg2PlayerData::PhysicalStatus* AllStatus::mutable_physical_status() {
  set_has_physical_status();
  if (physical_status_ == NULL) physical_status_ = new ::DS2_Frpg2PlayerData::PhysicalStatus;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.physical_status)
  return physical_status_;
}
inline ::DS2_Frpg2PlayerData::PhysicalStatus* AllStatus::release_physical_status() {
  clear_has_physical_status();
  ::DS2_Frpg2PlayerData::PhysicalStatus* temp = physical_status_;
  physical_status_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_physical_status(::DS2_Frpg2PlayerData::PhysicalStatus* physical_status) {
  delete physical_status_;
  physical_status_ = physical_status;
  if (physical_status) {
    set_has_physical_status();
  } else {
    clear_has_physical_status();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.physical_status)
}

// optional .DS2_Frpg2PlayerData.WeaponStatus weapon_status = 7;
inline bool AllStatus::has_weapon_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllStatus::set_has_weapon_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllStatus::clear_has_weapon_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllStatus::clear_weapon_status() {
  if (weapon_status_ != NULL) weapon_status_->::DS2_Frpg2PlayerData::WeaponStatus::Clear();
  clear_has_weapon_status();
}
inline const ::DS2_Frpg2PlayerData::WeaponStatus& AllStatus::weapon_status() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.weapon_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return weapon_status_ != NULL ? *weapon_status_ : *default_instance().weapon_status_;
#else
  return weapon_status_ != NULL ? *weapon_status_ : *default_instance_->weapon_status_;
#endif
}
inline ::DS2_Frpg2PlayerData::WeaponStatus* AllStatus::mutable_weapon_status() {
  set_has_weapon_status();
  if (weapon_status_ == NULL) weapon_status_ = new ::DS2_Frpg2PlayerData::WeaponStatus;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.weapon_status)
  return weapon_status_;
}
inline ::DS2_Frpg2PlayerData::WeaponStatus* AllStatus::release_weapon_status() {
  clear_has_weapon_status();
  ::DS2_Frpg2PlayerData::WeaponStatus* temp = weapon_status_;
  weapon_status_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_weapon_status(::DS2_Frpg2PlayerData::WeaponStatus* weapon_status) {
  delete weapon_status_;
  weapon_status_ = weapon_status;
  if (weapon_status) {
    set_has_weapon_status();
  } else {
    clear_has_weapon_status();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.weapon_status)
}

// optional .DS2_Frpg2PlayerData.ArmorStatus armor_status = 8;
inline bool AllStatus::has_armor_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllStatus::set_has_armor_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllStatus::clear_has_armor_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllStatus::clear_armor_status() {
  if (armor_status_ != NULL) armor_status_->::DS2_Frpg2PlayerData::ArmorStatus::Clear();
  clear_has_armor_status();
}
inline const ::DS2_Frpg2PlayerData::ArmorStatus& AllStatus::armor_status() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.armor_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return armor_status_ != NULL ? *armor_status_ : *default_instance().armor_status_;
#else
  return armor_status_ != NULL ? *armor_status_ : *default_instance_->armor_status_;
#endif
}
inline ::DS2_Frpg2PlayerData::ArmorStatus* AllStatus::mutable_armor_status() {
  set_has_armor_status();
  if (armor_status_ == NULL) armor_status_ = new ::DS2_Frpg2PlayerData::ArmorStatus;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.armor_status)
  return armor_status_;
}
inline ::DS2_Frpg2PlayerData::ArmorStatus* AllStatus::release_armor_status() {
  clear_has_armor_status();
  ::DS2_Frpg2PlayerData::ArmorStatus* temp = armor_status_;
  armor_status_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_armor_status(::DS2_Frpg2PlayerData::ArmorStatus* armor_status) {
  delete armor_status_;
  armor_status_ = armor_status;
  if (armor_status) {
    set_has_armor_status();
  } else {
    clear_has_armor_status();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.armor_status)
}

// optional .DS2_Frpg2PlayerData.ServerSideStatus server_side_status = 9;
inline bool AllStatus::has_server_side_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AllStatus::set_has_server_side_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AllStatus::clear_has_server_side_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AllStatus::clear_server_side_status() {
  if (server_side_status_ != NULL) server_side_status_->::DS2_Frpg2PlayerData::ServerSideStatus::Clear();
  clear_has_server_side_status();
}
inline const ::DS2_Frpg2PlayerData::ServerSideStatus& AllStatus::server_side_status() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.server_side_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return server_side_status_ != NULL ? *server_side_status_ : *default_instance().server_side_status_;
#else
  return server_side_status_ != NULL ? *server_side_status_ : *default_instance_->server_side_status_;
#endif
}
inline ::DS2_Frpg2PlayerData::ServerSideStatus* AllStatus::mutable_server_side_status() {
  set_has_server_side_status();
  if (server_side_status_ == NULL) server_side_status_ = new ::DS2_Frpg2PlayerData::ServerSideStatus;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.server_side_status)
  return server_side_status_;
}
inline ::DS2_Frpg2PlayerData::ServerSideStatus* AllStatus::release_server_side_status() {
  clear_has_server_side_status();
  ::DS2_Frpg2PlayerData::ServerSideStatus* temp = server_side_status_;
  server_side_status_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_server_side_status(::DS2_Frpg2PlayerData::ServerSideStatus* server_side_status) {
  delete server_side_status_;
  server_side_status_ = server_side_status;
  if (server_side_status) {
    set_has_server_side_status();
  } else {
    clear_has_server_side_status();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.server_side_status)
}

// optional .DS2_Frpg2PlayerData.EquipmentInfo equipment_info = 10;
inline bool AllStatus::has_equipment_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AllStatus::set_has_equipment_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AllStatus::clear_has_equipment_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AllStatus::clear_equipment_info() {
  if (equipment_info_ != NULL) equipment_info_->::DS2_Frpg2PlayerData::EquipmentInfo::Clear();
  clear_has_equipment_info();
}
inline const ::DS2_Frpg2PlayerData::EquipmentInfo& AllStatus::equipment_info() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.AllStatus.equipment_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return equipment_info_ != NULL ? *equipment_info_ : *default_instance().equipment_info_;
#else
  return equipment_info_ != NULL ? *equipment_info_ : *default_instance_->equipment_info_;
#endif
}
inline ::DS2_Frpg2PlayerData::EquipmentInfo* AllStatus::mutable_equipment_info() {
  set_has_equipment_info();
  if (equipment_info_ == NULL) equipment_info_ = new ::DS2_Frpg2PlayerData::EquipmentInfo;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.AllStatus.equipment_info)
  return equipment_info_;
}
inline ::DS2_Frpg2PlayerData::EquipmentInfo* AllStatus::release_equipment_info() {
  clear_has_equipment_info();
  ::DS2_Frpg2PlayerData::EquipmentInfo* temp = equipment_info_;
  equipment_info_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_equipment_info(::DS2_Frpg2PlayerData::EquipmentInfo* equipment_info) {
  delete equipment_info_;
  equipment_info_ = equipment_info;
  if (equipment_info) {
    set_has_equipment_info();
  } else {
    clear_has_equipment_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.AllStatus.equipment_info)
}

// -------------------------------------------------------------------

// ArmorStatus

// optional uint32 strike_def = 1;
inline bool ArmorStatus::has_strike_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArmorStatus::set_has_strike_def() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArmorStatus::clear_has_strike_def() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArmorStatus::clear_strike_def() {
  strike_def_ = 0u;
  clear_has_strike_def();
}
inline ::google::protobuf::uint32 ArmorStatus::strike_def() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ArmorStatus.strike_def)
  return strike_def_;
}
inline void ArmorStatus::set_strike_def(::google::protobuf::uint32 value) {
  set_has_strike_def();
  strike_def_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ArmorStatus.strike_def)
}

// optional uint32 slash_def = 2;
inline bool ArmorStatus::has_slash_def() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArmorStatus::set_has_slash_def() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArmorStatus::clear_has_slash_def() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArmorStatus::clear_slash_def() {
  slash_def_ = 0u;
  clear_has_slash_def();
}
inline ::google::protobuf::uint32 ArmorStatus::slash_def() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ArmorStatus.slash_def)
  return slash_def_;
}
inline void ArmorStatus::set_slash_def(::google::protobuf::uint32 value) {
  set_has_slash_def();
  slash_def_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ArmorStatus.slash_def)
}

// optional uint32 thrust_def = 3;
inline bool ArmorStatus::has_thrust_def() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArmorStatus::set_has_thrust_def() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArmorStatus::clear_has_thrust_def() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArmorStatus::clear_thrust_def() {
  thrust_def_ = 0u;
  clear_has_thrust_def();
}
inline ::google::protobuf::uint32 ArmorStatus::thrust_def() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ArmorStatus.thrust_def)
  return thrust_def_;
}
inline void ArmorStatus::set_thrust_def(::google::protobuf::uint32 value) {
  set_has_thrust_def();
  thrust_def_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ArmorStatus.thrust_def)
}

// optional float poise = 4;
inline bool ArmorStatus::has_poise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArmorStatus::set_has_poise() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArmorStatus::clear_has_poise() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArmorStatus::clear_poise() {
  poise_ = 0;
  clear_has_poise();
}
inline float ArmorStatus::poise() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ArmorStatus.poise)
  return poise_;
}
inline void ArmorStatus::set_poise(float value) {
  set_has_poise();
  poise_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ArmorStatus.poise)
}

// -------------------------------------------------------------------

// DateTime

// required uint32 year = 1;
inline bool DateTime::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DateTime::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DateTime::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DateTime::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 DateTime::year() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.DateTime.year)
  return year_;
}
inline void DateTime::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.DateTime.year)
}

// required uint32 month = 2;
inline bool DateTime::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DateTime::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DateTime::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DateTime::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 DateTime::month() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.DateTime.month)
  return month_;
}
inline void DateTime::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.DateTime.month)
}

// required uint32 day = 3;
inline bool DateTime::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DateTime::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DateTime::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DateTime::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 DateTime::day() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.DateTime.day)
  return day_;
}
inline void DateTime::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.DateTime.day)
}

// required uint32 hours = 4;
inline bool DateTime::has_hours() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DateTime::set_has_hours() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DateTime::clear_has_hours() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DateTime::clear_hours() {
  hours_ = 0u;
  clear_has_hours();
}
inline ::google::protobuf::uint32 DateTime::hours() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.DateTime.hours)
  return hours_;
}
inline void DateTime::set_hours(::google::protobuf::uint32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.DateTime.hours)
}

// required uint32 minutes = 5;
inline bool DateTime::has_minutes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DateTime::set_has_minutes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DateTime::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DateTime::clear_minutes() {
  minutes_ = 0u;
  clear_has_minutes();
}
inline ::google::protobuf::uint32 DateTime::minutes() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.DateTime.minutes)
  return minutes_;
}
inline void DateTime::set_minutes(::google::protobuf::uint32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.DateTime.minutes)
}

// required uint32 seconds = 6;
inline bool DateTime::has_seconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DateTime::set_has_seconds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DateTime::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DateTime::clear_seconds() {
  seconds_ = 0u;
  clear_has_seconds();
}
inline ::google::protobuf::uint32 DateTime::seconds() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.DateTime.seconds)
  return seconds_;
}
inline void DateTime::set_seconds(::google::protobuf::uint32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.DateTime.seconds)
}

// required uint32 tzdiff = 7;
inline bool DateTime::has_tzdiff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DateTime::set_has_tzdiff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DateTime::clear_has_tzdiff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DateTime::clear_tzdiff() {
  tzdiff_ = 0u;
  clear_has_tzdiff();
}
inline ::google::protobuf::uint32 DateTime::tzdiff() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.DateTime.tzdiff)
  return tzdiff_;
}
inline void DateTime::set_tzdiff(::google::protobuf::uint32 value) {
  set_has_tzdiff();
  tzdiff_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.DateTime.tzdiff)
}

// -------------------------------------------------------------------

// EquipmentInfo

// optional uint32 weapon_slots = 1;
inline bool EquipmentInfo::has_weapon_slots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentInfo::set_has_weapon_slots() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentInfo::clear_has_weapon_slots() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentInfo::clear_weapon_slots() {
  weapon_slots_ = 0u;
  clear_has_weapon_slots();
}
inline ::google::protobuf::uint32 EquipmentInfo::weapon_slots() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.EquipmentInfo.weapon_slots)
  return weapon_slots_;
}
inline void EquipmentInfo::set_weapon_slots(::google::protobuf::uint32 value) {
  set_has_weapon_slots();
  weapon_slots_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.EquipmentInfo.weapon_slots)
}

// optional uint32 armor_slots = 2;
inline bool EquipmentInfo::has_armor_slots() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentInfo::set_has_armor_slots() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentInfo::clear_has_armor_slots() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentInfo::clear_armor_slots() {
  armor_slots_ = 0u;
  clear_has_armor_slots();
}
inline ::google::protobuf::uint32 EquipmentInfo::armor_slots() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.EquipmentInfo.armor_slots)
  return armor_slots_;
}
inline void EquipmentInfo::set_armor_slots(::google::protobuf::uint32 value) {
  set_has_armor_slots();
  armor_slots_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.EquipmentInfo.armor_slots)
}

// optional uint32 ring_slots = 3;
inline bool EquipmentInfo::has_ring_slots() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentInfo::set_has_ring_slots() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentInfo::clear_has_ring_slots() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentInfo::clear_ring_slots() {
  ring_slots_ = 0u;
  clear_has_ring_slots();
}
inline ::google::protobuf::uint32 EquipmentInfo::ring_slots() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.EquipmentInfo.ring_slots)
  return ring_slots_;
}
inline void EquipmentInfo::set_ring_slots(::google::protobuf::uint32 value) {
  set_has_ring_slots();
  ring_slots_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.EquipmentInfo.ring_slots)
}

// optional uint32 ammunition_slots = 4;
inline bool EquipmentInfo::has_ammunition_slots() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentInfo::set_has_ammunition_slots() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentInfo::clear_has_ammunition_slots() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentInfo::clear_ammunition_slots() {
  ammunition_slots_ = 0u;
  clear_has_ammunition_slots();
}
inline ::google::protobuf::uint32 EquipmentInfo::ammunition_slots() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.EquipmentInfo.ammunition_slots)
  return ammunition_slots_;
}
inline void EquipmentInfo::set_ammunition_slots(::google::protobuf::uint32 value) {
  set_has_ammunition_slots();
  ammunition_slots_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.EquipmentInfo.ammunition_slots)
}

// optional uint32 belt_slots = 5;
inline bool EquipmentInfo::has_belt_slots() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentInfo::set_has_belt_slots() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentInfo::clear_has_belt_slots() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentInfo::clear_belt_slots() {
  belt_slots_ = 0u;
  clear_has_belt_slots();
}
inline ::google::protobuf::uint32 EquipmentInfo::belt_slots() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.EquipmentInfo.belt_slots)
  return belt_slots_;
}
inline void EquipmentInfo::set_belt_slots(::google::protobuf::uint32 value) {
  set_has_belt_slots();
  belt_slots_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.EquipmentInfo.belt_slots)
}

// optional uint32 spell_slots = 6;
inline bool EquipmentInfo::has_spell_slots() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentInfo::set_has_spell_slots() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentInfo::clear_has_spell_slots() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentInfo::clear_spell_slots() {
  spell_slots_ = 0u;
  clear_has_spell_slots();
}
inline ::google::protobuf::uint32 EquipmentInfo::spell_slots() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.EquipmentInfo.spell_slots)
  return spell_slots_;
}
inline void EquipmentInfo::set_spell_slots(::google::protobuf::uint32 value) {
  set_has_spell_slots();
  spell_slots_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.EquipmentInfo.spell_slots)
}

// -------------------------------------------------------------------

// ItemUsingInfo

// optional uint32 named_ring_god = 1;
inline bool ItemUsingInfo::has_named_ring_god() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemUsingInfo::set_has_named_ring_god() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemUsingInfo::clear_has_named_ring_god() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemUsingInfo::clear_named_ring_god() {
  named_ring_god_ = 0u;
  clear_has_named_ring_god();
}
inline ::google::protobuf::uint32 ItemUsingInfo::named_ring_god() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.named_ring_god)
  return named_ring_god_;
}
inline void ItemUsingInfo::set_named_ring_god(::google::protobuf::uint32 value) {
  set_has_named_ring_god();
  named_ring_god_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.named_ring_god)
}

// optional uint32 using_dried_fingers = 2;
inline bool ItemUsingInfo::has_using_dried_fingers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemUsingInfo::set_has_using_dried_fingers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemUsingInfo::clear_has_using_dried_fingers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemUsingInfo::clear_using_dried_fingers() {
  using_dried_fingers_ = 0u;
  clear_has_using_dried_fingers();
}
inline ::google::protobuf::uint32 ItemUsingInfo::using_dried_fingers() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.using_dried_fingers)
  return using_dried_fingers_;
}
inline void ItemUsingInfo::set_using_dried_fingers(::google::protobuf::uint32 value) {
  set_has_using_dried_fingers();
  using_dried_fingers_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.using_dried_fingers)
}

// optional uint32 unknown_3 = 3;
inline bool ItemUsingInfo::has_unknown_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemUsingInfo::set_has_unknown_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemUsingInfo::clear_has_unknown_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemUsingInfo::clear_unknown_3() {
  unknown_3_ = 0u;
  clear_has_unknown_3();
}
inline ::google::protobuf::uint32 ItemUsingInfo::unknown_3() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.unknown_3)
  return unknown_3_;
}
inline void ItemUsingInfo::set_unknown_3(::google::protobuf::uint32 value) {
  set_has_unknown_3();
  unknown_3_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.unknown_3)
}

// optional uint32 guardians_seal = 4;
inline bool ItemUsingInfo::has_guardians_seal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemUsingInfo::set_has_guardians_seal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemUsingInfo::clear_has_guardians_seal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemUsingInfo::clear_guardians_seal() {
  guardians_seal_ = 0u;
  clear_has_guardians_seal();
}
inline ::google::protobuf::uint32 ItemUsingInfo::guardians_seal() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.guardians_seal)
  return guardians_seal_;
}
inline void ItemUsingInfo::set_guardians_seal(::google::protobuf::uint32 value) {
  set_has_guardians_seal();
  guardians_seal_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.guardians_seal)
}

// optional uint32 bell_keepers_seal = 5;
inline bool ItemUsingInfo::has_bell_keepers_seal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemUsingInfo::set_has_bell_keepers_seal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemUsingInfo::clear_has_bell_keepers_seal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemUsingInfo::clear_bell_keepers_seal() {
  bell_keepers_seal_ = 0u;
  clear_has_bell_keepers_seal();
}
inline ::google::protobuf::uint32 ItemUsingInfo::bell_keepers_seal() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.bell_keepers_seal)
  return bell_keepers_seal_;
}
inline void ItemUsingInfo::set_bell_keepers_seal(::google::protobuf::uint32 value) {
  set_has_bell_keepers_seal();
  bell_keepers_seal_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.bell_keepers_seal)
}

// optional uint32 crest_of_the_rat = 6;
inline bool ItemUsingInfo::has_crest_of_the_rat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemUsingInfo::set_has_crest_of_the_rat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemUsingInfo::clear_has_crest_of_the_rat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemUsingInfo::clear_crest_of_the_rat() {
  crest_of_the_rat_ = 0u;
  clear_has_crest_of_the_rat();
}
inline ::google::protobuf::uint32 ItemUsingInfo::crest_of_the_rat() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.crest_of_the_rat)
  return crest_of_the_rat_;
}
inline void ItemUsingInfo::set_crest_of_the_rat(::google::protobuf::uint32 value) {
  set_has_crest_of_the_rat();
  crest_of_the_rat_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.crest_of_the_rat)
}

// optional uint32 unknown_7 = 7;
inline bool ItemUsingInfo::has_unknown_7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemUsingInfo::set_has_unknown_7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemUsingInfo::clear_has_unknown_7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemUsingInfo::clear_unknown_7() {
  unknown_7_ = 0u;
  clear_has_unknown_7();
}
inline ::google::protobuf::uint32 ItemUsingInfo::unknown_7() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.unknown_7)
  return unknown_7_;
}
inline void ItemUsingInfo::set_unknown_7(::google::protobuf::uint32 value) {
  set_has_unknown_7();
  unknown_7_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.unknown_7)
}

// optional uint32 unknown_8 = 8;
inline bool ItemUsingInfo::has_unknown_8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemUsingInfo::set_has_unknown_8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemUsingInfo::clear_has_unknown_8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemUsingInfo::clear_unknown_8() {
  unknown_8_ = 0u;
  clear_has_unknown_8();
}
inline ::google::protobuf::uint32 ItemUsingInfo::unknown_8() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ItemUsingInfo.unknown_8)
  return unknown_8_;
}
inline void ItemUsingInfo::set_unknown_8(::google::protobuf::uint32 value) {
  set_has_unknown_8();
  unknown_8_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ItemUsingInfo.unknown_8)
}

// -------------------------------------------------------------------

// LevelStatus

// optional uint32 vigor = 1;
inline bool LevelStatus::has_vigor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelStatus::set_has_vigor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelStatus::clear_has_vigor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelStatus::clear_vigor() {
  vigor_ = 0u;
  clear_has_vigor();
}
inline ::google::protobuf::uint32 LevelStatus::vigor() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.vigor)
  return vigor_;
}
inline void LevelStatus::set_vigor(::google::protobuf::uint32 value) {
  set_has_vigor();
  vigor_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.vigor)
}

// optional uint32 endurance = 2;
inline bool LevelStatus::has_endurance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelStatus::set_has_endurance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelStatus::clear_has_endurance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelStatus::clear_endurance() {
  endurance_ = 0u;
  clear_has_endurance();
}
inline ::google::protobuf::uint32 LevelStatus::endurance() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.endurance)
  return endurance_;
}
inline void LevelStatus::set_endurance(::google::protobuf::uint32 value) {
  set_has_endurance();
  endurance_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.endurance)
}

// optional uint32 vitality = 3;
inline bool LevelStatus::has_vitality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelStatus::set_has_vitality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelStatus::clear_has_vitality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelStatus::clear_vitality() {
  vitality_ = 0u;
  clear_has_vitality();
}
inline ::google::protobuf::uint32 LevelStatus::vitality() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.vitality)
  return vitality_;
}
inline void LevelStatus::set_vitality(::google::protobuf::uint32 value) {
  set_has_vitality();
  vitality_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.vitality)
}

// optional uint32 attunement = 4;
inline bool LevelStatus::has_attunement() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelStatus::set_has_attunement() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelStatus::clear_has_attunement() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelStatus::clear_attunement() {
  attunement_ = 0u;
  clear_has_attunement();
}
inline ::google::protobuf::uint32 LevelStatus::attunement() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.attunement)
  return attunement_;
}
inline void LevelStatus::set_attunement(::google::protobuf::uint32 value) {
  set_has_attunement();
  attunement_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.attunement)
}

// optional uint32 strenght = 5;
inline bool LevelStatus::has_strenght() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelStatus::set_has_strenght() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelStatus::clear_has_strenght() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelStatus::clear_strenght() {
  strenght_ = 0u;
  clear_has_strenght();
}
inline ::google::protobuf::uint32 LevelStatus::strenght() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.strenght)
  return strenght_;
}
inline void LevelStatus::set_strenght(::google::protobuf::uint32 value) {
  set_has_strenght();
  strenght_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.strenght)
}

// optional uint32 dexterity = 6;
inline bool LevelStatus::has_dexterity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LevelStatus::set_has_dexterity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LevelStatus::clear_has_dexterity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LevelStatus::clear_dexterity() {
  dexterity_ = 0u;
  clear_has_dexterity();
}
inline ::google::protobuf::uint32 LevelStatus::dexterity() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.dexterity)
  return dexterity_;
}
inline void LevelStatus::set_dexterity(::google::protobuf::uint32 value) {
  set_has_dexterity();
  dexterity_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.dexterity)
}

// optional uint32 intelligence = 7;
inline bool LevelStatus::has_intelligence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LevelStatus::set_has_intelligence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LevelStatus::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LevelStatus::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
inline ::google::protobuf::uint32 LevelStatus::intelligence() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.intelligence)
  return intelligence_;
}
inline void LevelStatus::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.intelligence)
}

// optional uint32 faith = 8;
inline bool LevelStatus::has_faith() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LevelStatus::set_has_faith() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LevelStatus::clear_has_faith() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LevelStatus::clear_faith() {
  faith_ = 0u;
  clear_has_faith();
}
inline ::google::protobuf::uint32 LevelStatus::faith() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.faith)
  return faith_;
}
inline void LevelStatus::set_faith(::google::protobuf::uint32 value) {
  set_has_faith();
  faith_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.faith)
}

// optional uint32 adaptability = 9;
inline bool LevelStatus::has_adaptability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LevelStatus::set_has_adaptability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LevelStatus::clear_has_adaptability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LevelStatus::clear_adaptability() {
  adaptability_ = 0u;
  clear_has_adaptability();
}
inline ::google::protobuf::uint32 LevelStatus::adaptability() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.LevelStatus.adaptability)
  return adaptability_;
}
inline void LevelStatus::set_adaptability(::google::protobuf::uint32 value) {
  set_has_adaptability();
  adaptability_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.LevelStatus.adaptability)
}

// -------------------------------------------------------------------

// PhantomTypeCount

// optional uint32 unknown_1 = 1;
inline bool PhantomTypeCount::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhantomTypeCount::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhantomTypeCount::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhantomTypeCount::clear_unknown_1() {
  unknown_1_ = 0u;
  clear_has_unknown_1();
}
inline ::google::protobuf::uint32 PhantomTypeCount::unknown_1() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhantomTypeCount.unknown_1)
  return unknown_1_;
}
inline void PhantomTypeCount::set_unknown_1(::google::protobuf::uint32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhantomTypeCount.unknown_1)
}

// optional uint32 unknown_2 = 2;
inline bool PhantomTypeCount::has_unknown_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhantomTypeCount::set_has_unknown_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhantomTypeCount::clear_has_unknown_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhantomTypeCount::clear_unknown_2() {
  unknown_2_ = 0u;
  clear_has_unknown_2();
}
inline ::google::protobuf::uint32 PhantomTypeCount::unknown_2() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhantomTypeCount.unknown_2)
  return unknown_2_;
}
inline void PhantomTypeCount::set_unknown_2(::google::protobuf::uint32 value) {
  set_has_unknown_2();
  unknown_2_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhantomTypeCount.unknown_2)
}

// -------------------------------------------------------------------

// PhysicalStatus

// optional uint32 health = 1;
inline bool PhysicalStatus::has_health() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhysicalStatus::set_has_health() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhysicalStatus::clear_has_health() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhysicalStatus::clear_health() {
  health_ = 0u;
  clear_has_health();
}
inline ::google::protobuf::uint32 PhysicalStatus::health() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.health)
  return health_;
}
inline void PhysicalStatus::set_health(::google::protobuf::uint32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.health)
}

// optional uint32 stamina = 2;
inline bool PhysicalStatus::has_stamina() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhysicalStatus::set_has_stamina() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhysicalStatus::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhysicalStatus::clear_stamina() {
  stamina_ = 0u;
  clear_has_stamina();
}
inline ::google::protobuf::uint32 PhysicalStatus::stamina() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.stamina)
  return stamina_;
}
inline void PhysicalStatus::set_stamina(::google::protobuf::uint32 value) {
  set_has_stamina();
  stamina_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.stamina)
}

// optional float equip_load = 3;
inline bool PhysicalStatus::has_equip_load() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhysicalStatus::set_has_equip_load() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhysicalStatus::clear_has_equip_load() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhysicalStatus::clear_equip_load() {
  equip_load_ = 0;
  clear_has_equip_load();
}
inline float PhysicalStatus::equip_load() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.equip_load)
  return equip_load_;
}
inline void PhysicalStatus::set_equip_load(float value) {
  set_has_equip_load();
  equip_load_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.equip_load)
}

// optional uint32 unknown_4 = 4;
inline bool PhysicalStatus::has_unknown_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhysicalStatus::set_has_unknown_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhysicalStatus::clear_has_unknown_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhysicalStatus::clear_unknown_4() {
  unknown_4_ = 0u;
  clear_has_unknown_4();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_4() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_4)
  return unknown_4_;
}
inline void PhysicalStatus::set_unknown_4(::google::protobuf::uint32 value) {
  set_has_unknown_4();
  unknown_4_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_4)
}

// optional uint32 unknown_5 = 5;
inline bool PhysicalStatus::has_unknown_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhysicalStatus::set_has_unknown_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhysicalStatus::clear_has_unknown_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhysicalStatus::clear_unknown_5() {
  unknown_5_ = 0u;
  clear_has_unknown_5();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_5() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_5)
  return unknown_5_;
}
inline void PhysicalStatus::set_unknown_5(::google::protobuf::uint32 value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_5)
}

// optional uint32 attack_strength = 6;
inline bool PhysicalStatus::has_attack_strength() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PhysicalStatus::set_has_attack_strength() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PhysicalStatus::clear_has_attack_strength() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PhysicalStatus::clear_attack_strength() {
  attack_strength_ = 0u;
  clear_has_attack_strength();
}
inline ::google::protobuf::uint32 PhysicalStatus::attack_strength() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.attack_strength)
  return attack_strength_;
}
inline void PhysicalStatus::set_attack_strength(::google::protobuf::uint32 value) {
  set_has_attack_strength();
  attack_strength_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.attack_strength)
}

// optional uint32 attack_dexterity = 7;
inline bool PhysicalStatus::has_attack_dexterity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PhysicalStatus::set_has_attack_dexterity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PhysicalStatus::clear_has_attack_dexterity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PhysicalStatus::clear_attack_dexterity() {
  attack_dexterity_ = 0u;
  clear_has_attack_dexterity();
}
inline ::google::protobuf::uint32 PhysicalStatus::attack_dexterity() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.attack_dexterity)
  return attack_dexterity_;
}
inline void PhysicalStatus::set_attack_dexterity(::google::protobuf::uint32 value) {
  set_has_attack_dexterity();
  attack_dexterity_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.attack_dexterity)
}

// optional uint32 unknown_8 = 8;
inline bool PhysicalStatus::has_unknown_8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PhysicalStatus::set_has_unknown_8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PhysicalStatus::clear_has_unknown_8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PhysicalStatus::clear_unknown_8() {
  unknown_8_ = 0u;
  clear_has_unknown_8();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_8() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_8)
  return unknown_8_;
}
inline void PhysicalStatus::set_unknown_8(::google::protobuf::uint32 value) {
  set_has_unknown_8();
  unknown_8_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_8)
}

// optional uint32 unknown_9 = 9;
inline bool PhysicalStatus::has_unknown_9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PhysicalStatus::set_has_unknown_9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PhysicalStatus::clear_has_unknown_9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PhysicalStatus::clear_unknown_9() {
  unknown_9_ = 0u;
  clear_has_unknown_9();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_9() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_9)
  return unknown_9_;
}
inline void PhysicalStatus::set_unknown_9(::google::protobuf::uint32 value) {
  set_has_unknown_9();
  unknown_9_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_9)
}

// optional uint32 unknown_10 = 10;
inline bool PhysicalStatus::has_unknown_10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PhysicalStatus::set_has_unknown_10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PhysicalStatus::clear_has_unknown_10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PhysicalStatus::clear_unknown_10() {
  unknown_10_ = 0u;
  clear_has_unknown_10();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_10() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_10)
  return unknown_10_;
}
inline void PhysicalStatus::set_unknown_10(::google::protobuf::uint32 value) {
  set_has_unknown_10();
  unknown_10_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_10)
}

// optional uint32 unknown_11 = 11;
inline bool PhysicalStatus::has_unknown_11() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PhysicalStatus::set_has_unknown_11() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PhysicalStatus::clear_has_unknown_11() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PhysicalStatus::clear_unknown_11() {
  unknown_11_ = 0u;
  clear_has_unknown_11();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_11() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_11)
  return unknown_11_;
}
inline void PhysicalStatus::set_unknown_11(::google::protobuf::uint32 value) {
  set_has_unknown_11();
  unknown_11_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_11)
}

// optional uint32 unknown_12 = 12;
inline bool PhysicalStatus::has_unknown_12() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PhysicalStatus::set_has_unknown_12() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PhysicalStatus::clear_has_unknown_12() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PhysicalStatus::clear_unknown_12() {
  unknown_12_ = 0u;
  clear_has_unknown_12();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_12() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_12)
  return unknown_12_;
}
inline void PhysicalStatus::set_unknown_12(::google::protobuf::uint32 value) {
  set_has_unknown_12();
  unknown_12_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_12)
}

// optional uint32 unknown_13 = 13;
inline bool PhysicalStatus::has_unknown_13() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PhysicalStatus::set_has_unknown_13() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PhysicalStatus::clear_has_unknown_13() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PhysicalStatus::clear_unknown_13() {
  unknown_13_ = 0u;
  clear_has_unknown_13();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_13() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_13)
  return unknown_13_;
}
inline void PhysicalStatus::set_unknown_13(::google::protobuf::uint32 value) {
  set_has_unknown_13();
  unknown_13_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_13)
}

// optional uint32 physical_defence = 14;
inline bool PhysicalStatus::has_physical_defence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PhysicalStatus::set_has_physical_defence() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PhysicalStatus::clear_has_physical_defence() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PhysicalStatus::clear_physical_defence() {
  physical_defence_ = 0u;
  clear_has_physical_defence();
}
inline ::google::protobuf::uint32 PhysicalStatus::physical_defence() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.physical_defence)
  return physical_defence_;
}
inline void PhysicalStatus::set_physical_defence(::google::protobuf::uint32 value) {
  set_has_physical_defence();
  physical_defence_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.physical_defence)
}

// optional uint32 unknown_15 = 15;
inline bool PhysicalStatus::has_unknown_15() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PhysicalStatus::set_has_unknown_15() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PhysicalStatus::clear_has_unknown_15() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PhysicalStatus::clear_unknown_15() {
  unknown_15_ = 0u;
  clear_has_unknown_15();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_15() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_15)
  return unknown_15_;
}
inline void PhysicalStatus::set_unknown_15(::google::protobuf::uint32 value) {
  set_has_unknown_15();
  unknown_15_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_15)
}

// optional uint32 unknown_16 = 16;
inline bool PhysicalStatus::has_unknown_16() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PhysicalStatus::set_has_unknown_16() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PhysicalStatus::clear_has_unknown_16() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PhysicalStatus::clear_unknown_16() {
  unknown_16_ = 0u;
  clear_has_unknown_16();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_16() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_16)
  return unknown_16_;
}
inline void PhysicalStatus::set_unknown_16(::google::protobuf::uint32 value) {
  set_has_unknown_16();
  unknown_16_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_16)
}

// optional uint32 unknown_17 = 17;
inline bool PhysicalStatus::has_unknown_17() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PhysicalStatus::set_has_unknown_17() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PhysicalStatus::clear_has_unknown_17() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PhysicalStatus::clear_unknown_17() {
  unknown_17_ = 0u;
  clear_has_unknown_17();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_17() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_17)
  return unknown_17_;
}
inline void PhysicalStatus::set_unknown_17(::google::protobuf::uint32 value) {
  set_has_unknown_17();
  unknown_17_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_17)
}

// optional uint32 unknown_18 = 18;
inline bool PhysicalStatus::has_unknown_18() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PhysicalStatus::set_has_unknown_18() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PhysicalStatus::clear_has_unknown_18() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PhysicalStatus::clear_unknown_18() {
  unknown_18_ = 0u;
  clear_has_unknown_18();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_18() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_18)
  return unknown_18_;
}
inline void PhysicalStatus::set_unknown_18(::google::protobuf::uint32 value) {
  set_has_unknown_18();
  unknown_18_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_18)
}

// optional uint32 unknown_19 = 19;
inline bool PhysicalStatus::has_unknown_19() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PhysicalStatus::set_has_unknown_19() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PhysicalStatus::clear_has_unknown_19() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PhysicalStatus::clear_unknown_19() {
  unknown_19_ = 0u;
  clear_has_unknown_19();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_19() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_19)
  return unknown_19_;
}
inline void PhysicalStatus::set_unknown_19(::google::protobuf::uint32 value) {
  set_has_unknown_19();
  unknown_19_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_19)
}

// optional uint32 unknown_20 = 20;
inline bool PhysicalStatus::has_unknown_20() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PhysicalStatus::set_has_unknown_20() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PhysicalStatus::clear_has_unknown_20() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PhysicalStatus::clear_unknown_20() {
  unknown_20_ = 0u;
  clear_has_unknown_20();
}
inline ::google::protobuf::uint32 PhysicalStatus::unknown_20() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.unknown_20)
  return unknown_20_;
}
inline void PhysicalStatus::set_unknown_20(::google::protobuf::uint32 value) {
  set_has_unknown_20();
  unknown_20_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.unknown_20)
}

// optional uint32 petrify_resist = 21;
inline bool PhysicalStatus::has_petrify_resist() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PhysicalStatus::set_has_petrify_resist() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PhysicalStatus::clear_has_petrify_resist() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PhysicalStatus::clear_petrify_resist() {
  petrify_resist_ = 0u;
  clear_has_petrify_resist();
}
inline ::google::protobuf::uint32 PhysicalStatus::petrify_resist() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.petrify_resist)
  return petrify_resist_;
}
inline void PhysicalStatus::set_petrify_resist(::google::protobuf::uint32 value) {
  set_has_petrify_resist();
  petrify_resist_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.petrify_resist)
}

// optional uint32 curse_resist = 22;
inline bool PhysicalStatus::has_curse_resist() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PhysicalStatus::set_has_curse_resist() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PhysicalStatus::clear_has_curse_resist() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PhysicalStatus::clear_curse_resist() {
  curse_resist_ = 0u;
  clear_has_curse_resist();
}
inline ::google::protobuf::uint32 PhysicalStatus::curse_resist() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.curse_resist)
  return curse_resist_;
}
inline void PhysicalStatus::set_curse_resist(::google::protobuf::uint32 value) {
  set_has_curse_resist();
  curse_resist_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.curse_resist)
}

// optional uint32 agility = 23;
inline bool PhysicalStatus::has_agility() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PhysicalStatus::set_has_agility() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PhysicalStatus::clear_has_agility() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PhysicalStatus::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
inline ::google::protobuf::uint32 PhysicalStatus::agility() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.agility)
  return agility_;
}
inline void PhysicalStatus::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.agility)
}

// optional float poise = 24;
inline bool PhysicalStatus::has_poise() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PhysicalStatus::set_has_poise() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PhysicalStatus::clear_has_poise() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PhysicalStatus::clear_poise() {
  poise_ = 0;
  clear_has_poise();
}
inline float PhysicalStatus::poise() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PhysicalStatus.poise)
  return poise_;
}
inline void PhysicalStatus::set_poise(float value) {
  set_has_poise();
  poise_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PhysicalStatus.poise)
}

// -------------------------------------------------------------------

// PlayerLocation

// optional uint32 online_area_id = 1;
inline bool PlayerLocation::has_online_area_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLocation::set_has_online_area_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLocation::clear_has_online_area_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLocation::clear_online_area_id() {
  online_area_id_ = 0u;
  clear_has_online_area_id();
}
inline ::google::protobuf::uint32 PlayerLocation::online_area_id() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerLocation.online_area_id)
  return online_area_id_;
}
inline void PlayerLocation::set_online_area_id(::google::protobuf::uint32 value) {
  set_has_online_area_id();
  online_area_id_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerLocation.online_area_id)
}

// optional uint32 cell_id = 2;
inline bool PlayerLocation::has_cell_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerLocation::set_has_cell_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerLocation::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerLocation::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
inline ::google::protobuf::uint32 PlayerLocation::cell_id() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerLocation.cell_id)
  return cell_id_;
}
inline void PlayerLocation::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerLocation.cell_id)
}

// optional uint32 online_activity_area_id = 3;
inline bool PlayerLocation::has_online_activity_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerLocation::set_has_online_activity_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerLocation::clear_has_online_activity_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerLocation::clear_online_activity_area_id() {
  online_activity_area_id_ = 0u;
  clear_has_online_activity_area_id();
}
inline ::google::protobuf::uint32 PlayerLocation::online_activity_area_id() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerLocation.online_activity_area_id)
  return online_activity_area_id_;
}
inline void PlayerLocation::set_online_activity_area_id(::google::protobuf::uint32 value) {
  set_has_online_activity_area_id();
  online_activity_area_id_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerLocation.online_activity_area_id)
}

// optional .DS2_Frpg2PlayerData.Vector position = 4;
inline bool PlayerLocation::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerLocation::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerLocation::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerLocation::clear_position() {
  if (position_ != NULL) position_->::DS2_Frpg2PlayerData::Vector::Clear();
  clear_has_position();
}
inline const ::DS2_Frpg2PlayerData::Vector& PlayerLocation::position() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerLocation.position)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return position_ != NULL ? *position_ : *default_instance().position_;
#else
  return position_ != NULL ? *position_ : *default_instance_->position_;
#endif
}
inline ::DS2_Frpg2PlayerData::Vector* PlayerLocation::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::DS2_Frpg2PlayerData::Vector;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.PlayerLocation.position)
  return position_;
}
inline ::DS2_Frpg2PlayerData::Vector* PlayerLocation::release_position() {
  clear_has_position();
  ::DS2_Frpg2PlayerData::Vector* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PlayerLocation::set_allocated_position(::DS2_Frpg2PlayerData::Vector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.PlayerLocation.position)
}

// optional float unknown_5 = 5;
inline bool PlayerLocation::has_unknown_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerLocation::set_has_unknown_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerLocation::clear_has_unknown_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerLocation::clear_unknown_5() {
  unknown_5_ = 0;
  clear_has_unknown_5();
}
inline float PlayerLocation::unknown_5() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerLocation.unknown_5)
  return unknown_5_;
}
inline void PlayerLocation::set_unknown_5(float value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerLocation.unknown_5)
}

// -------------------------------------------------------------------

// PlayerStatus_Phantom_leave_at

// optional uint32 unknown_1 = 1;
inline bool PlayerStatus_Phantom_leave_at::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStatus_Phantom_leave_at::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStatus_Phantom_leave_at::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStatus_Phantom_leave_at::clear_unknown_1() {
  unknown_1_ = 0u;
  clear_has_unknown_1();
}
inline ::google::protobuf::uint32 PlayerStatus_Phantom_leave_at::unknown_1() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at.unknown_1)
  return unknown_1_;
}
inline void PlayerStatus_Phantom_leave_at::set_unknown_1(::google::protobuf::uint32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at.unknown_1)
}

// optional .DS2_Frpg2PlayerData.DateTime datetime = 2;
inline bool PlayerStatus_Phantom_leave_at::has_datetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerStatus_Phantom_leave_at::set_has_datetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerStatus_Phantom_leave_at::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerStatus_Phantom_leave_at::clear_datetime() {
  if (datetime_ != NULL) datetime_->::DS2_Frpg2PlayerData::DateTime::Clear();
  clear_has_datetime();
}
inline const ::DS2_Frpg2PlayerData::DateTime& PlayerStatus_Phantom_leave_at::datetime() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at.datetime)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return datetime_ != NULL ? *datetime_ : *default_instance().datetime_;
#else
  return datetime_ != NULL ? *datetime_ : *default_instance_->datetime_;
#endif
}
inline ::DS2_Frpg2PlayerData::DateTime* PlayerStatus_Phantom_leave_at::mutable_datetime() {
  set_has_datetime();
  if (datetime_ == NULL) datetime_ = new ::DS2_Frpg2PlayerData::DateTime;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at.datetime)
  return datetime_;
}
inline ::DS2_Frpg2PlayerData::DateTime* PlayerStatus_Phantom_leave_at::release_datetime() {
  clear_has_datetime();
  ::DS2_Frpg2PlayerData::DateTime* temp = datetime_;
  datetime_ = NULL;
  return temp;
}
inline void PlayerStatus_Phantom_leave_at::set_allocated_datetime(::DS2_Frpg2PlayerData::DateTime* datetime) {
  delete datetime_;
  datetime_ = datetime;
  if (datetime) {
    set_has_datetime();
  } else {
    clear_has_datetime();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at.datetime)
}

// -------------------------------------------------------------------

// PlayerStatus

// optional string name = 1;
inline bool PlayerStatus::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStatus::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStatus::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStatus::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerStatus::name() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.name)
  return *name_;
}
inline void PlayerStatus::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.name)
}
inline void PlayerStatus::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DS2_Frpg2PlayerData.PlayerStatus.name)
}
inline void PlayerStatus::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DS2_Frpg2PlayerData.PlayerStatus.name)
}
inline ::std::string* PlayerStatus::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.PlayerStatus.name)
  return name_;
}
inline ::std::string* PlayerStatus::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerStatus::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.PlayerStatus.name)
}

// optional uint32 archetype = 2;
inline bool PlayerStatus::has_archetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerStatus::set_has_archetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerStatus::clear_has_archetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerStatus::clear_archetype() {
  archetype_ = 0u;
  clear_has_archetype();
}
inline ::google::protobuf::uint32 PlayerStatus::archetype() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.archetype)
  return archetype_;
}
inline void PlayerStatus::set_archetype(::google::protobuf::uint32 value) {
  set_has_archetype();
  archetype_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.archetype)
}

// optional uint32 covenant = 3;
inline bool PlayerStatus::has_covenant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerStatus::set_has_covenant() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerStatus::clear_has_covenant() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerStatus::clear_covenant() {
  covenant_ = 0u;
  clear_has_covenant();
}
inline ::google::protobuf::uint32 PlayerStatus::covenant() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.covenant)
  return covenant_;
}
inline void PlayerStatus::set_covenant(::google::protobuf::uint32 value) {
  set_has_covenant();
  covenant_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.covenant)
}

// optional uint32 unknown_4 = 4;
inline bool PlayerStatus::has_unknown_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerStatus::set_has_unknown_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerStatus::clear_has_unknown_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerStatus::clear_unknown_4() {
  unknown_4_ = 0u;
  clear_has_unknown_4();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_4() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_4)
  return unknown_4_;
}
inline void PlayerStatus::set_unknown_4(::google::protobuf::uint32 value) {
  set_has_unknown_4();
  unknown_4_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_4)
}

// optional uint32 unknown_5 = 5;
inline bool PlayerStatus::has_unknown_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerStatus::set_has_unknown_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerStatus::clear_has_unknown_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerStatus::clear_unknown_5() {
  unknown_5_ = 0u;
  clear_has_unknown_5();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_5() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_5)
  return unknown_5_;
}
inline void PlayerStatus::set_unknown_5(::google::protobuf::uint32 value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_5)
}

// optional uint32 unknown_6 = 6;
inline bool PlayerStatus::has_unknown_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerStatus::set_has_unknown_6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerStatus::clear_has_unknown_6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerStatus::clear_unknown_6() {
  unknown_6_ = 0u;
  clear_has_unknown_6();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_6() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_6)
  return unknown_6_;
}
inline void PlayerStatus::set_unknown_6(::google::protobuf::uint32 value) {
  set_has_unknown_6();
  unknown_6_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_6)
}

// optional uint32 sitting_at_bonfire = 7;
inline bool PlayerStatus::has_sitting_at_bonfire() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerStatus::set_has_sitting_at_bonfire() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerStatus::clear_has_sitting_at_bonfire() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerStatus::clear_sitting_at_bonfire() {
  sitting_at_bonfire_ = 0u;
  clear_has_sitting_at_bonfire();
}
inline ::google::protobuf::uint32 PlayerStatus::sitting_at_bonfire() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.sitting_at_bonfire)
  return sitting_at_bonfire_;
}
inline void PlayerStatus::set_sitting_at_bonfire(::google::protobuf::uint32 value) {
  set_has_sitting_at_bonfire();
  sitting_at_bonfire_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.sitting_at_bonfire)
}

// optional .DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at phantom_leave_at = 8;
inline bool PlayerStatus::has_phantom_leave_at() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerStatus::set_has_phantom_leave_at() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerStatus::clear_has_phantom_leave_at() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerStatus::clear_phantom_leave_at() {
  if (phantom_leave_at_ != NULL) phantom_leave_at_->::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at::Clear();
  clear_has_phantom_leave_at();
}
inline const ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at& PlayerStatus::phantom_leave_at() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.phantom_leave_at)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return phantom_leave_at_ != NULL ? *phantom_leave_at_ : *default_instance().phantom_leave_at_;
#else
  return phantom_leave_at_ != NULL ? *phantom_leave_at_ : *default_instance_->phantom_leave_at_;
#endif
}
inline ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* PlayerStatus::mutable_phantom_leave_at() {
  set_has_phantom_leave_at();
  if (phantom_leave_at_ == NULL) phantom_leave_at_ = new ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.PlayerStatus.phantom_leave_at)
  return phantom_leave_at_;
}
inline ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* PlayerStatus::release_phantom_leave_at() {
  clear_has_phantom_leave_at();
  ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* temp = phantom_leave_at_;
  phantom_leave_at_ = NULL;
  return temp;
}
inline void PlayerStatus::set_allocated_phantom_leave_at(::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at* phantom_leave_at) {
  delete phantom_leave_at_;
  phantom_leave_at_ = phantom_leave_at;
  if (phantom_leave_at) {
    set_has_phantom_leave_at();
  } else {
    clear_has_phantom_leave_at();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.PlayerStatus.phantom_leave_at)
}

// optional uint32 disable_cross_region_play = 9;
inline bool PlayerStatus::has_disable_cross_region_play() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerStatus::set_has_disable_cross_region_play() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerStatus::clear_has_disable_cross_region_play() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerStatus::clear_disable_cross_region_play() {
  disable_cross_region_play_ = 0u;
  clear_has_disable_cross_region_play();
}
inline ::google::protobuf::uint32 PlayerStatus::disable_cross_region_play() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.disable_cross_region_play)
  return disable_cross_region_play_;
}
inline void PlayerStatus::set_disable_cross_region_play(::google::protobuf::uint32 value) {
  set_has_disable_cross_region_play();
  disable_cross_region_play_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.disable_cross_region_play)
}

// optional uint32 character_id = 10;
inline bool PlayerStatus::has_character_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerStatus::set_has_character_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerStatus::clear_has_character_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerStatus::clear_character_id() {
  character_id_ = 0u;
  clear_has_character_id();
}
inline ::google::protobuf::uint32 PlayerStatus::character_id() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.character_id)
  return character_id_;
}
inline void PlayerStatus::set_character_id(::google::protobuf::uint32 value) {
  set_has_character_id();
  character_id_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.character_id)
}

// optional uint32 human_effigy_burnt = 11;
inline bool PlayerStatus::has_human_effigy_burnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerStatus::set_has_human_effigy_burnt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerStatus::clear_has_human_effigy_burnt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerStatus::clear_human_effigy_burnt() {
  human_effigy_burnt_ = 0u;
  clear_has_human_effigy_burnt();
}
inline ::google::protobuf::uint32 PlayerStatus::human_effigy_burnt() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.human_effigy_burnt)
  return human_effigy_burnt_;
}
inline void PlayerStatus::set_human_effigy_burnt(::google::protobuf::uint32 value) {
  set_has_human_effigy_burnt();
  human_effigy_burnt_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.human_effigy_burnt)
}

// repeated uint32 played_areas = 12;
inline int PlayerStatus::played_areas_size() const {
  return played_areas_.size();
}
inline void PlayerStatus::clear_played_areas() {
  played_areas_.Clear();
}
inline ::google::protobuf::uint32 PlayerStatus::played_areas(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.played_areas)
  return played_areas_.Get(index);
}
inline void PlayerStatus::set_played_areas(int index, ::google::protobuf::uint32 value) {
  played_areas_.Set(index, value);
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.played_areas)
}
inline void PlayerStatus::add_played_areas(::google::protobuf::uint32 value) {
  played_areas_.Add(value);
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.PlayerStatus.played_areas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerStatus::played_areas() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.PlayerStatus.played_areas)
  return played_areas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerStatus::mutable_played_areas() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.PlayerStatus.played_areas)
  return &played_areas_;
}

// optional uint32 unknown_13 = 13;
inline bool PlayerStatus::has_unknown_13() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerStatus::set_has_unknown_13() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerStatus::clear_has_unknown_13() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerStatus::clear_unknown_13() {
  unknown_13_ = 0u;
  clear_has_unknown_13();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_13() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_13)
  return unknown_13_;
}
inline void PlayerStatus::set_unknown_13(::google::protobuf::uint32 value) {
  set_has_unknown_13();
  unknown_13_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_13)
}

// optional uint32 unknown_14 = 14;
inline bool PlayerStatus::has_unknown_14() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerStatus::set_has_unknown_14() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerStatus::clear_has_unknown_14() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerStatus::clear_unknown_14() {
  unknown_14_ = 0u;
  clear_has_unknown_14();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_14() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_14)
  return unknown_14_;
}
inline void PlayerStatus::set_unknown_14(::google::protobuf::uint32 value) {
  set_has_unknown_14();
  unknown_14_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_14)
}

// optional uint32 soul_level = 15;
inline bool PlayerStatus::has_soul_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerStatus::set_has_soul_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerStatus::clear_has_soul_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerStatus::clear_soul_level() {
  soul_level_ = 0u;
  clear_has_soul_level();
}
inline ::google::protobuf::uint32 PlayerStatus::soul_level() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.soul_level)
  return soul_level_;
}
inline void PlayerStatus::set_soul_level(::google::protobuf::uint32 value) {
  set_has_soul_level();
  soul_level_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.soul_level)
}

// optional uint32 unknown_16 = 16;
inline bool PlayerStatus::has_unknown_16() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerStatus::set_has_unknown_16() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerStatus::clear_has_unknown_16() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerStatus::clear_unknown_16() {
  unknown_16_ = 0u;
  clear_has_unknown_16();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_16() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_16)
  return unknown_16_;
}
inline void PlayerStatus::set_unknown_16(::google::protobuf::uint32 value) {
  set_has_unknown_16();
  unknown_16_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_16)
}

// optional uint32 unknown_17 = 17;
inline bool PlayerStatus::has_unknown_17() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerStatus::set_has_unknown_17() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerStatus::clear_has_unknown_17() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerStatus::clear_unknown_17() {
  unknown_17_ = 0u;
  clear_has_unknown_17();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_17() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_17)
  return unknown_17_;
}
inline void PlayerStatus::set_unknown_17(::google::protobuf::uint32 value) {
  set_has_unknown_17();
  unknown_17_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_17)
}

// optional uint32 play_time_seconds = 18;
inline bool PlayerStatus::has_play_time_seconds() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerStatus::set_has_play_time_seconds() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerStatus::clear_has_play_time_seconds() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerStatus::clear_play_time_seconds() {
  play_time_seconds_ = 0u;
  clear_has_play_time_seconds();
}
inline ::google::protobuf::uint32 PlayerStatus::play_time_seconds() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.play_time_seconds)
  return play_time_seconds_;
}
inline void PlayerStatus::set_play_time_seconds(::google::protobuf::uint32 value) {
  set_has_play_time_seconds();
  play_time_seconds_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.play_time_seconds)
}

// optional uint32 soul_memory = 19;
inline bool PlayerStatus::has_soul_memory() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerStatus::set_has_soul_memory() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerStatus::clear_has_soul_memory() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerStatus::clear_soul_memory() {
  soul_memory_ = 0u;
  clear_has_soul_memory();
}
inline ::google::protobuf::uint32 PlayerStatus::soul_memory() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.soul_memory)
  return soul_memory_;
}
inline void PlayerStatus::set_soul_memory(::google::protobuf::uint32 value) {
  set_has_soul_memory();
  soul_memory_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.soul_memory)
}

// optional uint32 unknown_20 = 20;
inline bool PlayerStatus::has_unknown_20() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerStatus::set_has_unknown_20() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerStatus::clear_has_unknown_20() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerStatus::clear_unknown_20() {
  unknown_20_ = 0u;
  clear_has_unknown_20();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown_20() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_20)
  return unknown_20_;
}
inline void PlayerStatus::set_unknown_20(::google::protobuf::uint32 value) {
  set_has_unknown_20();
  unknown_20_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_20)
}

// optional string unknown_21 = 21;
inline bool PlayerStatus::has_unknown_21() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerStatus::set_has_unknown_21() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerStatus::clear_has_unknown_21() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerStatus::clear_unknown_21() {
  if (unknown_21_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_21_->clear();
  }
  clear_has_unknown_21();
}
inline const ::std::string& PlayerStatus::unknown_21() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.PlayerStatus.unknown_21)
  return *unknown_21_;
}
inline void PlayerStatus::set_unknown_21(const ::std::string& value) {
  set_has_unknown_21();
  if (unknown_21_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_21_ = new ::std::string;
  }
  unknown_21_->assign(value);
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.PlayerStatus.unknown_21)
}
inline void PlayerStatus::set_unknown_21(const char* value) {
  set_has_unknown_21();
  if (unknown_21_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_21_ = new ::std::string;
  }
  unknown_21_->assign(value);
  // @@protoc_insertion_point(field_set_char:DS2_Frpg2PlayerData.PlayerStatus.unknown_21)
}
inline void PlayerStatus::set_unknown_21(const char* value, size_t size) {
  set_has_unknown_21();
  if (unknown_21_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_21_ = new ::std::string;
  }
  unknown_21_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DS2_Frpg2PlayerData.PlayerStatus.unknown_21)
}
inline ::std::string* PlayerStatus::mutable_unknown_21() {
  set_has_unknown_21();
  if (unknown_21_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_21_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.PlayerStatus.unknown_21)
  return unknown_21_;
}
inline ::std::string* PlayerStatus::release_unknown_21() {
  clear_has_unknown_21();
  if (unknown_21_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unknown_21_;
    unknown_21_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerStatus::set_allocated_unknown_21(::std::string* unknown_21) {
  if (unknown_21_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unknown_21_;
  }
  if (unknown_21) {
    set_has_unknown_21();
    unknown_21_ = unknown_21;
  } else {
    clear_has_unknown_21();
    unknown_21_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.PlayerStatus.unknown_21)
}

// -------------------------------------------------------------------

// ServerSideStatus

// optional uint32 unknown_1 = 1;
inline bool ServerSideStatus::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerSideStatus::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerSideStatus::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerSideStatus::clear_unknown_1() {
  unknown_1_ = 0u;
  clear_has_unknown_1();
}
inline ::google::protobuf::uint32 ServerSideStatus::unknown_1() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.ServerSideStatus.unknown_1)
  return unknown_1_;
}
inline void ServerSideStatus::set_unknown_1(::google::protobuf::uint32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.ServerSideStatus.unknown_1)
}

// -------------------------------------------------------------------

// StatsInfo_Bonfire_levels

// optional uint32 bonfire_id = 1;
inline bool StatsInfo_Bonfire_levels::has_bonfire_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatsInfo_Bonfire_levels::set_has_bonfire_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatsInfo_Bonfire_levels::clear_has_bonfire_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatsInfo_Bonfire_levels::clear_bonfire_id() {
  bonfire_id_ = 0u;
  clear_has_bonfire_id();
}
inline ::google::protobuf::uint32 StatsInfo_Bonfire_levels::bonfire_id() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels.bonfire_id)
  return bonfire_id_;
}
inline void StatsInfo_Bonfire_levels::set_bonfire_id(::google::protobuf::uint32 value) {
  set_has_bonfire_id();
  bonfire_id_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels.bonfire_id)
}

// optional uint32 bonfire_level = 2;
inline bool StatsInfo_Bonfire_levels::has_bonfire_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatsInfo_Bonfire_levels::set_has_bonfire_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatsInfo_Bonfire_levels::clear_has_bonfire_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatsInfo_Bonfire_levels::clear_bonfire_level() {
  bonfire_level_ = 0u;
  clear_has_bonfire_level();
}
inline ::google::protobuf::uint32 StatsInfo_Bonfire_levels::bonfire_level() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels.bonfire_level)
  return bonfire_level_;
}
inline void StatsInfo_Bonfire_levels::set_bonfire_level(::google::protobuf::uint32 value) {
  set_has_bonfire_level();
  bonfire_level_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels.bonfire_level)
}

// -------------------------------------------------------------------

// StatsInfo

// optional uint32 unknown_1 = 1;
inline bool StatsInfo::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatsInfo::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatsInfo::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatsInfo::clear_unknown_1() {
  unknown_1_ = 0u;
  clear_has_unknown_1();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_1() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_1)
  return unknown_1_;
}
inline void StatsInfo::set_unknown_1(::google::protobuf::uint32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_1)
}

// optional uint32 unknown_2 = 2;
inline bool StatsInfo::has_unknown_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatsInfo::set_has_unknown_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatsInfo::clear_has_unknown_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatsInfo::clear_unknown_2() {
  unknown_2_ = 0u;
  clear_has_unknown_2();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_2() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_2)
  return unknown_2_;
}
inline void StatsInfo::set_unknown_2(::google::protobuf::uint32 value) {
  set_has_unknown_2();
  unknown_2_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_2)
}

// optional uint32 sinner_points = 3;
inline bool StatsInfo::has_sinner_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatsInfo::set_has_sinner_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatsInfo::clear_has_sinner_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatsInfo::clear_sinner_points() {
  sinner_points_ = 0u;
  clear_has_sinner_points();
}
inline ::google::protobuf::uint32 StatsInfo::sinner_points() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.sinner_points)
  return sinner_points_;
}
inline void StatsInfo::set_sinner_points(::google::protobuf::uint32 value) {
  set_has_sinner_points();
  sinner_points_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.sinner_points)
}

// repeated .DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels bonfire_levels = 4;
inline int StatsInfo::bonfire_levels_size() const {
  return bonfire_levels_.size();
}
inline void StatsInfo::clear_bonfire_levels() {
  bonfire_levels_.Clear();
}
inline const ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels& StatsInfo::bonfire_levels(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.bonfire_levels)
  return bonfire_levels_.Get(index);
}
inline ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels* StatsInfo::mutable_bonfire_levels(int index) {
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.StatsInfo.bonfire_levels)
  return bonfire_levels_.Mutable(index);
}
inline ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels* StatsInfo::add_bonfire_levels() {
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.bonfire_levels)
  return bonfire_levels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels >&
StatsInfo::bonfire_levels() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.bonfire_levels)
  return bonfire_levels_;
}
inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::StatsInfo_Bonfire_levels >*
StatsInfo::mutable_bonfire_levels() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.bonfire_levels)
  return &bonfire_levels_;
}

// optional uint32 unknown_5 = 5;
inline bool StatsInfo::has_unknown_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatsInfo::set_has_unknown_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatsInfo::clear_has_unknown_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatsInfo::clear_unknown_5() {
  unknown_5_ = 0u;
  clear_has_unknown_5();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_5() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_5)
  return unknown_5_;
}
inline void StatsInfo::set_unknown_5(::google::protobuf::uint32 value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_5)
}

// repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_6 = 6;
inline int StatsInfo::phantom_type_count_6_size() const {
  return phantom_type_count_6_.size();
}
inline void StatsInfo::clear_phantom_type_count_6() {
  phantom_type_count_6_.Clear();
}
inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& StatsInfo::phantom_type_count_6(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_6)
  return phantom_type_count_6_.Get(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::mutable_phantom_type_count_6(int index) {
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_6)
  return phantom_type_count_6_.Mutable(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::add_phantom_type_count_6() {
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_6)
  return phantom_type_count_6_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
StatsInfo::phantom_type_count_6() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_6)
  return phantom_type_count_6_;
}
inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
StatsInfo::mutable_phantom_type_count_6() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_6)
  return &phantom_type_count_6_;
}

// repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_7 = 7;
inline int StatsInfo::phantom_type_count_7_size() const {
  return phantom_type_count_7_.size();
}
inline void StatsInfo::clear_phantom_type_count_7() {
  phantom_type_count_7_.Clear();
}
inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& StatsInfo::phantom_type_count_7(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_7)
  return phantom_type_count_7_.Get(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::mutable_phantom_type_count_7(int index) {
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_7)
  return phantom_type_count_7_.Mutable(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::add_phantom_type_count_7() {
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_7)
  return phantom_type_count_7_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
StatsInfo::phantom_type_count_7() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_7)
  return phantom_type_count_7_;
}
inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
StatsInfo::mutable_phantom_type_count_7() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_7)
  return &phantom_type_count_7_;
}

// repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_8 = 8;
inline int StatsInfo::phantom_type_count_8_size() const {
  return phantom_type_count_8_.size();
}
inline void StatsInfo::clear_phantom_type_count_8() {
  phantom_type_count_8_.Clear();
}
inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& StatsInfo::phantom_type_count_8(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_8)
  return phantom_type_count_8_.Get(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::mutable_phantom_type_count_8(int index) {
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_8)
  return phantom_type_count_8_.Mutable(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::add_phantom_type_count_8() {
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_8)
  return phantom_type_count_8_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
StatsInfo::phantom_type_count_8() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_8)
  return phantom_type_count_8_;
}
inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
StatsInfo::mutable_phantom_type_count_8() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_8)
  return &phantom_type_count_8_;
}

// repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_9 = 9;
inline int StatsInfo::phantom_type_count_9_size() const {
  return phantom_type_count_9_.size();
}
inline void StatsInfo::clear_phantom_type_count_9() {
  phantom_type_count_9_.Clear();
}
inline const ::DS2_Frpg2PlayerData::PhantomTypeCount& StatsInfo::phantom_type_count_9(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_9)
  return phantom_type_count_9_.Get(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::mutable_phantom_type_count_9(int index) {
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_9)
  return phantom_type_count_9_.Mutable(index);
}
inline ::DS2_Frpg2PlayerData::PhantomTypeCount* StatsInfo::add_phantom_type_count_9() {
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_9)
  return phantom_type_count_9_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >&
StatsInfo::phantom_type_count_9() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_9)
  return phantom_type_count_9_;
}
inline ::google::protobuf::RepeatedPtrField< ::DS2_Frpg2PlayerData::PhantomTypeCount >*
StatsInfo::mutable_phantom_type_count_9() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.phantom_type_count_9)
  return &phantom_type_count_9_;
}

// optional uint32 unknown_10 = 10;
inline bool StatsInfo::has_unknown_10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StatsInfo::set_has_unknown_10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StatsInfo::clear_has_unknown_10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StatsInfo::clear_unknown_10() {
  unknown_10_ = 0u;
  clear_has_unknown_10();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_10() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_10)
  return unknown_10_;
}
inline void StatsInfo::set_unknown_10(::google::protobuf::uint32 value) {
  set_has_unknown_10();
  unknown_10_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_10)
}

// repeated uint32 unknown_11 = 11;
inline int StatsInfo::unknown_11_size() const {
  return unknown_11_.size();
}
inline void StatsInfo::clear_unknown_11() {
  unknown_11_.Clear();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_11(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_11)
  return unknown_11_.Get(index);
}
inline void StatsInfo::set_unknown_11(int index, ::google::protobuf::uint32 value) {
  unknown_11_.Set(index, value);
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_11)
}
inline void StatsInfo::add_unknown_11(::google::protobuf::uint32 value) {
  unknown_11_.Add(value);
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.unknown_11)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StatsInfo::unknown_11() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.unknown_11)
  return unknown_11_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StatsInfo::mutable_unknown_11() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.unknown_11)
  return &unknown_11_;
}

// optional uint32 unknown_12 = 12;
inline bool StatsInfo::has_unknown_12() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StatsInfo::set_has_unknown_12() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StatsInfo::clear_has_unknown_12() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StatsInfo::clear_unknown_12() {
  unknown_12_ = 0u;
  clear_has_unknown_12();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_12() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_12)
  return unknown_12_;
}
inline void StatsInfo::set_unknown_12(::google::protobuf::uint32 value) {
  set_has_unknown_12();
  unknown_12_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_12)
}

// optional uint32 unknown_13 = 13;
inline bool StatsInfo::has_unknown_13() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StatsInfo::set_has_unknown_13() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StatsInfo::clear_has_unknown_13() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StatsInfo::clear_unknown_13() {
  unknown_13_ = 0u;
  clear_has_unknown_13();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_13() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_13)
  return unknown_13_;
}
inline void StatsInfo::set_unknown_13(::google::protobuf::uint32 value) {
  set_has_unknown_13();
  unknown_13_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_13)
}

// optional uint32 unknown_14 = 14;
inline bool StatsInfo::has_unknown_14() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StatsInfo::set_has_unknown_14() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StatsInfo::clear_has_unknown_14() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StatsInfo::clear_unknown_14() {
  unknown_14_ = 0u;
  clear_has_unknown_14();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_14() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_14)
  return unknown_14_;
}
inline void StatsInfo::set_unknown_14(::google::protobuf::uint32 value) {
  set_has_unknown_14();
  unknown_14_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_14)
}

// optional uint32 unknown_15 = 15;
inline bool StatsInfo::has_unknown_15() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StatsInfo::set_has_unknown_15() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StatsInfo::clear_has_unknown_15() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StatsInfo::clear_unknown_15() {
  unknown_15_ = 0u;
  clear_has_unknown_15();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_15() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_15)
  return unknown_15_;
}
inline void StatsInfo::set_unknown_15(::google::protobuf::uint32 value) {
  set_has_unknown_15();
  unknown_15_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_15)
}

// optional uint32 unknown_16 = 16;
inline bool StatsInfo::has_unknown_16() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StatsInfo::set_has_unknown_16() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StatsInfo::clear_has_unknown_16() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StatsInfo::clear_unknown_16() {
  unknown_16_ = 0u;
  clear_has_unknown_16();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_16() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_16)
  return unknown_16_;
}
inline void StatsInfo::set_unknown_16(::google::protobuf::uint32 value) {
  set_has_unknown_16();
  unknown_16_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_16)
}

// optional .DS2_Frpg2PlayerData.DateTime datetime = 17;
inline bool StatsInfo::has_datetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StatsInfo::set_has_datetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StatsInfo::clear_has_datetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StatsInfo::clear_datetime() {
  if (datetime_ != NULL) datetime_->::DS2_Frpg2PlayerData::DateTime::Clear();
  clear_has_datetime();
}
inline const ::DS2_Frpg2PlayerData::DateTime& StatsInfo::datetime() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.datetime)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return datetime_ != NULL ? *datetime_ : *default_instance().datetime_;
#else
  return datetime_ != NULL ? *datetime_ : *default_instance_->datetime_;
#endif
}
inline ::DS2_Frpg2PlayerData::DateTime* StatsInfo::mutable_datetime() {
  set_has_datetime();
  if (datetime_ == NULL) datetime_ = new ::DS2_Frpg2PlayerData::DateTime;
  // @@protoc_insertion_point(field_mutable:DS2_Frpg2PlayerData.StatsInfo.datetime)
  return datetime_;
}
inline ::DS2_Frpg2PlayerData::DateTime* StatsInfo::release_datetime() {
  clear_has_datetime();
  ::DS2_Frpg2PlayerData::DateTime* temp = datetime_;
  datetime_ = NULL;
  return temp;
}
inline void StatsInfo::set_allocated_datetime(::DS2_Frpg2PlayerData::DateTime* datetime) {
  delete datetime_;
  datetime_ = datetime;
  if (datetime) {
    set_has_datetime();
  } else {
    clear_has_datetime();
  }
  // @@protoc_insertion_point(field_set_allocated:DS2_Frpg2PlayerData.StatsInfo.datetime)
}

// optional uint32 unknown_18 = 18;
inline bool StatsInfo::has_unknown_18() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StatsInfo::set_has_unknown_18() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StatsInfo::clear_has_unknown_18() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StatsInfo::clear_unknown_18() {
  unknown_18_ = 0u;
  clear_has_unknown_18();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_18() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_18)
  return unknown_18_;
}
inline void StatsInfo::set_unknown_18(::google::protobuf::uint32 value) {
  set_has_unknown_18();
  unknown_18_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_18)
}

// repeated uint32 unlocked_bonfires = 19;
inline int StatsInfo::unlocked_bonfires_size() const {
  return unlocked_bonfires_.size();
}
inline void StatsInfo::clear_unlocked_bonfires() {
  unlocked_bonfires_.Clear();
}
inline ::google::protobuf::uint32 StatsInfo::unlocked_bonfires(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unlocked_bonfires)
  return unlocked_bonfires_.Get(index);
}
inline void StatsInfo::set_unlocked_bonfires(int index, ::google::protobuf::uint32 value) {
  unlocked_bonfires_.Set(index, value);
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unlocked_bonfires)
}
inline void StatsInfo::add_unlocked_bonfires(::google::protobuf::uint32 value) {
  unlocked_bonfires_.Add(value);
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.unlocked_bonfires)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StatsInfo::unlocked_bonfires() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.unlocked_bonfires)
  return unlocked_bonfires_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StatsInfo::mutable_unlocked_bonfires() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.unlocked_bonfires)
  return &unlocked_bonfires_;
}

// optional uint32 unknown_20 = 20;
inline bool StatsInfo::has_unknown_20() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StatsInfo::set_has_unknown_20() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StatsInfo::clear_has_unknown_20() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StatsInfo::clear_unknown_20() {
  unknown_20_ = 0u;
  clear_has_unknown_20();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_20() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_20)
  return unknown_20_;
}
inline void StatsInfo::set_unknown_20(::google::protobuf::uint32 value) {
  set_has_unknown_20();
  unknown_20_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_20)
}

// repeated uint32 unknown_21 = 21;
inline int StatsInfo::unknown_21_size() const {
  return unknown_21_.size();
}
inline void StatsInfo::clear_unknown_21() {
  unknown_21_.Clear();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_21(int index) const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.StatsInfo.unknown_21)
  return unknown_21_.Get(index);
}
inline void StatsInfo::set_unknown_21(int index, ::google::protobuf::uint32 value) {
  unknown_21_.Set(index, value);
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.StatsInfo.unknown_21)
}
inline void StatsInfo::add_unknown_21(::google::protobuf::uint32 value) {
  unknown_21_.Add(value);
  // @@protoc_insertion_point(field_add:DS2_Frpg2PlayerData.StatsInfo.unknown_21)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StatsInfo::unknown_21() const {
  // @@protoc_insertion_point(field_list:DS2_Frpg2PlayerData.StatsInfo.unknown_21)
  return unknown_21_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StatsInfo::mutable_unknown_21() {
  // @@protoc_insertion_point(field_mutable_list:DS2_Frpg2PlayerData.StatsInfo.unknown_21)
  return &unknown_21_;
}

// -------------------------------------------------------------------

// Vector

// required float x = 1;
inline bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector::x() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.Vector.x)
  return x_;
}
inline void Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.Vector.x)
}

// required float y = 2;
inline bool Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector::y() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.Vector.y)
  return y_;
}
inline void Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.Vector.y)
}

// required float z = 3;
inline bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector::z() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.Vector.z)
  return z_;
}
inline void Vector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.Vector.z)
}

// -------------------------------------------------------------------

// WeaponStatus

// optional uint32 left_ar_1 = 1;
inline bool WeaponStatus::has_left_ar_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeaponStatus::set_has_left_ar_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeaponStatus::clear_has_left_ar_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeaponStatus::clear_left_ar_1() {
  left_ar_1_ = 0u;
  clear_has_left_ar_1();
}
inline ::google::protobuf::uint32 WeaponStatus::left_ar_1() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.WeaponStatus.left_ar_1)
  return left_ar_1_;
}
inline void WeaponStatus::set_left_ar_1(::google::protobuf::uint32 value) {
  set_has_left_ar_1();
  left_ar_1_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.WeaponStatus.left_ar_1)
}

// optional uint32 left_ar_2 = 2;
inline bool WeaponStatus::has_left_ar_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeaponStatus::set_has_left_ar_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeaponStatus::clear_has_left_ar_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeaponStatus::clear_left_ar_2() {
  left_ar_2_ = 0u;
  clear_has_left_ar_2();
}
inline ::google::protobuf::uint32 WeaponStatus::left_ar_2() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.WeaponStatus.left_ar_2)
  return left_ar_2_;
}
inline void WeaponStatus::set_left_ar_2(::google::protobuf::uint32 value) {
  set_has_left_ar_2();
  left_ar_2_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.WeaponStatus.left_ar_2)
}

// optional uint32 left_ar_3 = 3;
inline bool WeaponStatus::has_left_ar_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeaponStatus::set_has_left_ar_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeaponStatus::clear_has_left_ar_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeaponStatus::clear_left_ar_3() {
  left_ar_3_ = 0u;
  clear_has_left_ar_3();
}
inline ::google::protobuf::uint32 WeaponStatus::left_ar_3() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.WeaponStatus.left_ar_3)
  return left_ar_3_;
}
inline void WeaponStatus::set_left_ar_3(::google::protobuf::uint32 value) {
  set_has_left_ar_3();
  left_ar_3_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.WeaponStatus.left_ar_3)
}

// optional uint32 right_ar_1 = 4;
inline bool WeaponStatus::has_right_ar_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeaponStatus::set_has_right_ar_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeaponStatus::clear_has_right_ar_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeaponStatus::clear_right_ar_1() {
  right_ar_1_ = 0u;
  clear_has_right_ar_1();
}
inline ::google::protobuf::uint32 WeaponStatus::right_ar_1() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.WeaponStatus.right_ar_1)
  return right_ar_1_;
}
inline void WeaponStatus::set_right_ar_1(::google::protobuf::uint32 value) {
  set_has_right_ar_1();
  right_ar_1_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.WeaponStatus.right_ar_1)
}

// optional uint32 right_ar_2 = 5;
inline bool WeaponStatus::has_right_ar_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeaponStatus::set_has_right_ar_2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeaponStatus::clear_has_right_ar_2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeaponStatus::clear_right_ar_2() {
  right_ar_2_ = 0u;
  clear_has_right_ar_2();
}
inline ::google::protobuf::uint32 WeaponStatus::right_ar_2() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.WeaponStatus.right_ar_2)
  return right_ar_2_;
}
inline void WeaponStatus::set_right_ar_2(::google::protobuf::uint32 value) {
  set_has_right_ar_2();
  right_ar_2_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.WeaponStatus.right_ar_2)
}

// optional uint32 right_ar_3 = 6;
inline bool WeaponStatus::has_right_ar_3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeaponStatus::set_has_right_ar_3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeaponStatus::clear_has_right_ar_3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeaponStatus::clear_right_ar_3() {
  right_ar_3_ = 0u;
  clear_has_right_ar_3();
}
inline ::google::protobuf::uint32 WeaponStatus::right_ar_3() const {
  // @@protoc_insertion_point(field_get:DS2_Frpg2PlayerData.WeaponStatus.right_ar_3)
  return right_ar_3_;
}
inline void WeaponStatus::set_right_ar_3(::google::protobuf::uint32 value) {
  set_has_right_ar_3();
  right_ar_3_ = value;
  // @@protoc_insertion_point(field_set:DS2_Frpg2PlayerData.WeaponStatus.right_ar_3)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DS2_Frpg2PlayerData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DS2_5fFrpg2PlayerData_2eproto__INCLUDED
