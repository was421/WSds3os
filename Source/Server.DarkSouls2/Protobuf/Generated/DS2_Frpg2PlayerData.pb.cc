// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS2_Frpg2PlayerData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DS2_Frpg2PlayerData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace DS2_Frpg2PlayerData {

void protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto() {
  delete AllStatus::default_instance_;
  delete ArmorStatus::default_instance_;
  delete DateTime::default_instance_;
  delete EquipmentInfo::default_instance_;
  delete ItemUsingInfo::default_instance_;
  delete LevelStatus::default_instance_;
  delete PhantomTypeCount::default_instance_;
  delete PhysicalStatus::default_instance_;
  delete PlayerLocation::default_instance_;
  delete PlayerStatus_Phantom_leave_at::default_instance_;
  delete PlayerStatus::default_instance_;
  delete ServerSideStatus::default_instance_;
  delete StatsInfo_Bonfire_levels::default_instance_;
  delete StatsInfo::default_instance_;
  delete Vector::default_instance_;
  delete WeaponStatus::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AllStatus::default_instance_ = new AllStatus();
  ArmorStatus::default_instance_ = new ArmorStatus();
  DateTime::default_instance_ = new DateTime();
  EquipmentInfo::default_instance_ = new EquipmentInfo();
  ItemUsingInfo::default_instance_ = new ItemUsingInfo();
  LevelStatus::default_instance_ = new LevelStatus();
  PhantomTypeCount::default_instance_ = new PhantomTypeCount();
  PhysicalStatus::default_instance_ = new PhysicalStatus();
  PlayerLocation::default_instance_ = new PlayerLocation();
  PlayerStatus_Phantom_leave_at::default_instance_ = new PlayerStatus_Phantom_leave_at();
  PlayerStatus::default_instance_ = new PlayerStatus();
  ServerSideStatus::default_instance_ = new ServerSideStatus();
  StatsInfo_Bonfire_levels::default_instance_ = new StatsInfo_Bonfire_levels();
  StatsInfo::default_instance_ = new StatsInfo();
  Vector::default_instance_ = new Vector();
  WeaponStatus::default_instance_ = new WeaponStatus();
  AllStatus::default_instance_->InitAsDefaultInstance();
  ArmorStatus::default_instance_->InitAsDefaultInstance();
  DateTime::default_instance_->InitAsDefaultInstance();
  EquipmentInfo::default_instance_->InitAsDefaultInstance();
  ItemUsingInfo::default_instance_->InitAsDefaultInstance();
  LevelStatus::default_instance_->InitAsDefaultInstance();
  PhantomTypeCount::default_instance_->InitAsDefaultInstance();
  PhysicalStatus::default_instance_->InitAsDefaultInstance();
  PlayerLocation::default_instance_->InitAsDefaultInstance();
  PlayerStatus_Phantom_leave_at::default_instance_->InitAsDefaultInstance();
  PlayerStatus::default_instance_->InitAsDefaultInstance();
  ServerSideStatus::default_instance_->InitAsDefaultInstance();
  StatsInfo_Bonfire_levels::default_instance_->InitAsDefaultInstance();
  StatsInfo::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  WeaponStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DS2_5fFrpg2PlayerData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_once_);
void protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_once_,
                 &protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DS2_5fFrpg2PlayerData_2eproto {
  StaticDescriptorInitializer_DS2_5fFrpg2PlayerData_2eproto() {
    protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  }
} static_descriptor_initializer_DS2_5fFrpg2PlayerData_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AllStatus::kPlayerLocationFieldNumber;
const int AllStatus::kPlayerStatusFieldNumber;
const int AllStatus::kItemUsingInfoFieldNumber;
const int AllStatus::kStatsInfoFieldNumber;
const int AllStatus::kAttributesFieldNumber;
const int AllStatus::kPhysicalStatusFieldNumber;
const int AllStatus::kWeaponStatusFieldNumber;
const int AllStatus::kArmorStatusFieldNumber;
const int AllStatus::kServerSideStatusFieldNumber;
const int AllStatus::kEquipmentInfoFieldNumber;
#endif  // !_MSC_VER

AllStatus::AllStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.AllStatus)
}

void AllStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_location_ = const_cast< ::DS2_Frpg2PlayerData::PlayerLocation*>(
      ::DS2_Frpg2PlayerData::PlayerLocation::internal_default_instance());
#else
  player_location_ = const_cast< ::DS2_Frpg2PlayerData::PlayerLocation*>(&::DS2_Frpg2PlayerData::PlayerLocation::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_status_ = const_cast< ::DS2_Frpg2PlayerData::PlayerStatus*>(
      ::DS2_Frpg2PlayerData::PlayerStatus::internal_default_instance());
#else
  player_status_ = const_cast< ::DS2_Frpg2PlayerData::PlayerStatus*>(&::DS2_Frpg2PlayerData::PlayerStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_using_info_ = const_cast< ::DS2_Frpg2PlayerData::ItemUsingInfo*>(
      ::DS2_Frpg2PlayerData::ItemUsingInfo::internal_default_instance());
#else
  item_using_info_ = const_cast< ::DS2_Frpg2PlayerData::ItemUsingInfo*>(&::DS2_Frpg2PlayerData::ItemUsingInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_info_ = const_cast< ::DS2_Frpg2PlayerData::StatsInfo*>(
      ::DS2_Frpg2PlayerData::StatsInfo::internal_default_instance());
#else
  stats_info_ = const_cast< ::DS2_Frpg2PlayerData::StatsInfo*>(&::DS2_Frpg2PlayerData::StatsInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attributes_ = const_cast< ::DS2_Frpg2PlayerData::LevelStatus*>(
      ::DS2_Frpg2PlayerData::LevelStatus::internal_default_instance());
#else
  attributes_ = const_cast< ::DS2_Frpg2PlayerData::LevelStatus*>(&::DS2_Frpg2PlayerData::LevelStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  physical_status_ = const_cast< ::DS2_Frpg2PlayerData::PhysicalStatus*>(
      ::DS2_Frpg2PlayerData::PhysicalStatus::internal_default_instance());
#else
  physical_status_ = const_cast< ::DS2_Frpg2PlayerData::PhysicalStatus*>(&::DS2_Frpg2PlayerData::PhysicalStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weapon_status_ = const_cast< ::DS2_Frpg2PlayerData::WeaponStatus*>(
      ::DS2_Frpg2PlayerData::WeaponStatus::internal_default_instance());
#else
  weapon_status_ = const_cast< ::DS2_Frpg2PlayerData::WeaponStatus*>(&::DS2_Frpg2PlayerData::WeaponStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  armor_status_ = const_cast< ::DS2_Frpg2PlayerData::ArmorStatus*>(
      ::DS2_Frpg2PlayerData::ArmorStatus::internal_default_instance());
#else
  armor_status_ = const_cast< ::DS2_Frpg2PlayerData::ArmorStatus*>(&::DS2_Frpg2PlayerData::ArmorStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  server_side_status_ = const_cast< ::DS2_Frpg2PlayerData::ServerSideStatus*>(
      ::DS2_Frpg2PlayerData::ServerSideStatus::internal_default_instance());
#else
  server_side_status_ = const_cast< ::DS2_Frpg2PlayerData::ServerSideStatus*>(&::DS2_Frpg2PlayerData::ServerSideStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipment_info_ = const_cast< ::DS2_Frpg2PlayerData::EquipmentInfo*>(
      ::DS2_Frpg2PlayerData::EquipmentInfo::internal_default_instance());
#else
  equipment_info_ = const_cast< ::DS2_Frpg2PlayerData::EquipmentInfo*>(&::DS2_Frpg2PlayerData::EquipmentInfo::default_instance());
#endif
}

AllStatus::AllStatus(const AllStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.AllStatus)
}

void AllStatus::SharedCtor() {
  _cached_size_ = 0;
  player_location_ = NULL;
  player_status_ = NULL;
  item_using_info_ = NULL;
  stats_info_ = NULL;
  attributes_ = NULL;
  physical_status_ = NULL;
  weapon_status_ = NULL;
  armor_status_ = NULL;
  server_side_status_ = NULL;
  equipment_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllStatus::~AllStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.AllStatus)
  SharedDtor();
}

void AllStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_location_;
    delete player_status_;
    delete item_using_info_;
    delete stats_info_;
    delete attributes_;
    delete physical_status_;
    delete weapon_status_;
    delete armor_status_;
    delete server_side_status_;
    delete equipment_info_;
  }
}

void AllStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AllStatus& AllStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

AllStatus* AllStatus::default_instance_ = NULL;

AllStatus* AllStatus::New() const {
  return new AllStatus;
}

void AllStatus::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_player_location()) {
      if (player_location_ != NULL) player_location_->::DS2_Frpg2PlayerData::PlayerLocation::Clear();
    }
    if (has_player_status()) {
      if (player_status_ != NULL) player_status_->::DS2_Frpg2PlayerData::PlayerStatus::Clear();
    }
    if (has_item_using_info()) {
      if (item_using_info_ != NULL) item_using_info_->::DS2_Frpg2PlayerData::ItemUsingInfo::Clear();
    }
    if (has_stats_info()) {
      if (stats_info_ != NULL) stats_info_->::DS2_Frpg2PlayerData::StatsInfo::Clear();
    }
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::DS2_Frpg2PlayerData::LevelStatus::Clear();
    }
    if (has_physical_status()) {
      if (physical_status_ != NULL) physical_status_->::DS2_Frpg2PlayerData::PhysicalStatus::Clear();
    }
    if (has_weapon_status()) {
      if (weapon_status_ != NULL) weapon_status_->::DS2_Frpg2PlayerData::WeaponStatus::Clear();
    }
    if (has_armor_status()) {
      if (armor_status_ != NULL) armor_status_->::DS2_Frpg2PlayerData::ArmorStatus::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_server_side_status()) {
      if (server_side_status_ != NULL) server_side_status_->::DS2_Frpg2PlayerData::ServerSideStatus::Clear();
    }
    if (has_equipment_info()) {
      if (equipment_info_ != NULL) equipment_info_->::DS2_Frpg2PlayerData::EquipmentInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AllStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.AllStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DS2_Frpg2PlayerData.PlayerLocation player_location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_status;
        break;
      }

      // optional .DS2_Frpg2PlayerData.PlayerStatus player_status = 2;
      case 2: {
        if (tag == 18) {
         parse_player_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_using_info;
        break;
      }

      // optional .DS2_Frpg2PlayerData.ItemUsingInfo item_using_info = 3;
      case 3: {
        if (tag == 26) {
         parse_item_using_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_using_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stats_info;
        break;
      }

      // optional .DS2_Frpg2PlayerData.StatsInfo stats_info = 4;
      case 4: {
        if (tag == 34) {
         parse_stats_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attributes;
        break;
      }

      // optional .DS2_Frpg2PlayerData.LevelStatus attributes = 5;
      case 5: {
        if (tag == 42) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_physical_status;
        break;
      }

      // optional .DS2_Frpg2PlayerData.PhysicalStatus physical_status = 6;
      case 6: {
        if (tag == 50) {
         parse_physical_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physical_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_weapon_status;
        break;
      }

      // optional .DS2_Frpg2PlayerData.WeaponStatus weapon_status = 7;
      case 7: {
        if (tag == 58) {
         parse_weapon_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_armor_status;
        break;
      }

      // optional .DS2_Frpg2PlayerData.ArmorStatus armor_status = 8;
      case 8: {
        if (tag == 66) {
         parse_armor_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_server_side_status;
        break;
      }

      // optional .DS2_Frpg2PlayerData.ServerSideStatus server_side_status = 9;
      case 9: {
        if (tag == 74) {
         parse_server_side_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_side_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_equipment_info;
        break;
      }

      // optional .DS2_Frpg2PlayerData.EquipmentInfo equipment_info = 10;
      case 10: {
        if (tag == 82) {
         parse_equipment_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.AllStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.AllStatus)
  return false;
#undef DO_
}

void AllStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.AllStatus)
  // optional .DS2_Frpg2PlayerData.PlayerLocation player_location = 1;
  if (has_player_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->player_location(), output);
  }

  // optional .DS2_Frpg2PlayerData.PlayerStatus player_status = 2;
  if (has_player_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->player_status(), output);
  }

  // optional .DS2_Frpg2PlayerData.ItemUsingInfo item_using_info = 3;
  if (has_item_using_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->item_using_info(), output);
  }

  // optional .DS2_Frpg2PlayerData.StatsInfo stats_info = 4;
  if (has_stats_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->stats_info(), output);
  }

  // optional .DS2_Frpg2PlayerData.LevelStatus attributes = 5;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attributes(), output);
  }

  // optional .DS2_Frpg2PlayerData.PhysicalStatus physical_status = 6;
  if (has_physical_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->physical_status(), output);
  }

  // optional .DS2_Frpg2PlayerData.WeaponStatus weapon_status = 7;
  if (has_weapon_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->weapon_status(), output);
  }

  // optional .DS2_Frpg2PlayerData.ArmorStatus armor_status = 8;
  if (has_armor_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->armor_status(), output);
  }

  // optional .DS2_Frpg2PlayerData.ServerSideStatus server_side_status = 9;
  if (has_server_side_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->server_side_status(), output);
  }

  // optional .DS2_Frpg2PlayerData.EquipmentInfo equipment_info = 10;
  if (has_equipment_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->equipment_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.AllStatus)
}

int AllStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DS2_Frpg2PlayerData.PlayerLocation player_location = 1;
    if (has_player_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_location());
    }

    // optional .DS2_Frpg2PlayerData.PlayerStatus player_status = 2;
    if (has_player_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_status());
    }

    // optional .DS2_Frpg2PlayerData.ItemUsingInfo item_using_info = 3;
    if (has_item_using_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_using_info());
    }

    // optional .DS2_Frpg2PlayerData.StatsInfo stats_info = 4;
    if (has_stats_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_info());
    }

    // optional .DS2_Frpg2PlayerData.LevelStatus attributes = 5;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

    // optional .DS2_Frpg2PlayerData.PhysicalStatus physical_status = 6;
    if (has_physical_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physical_status());
    }

    // optional .DS2_Frpg2PlayerData.WeaponStatus weapon_status = 7;
    if (has_weapon_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_status());
    }

    // optional .DS2_Frpg2PlayerData.ArmorStatus armor_status = 8;
    if (has_armor_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DS2_Frpg2PlayerData.ServerSideStatus server_side_status = 9;
    if (has_server_side_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_side_status());
    }

    // optional .DS2_Frpg2PlayerData.EquipmentInfo equipment_info = 10;
    if (has_equipment_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllStatus*>(&from));
}

void AllStatus::MergeFrom(const AllStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_location()) {
      mutable_player_location()->::DS2_Frpg2PlayerData::PlayerLocation::MergeFrom(from.player_location());
    }
    if (from.has_player_status()) {
      mutable_player_status()->::DS2_Frpg2PlayerData::PlayerStatus::MergeFrom(from.player_status());
    }
    if (from.has_item_using_info()) {
      mutable_item_using_info()->::DS2_Frpg2PlayerData::ItemUsingInfo::MergeFrom(from.item_using_info());
    }
    if (from.has_stats_info()) {
      mutable_stats_info()->::DS2_Frpg2PlayerData::StatsInfo::MergeFrom(from.stats_info());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::DS2_Frpg2PlayerData::LevelStatus::MergeFrom(from.attributes());
    }
    if (from.has_physical_status()) {
      mutable_physical_status()->::DS2_Frpg2PlayerData::PhysicalStatus::MergeFrom(from.physical_status());
    }
    if (from.has_weapon_status()) {
      mutable_weapon_status()->::DS2_Frpg2PlayerData::WeaponStatus::MergeFrom(from.weapon_status());
    }
    if (from.has_armor_status()) {
      mutable_armor_status()->::DS2_Frpg2PlayerData::ArmorStatus::MergeFrom(from.armor_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_side_status()) {
      mutable_server_side_status()->::DS2_Frpg2PlayerData::ServerSideStatus::MergeFrom(from.server_side_status());
    }
    if (from.has_equipment_info()) {
      mutable_equipment_info()->::DS2_Frpg2PlayerData::EquipmentInfo::MergeFrom(from.equipment_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AllStatus::CopyFrom(const AllStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllStatus::IsInitialized() const {

  if (has_player_location()) {
    if (!this->player_location().IsInitialized()) return false;
  }
  if (has_player_status()) {
    if (!this->player_status().IsInitialized()) return false;
  }
  if (has_stats_info()) {
    if (!this->stats_info().IsInitialized()) return false;
  }
  return true;
}

void AllStatus::Swap(AllStatus* other) {
  if (other != this) {
    std::swap(player_location_, other->player_location_);
    std::swap(player_status_, other->player_status_);
    std::swap(item_using_info_, other->item_using_info_);
    std::swap(stats_info_, other->stats_info_);
    std::swap(attributes_, other->attributes_);
    std::swap(physical_status_, other->physical_status_);
    std::swap(weapon_status_, other->weapon_status_);
    std::swap(armor_status_, other->armor_status_);
    std::swap(server_side_status_, other->server_side_status_);
    std::swap(equipment_info_, other->equipment_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AllStatus::GetTypeName() const {
  return "DS2_Frpg2PlayerData.AllStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int ArmorStatus::kStrikeDefFieldNumber;
const int ArmorStatus::kSlashDefFieldNumber;
const int ArmorStatus::kThrustDefFieldNumber;
const int ArmorStatus::kPoiseFieldNumber;
#endif  // !_MSC_VER

ArmorStatus::ArmorStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.ArmorStatus)
}

void ArmorStatus::InitAsDefaultInstance() {
}

ArmorStatus::ArmorStatus(const ArmorStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.ArmorStatus)
}

void ArmorStatus::SharedCtor() {
  _cached_size_ = 0;
  strike_def_ = 0u;
  slash_def_ = 0u;
  thrust_def_ = 0u;
  poise_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmorStatus::~ArmorStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.ArmorStatus)
  SharedDtor();
}

void ArmorStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArmorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArmorStatus& ArmorStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

ArmorStatus* ArmorStatus::default_instance_ = NULL;

ArmorStatus* ArmorStatus::New() const {
  return new ArmorStatus;
}

void ArmorStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArmorStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(strike_def_, poise_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArmorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.ArmorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 strike_def = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strike_def_)));
          set_has_strike_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slash_def;
        break;
      }

      // optional uint32 slash_def = 2;
      case 2: {
        if (tag == 16) {
         parse_slash_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slash_def_)));
          set_has_slash_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_thrust_def;
        break;
      }

      // optional uint32 thrust_def = 3;
      case 3: {
        if (tag == 24) {
         parse_thrust_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thrust_def_)));
          set_has_thrust_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_poise;
        break;
      }

      // optional float poise = 4;
      case 4: {
        if (tag == 37) {
         parse_poise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &poise_)));
          set_has_poise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.ArmorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.ArmorStatus)
  return false;
#undef DO_
}

void ArmorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.ArmorStatus)
  // optional uint32 strike_def = 1;
  if (has_strike_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strike_def(), output);
  }

  // optional uint32 slash_def = 2;
  if (has_slash_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slash_def(), output);
  }

  // optional uint32 thrust_def = 3;
  if (has_thrust_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thrust_def(), output);
  }

  // optional float poise = 4;
  if (has_poise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->poise(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.ArmorStatus)
}

int ArmorStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 strike_def = 1;
    if (has_strike_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strike_def());
    }

    // optional uint32 slash_def = 2;
    if (has_slash_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slash_def());
    }

    // optional uint32 thrust_def = 3;
    if (has_thrust_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thrust_def());
    }

    // optional float poise = 4;
    if (has_poise()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmorStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArmorStatus*>(&from));
}

void ArmorStatus::MergeFrom(const ArmorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strike_def()) {
      set_strike_def(from.strike_def());
    }
    if (from.has_slash_def()) {
      set_slash_def(from.slash_def());
    }
    if (from.has_thrust_def()) {
      set_thrust_def(from.thrust_def());
    }
    if (from.has_poise()) {
      set_poise(from.poise());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArmorStatus::CopyFrom(const ArmorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorStatus::IsInitialized() const {

  return true;
}

void ArmorStatus::Swap(ArmorStatus* other) {
  if (other != this) {
    std::swap(strike_def_, other->strike_def_);
    std::swap(slash_def_, other->slash_def_);
    std::swap(thrust_def_, other->thrust_def_);
    std::swap(poise_, other->poise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArmorStatus::GetTypeName() const {
  return "DS2_Frpg2PlayerData.ArmorStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int DateTime::kYearFieldNumber;
const int DateTime::kMonthFieldNumber;
const int DateTime::kDayFieldNumber;
const int DateTime::kHoursFieldNumber;
const int DateTime::kMinutesFieldNumber;
const int DateTime::kSecondsFieldNumber;
const int DateTime::kTzdiffFieldNumber;
#endif  // !_MSC_VER

DateTime::DateTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.DateTime)
}

void DateTime::InitAsDefaultInstance() {
}

DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.DateTime)
}

void DateTime::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  hours_ = 0u;
  minutes_ = 0u;
  seconds_ = 0u;
  tzdiff_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.DateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DateTime& DateTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

DateTime* DateTime::default_instance_ = NULL;

DateTime* DateTime::New() const {
  return new DateTime;
}

void DateTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DateTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(year_, tzdiff_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.DateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // required uint32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // required uint32 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hours;
        break;
      }

      // required uint32 hours = 4;
      case 4: {
        if (tag == 32) {
         parse_hours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hours_)));
          set_has_hours();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minutes;
        break;
      }

      // required uint32 minutes = 5;
      case 5: {
        if (tag == 40) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minutes_)));
          set_has_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_seconds;
        break;
      }

      // required uint32 seconds = 6;
      case 6: {
        if (tag == 48) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tzdiff;
        break;
      }

      // required uint32 tzdiff = 7;
      case 7: {
        if (tag == 56) {
         parse_tzdiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tzdiff_)));
          set_has_tzdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.DateTime)
  return false;
#undef DO_
}

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.DateTime)
  // required uint32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // required uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // required uint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // required uint32 hours = 4;
  if (has_hours()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hours(), output);
  }

  // required uint32 minutes = 5;
  if (has_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minutes(), output);
  }

  // required uint32 seconds = 6;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seconds(), output);
  }

  // required uint32 tzdiff = 7;
  if (has_tzdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tzdiff(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.DateTime)
}

int DateTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // required uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // required uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 hours = 4;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hours());
    }

    // required uint32 minutes = 5;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minutes());
    }

    // required uint32 seconds = 6;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // required uint32 tzdiff = 7;
    if (has_tzdiff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tzdiff());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DateTime*>(&from));
}

void DateTime::MergeFrom(const DateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hours()) {
      set_hours(from.hours());
    }
    if (from.has_minutes()) {
      set_minutes(from.minutes());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_tzdiff()) {
      set_tzdiff(from.tzdiff());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DateTime::CopyFrom(const DateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hours_, other->hours_);
    std::swap(minutes_, other->minutes_);
    std::swap(seconds_, other->seconds_);
    std::swap(tzdiff_, other->tzdiff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DateTime::GetTypeName() const {
  return "DS2_Frpg2PlayerData.DateTime";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentInfo::kWeaponSlotsFieldNumber;
const int EquipmentInfo::kArmorSlotsFieldNumber;
const int EquipmentInfo::kRingSlotsFieldNumber;
const int EquipmentInfo::kAmmunitionSlotsFieldNumber;
const int EquipmentInfo::kBeltSlotsFieldNumber;
const int EquipmentInfo::kSpellSlotsFieldNumber;
#endif  // !_MSC_VER

EquipmentInfo::EquipmentInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.EquipmentInfo)
}

void EquipmentInfo::InitAsDefaultInstance() {
}

EquipmentInfo::EquipmentInfo(const EquipmentInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.EquipmentInfo)
}

void EquipmentInfo::SharedCtor() {
  _cached_size_ = 0;
  weapon_slots_ = 0u;
  armor_slots_ = 0u;
  ring_slots_ = 0u;
  ammunition_slots_ = 0u;
  belt_slots_ = 0u;
  spell_slots_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentInfo::~EquipmentInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.EquipmentInfo)
  SharedDtor();
}

void EquipmentInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentInfo& EquipmentInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

EquipmentInfo* EquipmentInfo::default_instance_ = NULL;

EquipmentInfo* EquipmentInfo::New() const {
  return new EquipmentInfo;
}

void EquipmentInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(weapon_slots_, spell_slots_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.EquipmentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 weapon_slots = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_slots_)));
          set_has_weapon_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_armor_slots;
        break;
      }

      // optional uint32 armor_slots = 2;
      case 2: {
        if (tag == 16) {
         parse_armor_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_slots_)));
          set_has_armor_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ring_slots;
        break;
      }

      // optional uint32 ring_slots = 3;
      case 3: {
        if (tag == 24) {
         parse_ring_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_slots_)));
          set_has_ring_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ammunition_slots;
        break;
      }

      // optional uint32 ammunition_slots = 4;
      case 4: {
        if (tag == 32) {
         parse_ammunition_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammunition_slots_)));
          set_has_ammunition_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_belt_slots;
        break;
      }

      // optional uint32 belt_slots = 5;
      case 5: {
        if (tag == 40) {
         parse_belt_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &belt_slots_)));
          set_has_belt_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_spell_slots;
        break;
      }

      // optional uint32 spell_slots = 6;
      case 6: {
        if (tag == 48) {
         parse_spell_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spell_slots_)));
          set_has_spell_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.EquipmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.EquipmentInfo)
  return false;
#undef DO_
}

void EquipmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.EquipmentInfo)
  // optional uint32 weapon_slots = 1;
  if (has_weapon_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weapon_slots(), output);
  }

  // optional uint32 armor_slots = 2;
  if (has_armor_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->armor_slots(), output);
  }

  // optional uint32 ring_slots = 3;
  if (has_ring_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ring_slots(), output);
  }

  // optional uint32 ammunition_slots = 4;
  if (has_ammunition_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ammunition_slots(), output);
  }

  // optional uint32 belt_slots = 5;
  if (has_belt_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->belt_slots(), output);
  }

  // optional uint32 spell_slots = 6;
  if (has_spell_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->spell_slots(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.EquipmentInfo)
}

int EquipmentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 weapon_slots = 1;
    if (has_weapon_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_slots());
    }

    // optional uint32 armor_slots = 2;
    if (has_armor_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_slots());
    }

    // optional uint32 ring_slots = 3;
    if (has_ring_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ring_slots());
    }

    // optional uint32 ammunition_slots = 4;
    if (has_ammunition_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammunition_slots());
    }

    // optional uint32 belt_slots = 5;
    if (has_belt_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->belt_slots());
    }

    // optional uint32 spell_slots = 6;
    if (has_spell_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spell_slots());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentInfo*>(&from));
}

void EquipmentInfo::MergeFrom(const EquipmentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weapon_slots()) {
      set_weapon_slots(from.weapon_slots());
    }
    if (from.has_armor_slots()) {
      set_armor_slots(from.armor_slots());
    }
    if (from.has_ring_slots()) {
      set_ring_slots(from.ring_slots());
    }
    if (from.has_ammunition_slots()) {
      set_ammunition_slots(from.ammunition_slots());
    }
    if (from.has_belt_slots()) {
      set_belt_slots(from.belt_slots());
    }
    if (from.has_spell_slots()) {
      set_spell_slots(from.spell_slots());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentInfo::CopyFrom(const EquipmentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentInfo::IsInitialized() const {

  return true;
}

void EquipmentInfo::Swap(EquipmentInfo* other) {
  if (other != this) {
    std::swap(weapon_slots_, other->weapon_slots_);
    std::swap(armor_slots_, other->armor_slots_);
    std::swap(ring_slots_, other->ring_slots_);
    std::swap(ammunition_slots_, other->ammunition_slots_);
    std::swap(belt_slots_, other->belt_slots_);
    std::swap(spell_slots_, other->spell_slots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentInfo::GetTypeName() const {
  return "DS2_Frpg2PlayerData.EquipmentInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemUsingInfo::kNamedRingGodFieldNumber;
const int ItemUsingInfo::kUsingDriedFingersFieldNumber;
const int ItemUsingInfo::kUnknown3FieldNumber;
const int ItemUsingInfo::kGuardiansSealFieldNumber;
const int ItemUsingInfo::kBellKeepersSealFieldNumber;
const int ItemUsingInfo::kCrestOfTheRatFieldNumber;
const int ItemUsingInfo::kUnknown7FieldNumber;
const int ItemUsingInfo::kUnknown8FieldNumber;
#endif  // !_MSC_VER

ItemUsingInfo::ItemUsingInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.ItemUsingInfo)
}

void ItemUsingInfo::InitAsDefaultInstance() {
}

ItemUsingInfo::ItemUsingInfo(const ItemUsingInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.ItemUsingInfo)
}

void ItemUsingInfo::SharedCtor() {
  _cached_size_ = 0;
  named_ring_god_ = 0u;
  using_dried_fingers_ = 0u;
  unknown_3_ = 0u;
  guardians_seal_ = 0u;
  bell_keepers_seal_ = 0u;
  crest_of_the_rat_ = 0u;
  unknown_7_ = 0u;
  unknown_8_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemUsingInfo::~ItemUsingInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.ItemUsingInfo)
  SharedDtor();
}

void ItemUsingInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemUsingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemUsingInfo& ItemUsingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

ItemUsingInfo* ItemUsingInfo::default_instance_ = NULL;

ItemUsingInfo* ItemUsingInfo::New() const {
  return new ItemUsingInfo;
}

void ItemUsingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemUsingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(named_ring_god_, unknown_8_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemUsingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.ItemUsingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 named_ring_god = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &named_ring_god_)));
          set_has_named_ring_god();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_using_dried_fingers;
        break;
      }

      // optional uint32 using_dried_fingers = 2;
      case 2: {
        if (tag == 16) {
         parse_using_dried_fingers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &using_dried_fingers_)));
          set_has_using_dried_fingers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_3;
        break;
      }

      // optional uint32 unknown_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_3_)));
          set_has_unknown_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guardians_seal;
        break;
      }

      // optional uint32 guardians_seal = 4;
      case 4: {
        if (tag == 32) {
         parse_guardians_seal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guardians_seal_)));
          set_has_guardians_seal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bell_keepers_seal;
        break;
      }

      // optional uint32 bell_keepers_seal = 5;
      case 5: {
        if (tag == 40) {
         parse_bell_keepers_seal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bell_keepers_seal_)));
          set_has_bell_keepers_seal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_crest_of_the_rat;
        break;
      }

      // optional uint32 crest_of_the_rat = 6;
      case 6: {
        if (tag == 48) {
         parse_crest_of_the_rat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crest_of_the_rat_)));
          set_has_crest_of_the_rat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unknown_7;
        break;
      }

      // optional uint32 unknown_7 = 7;
      case 7: {
        if (tag == 56) {
         parse_unknown_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_7_)));
          set_has_unknown_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_unknown_8;
        break;
      }

      // optional uint32 unknown_8 = 8;
      case 8: {
        if (tag == 64) {
         parse_unknown_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_8_)));
          set_has_unknown_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.ItemUsingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.ItemUsingInfo)
  return false;
#undef DO_
}

void ItemUsingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.ItemUsingInfo)
  // optional uint32 named_ring_god = 1;
  if (has_named_ring_god()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->named_ring_god(), output);
  }

  // optional uint32 using_dried_fingers = 2;
  if (has_using_dried_fingers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->using_dried_fingers(), output);
  }

  // optional uint32 unknown_3 = 3;
  if (has_unknown_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unknown_3(), output);
  }

  // optional uint32 guardians_seal = 4;
  if (has_guardians_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guardians_seal(), output);
  }

  // optional uint32 bell_keepers_seal = 5;
  if (has_bell_keepers_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bell_keepers_seal(), output);
  }

  // optional uint32 crest_of_the_rat = 6;
  if (has_crest_of_the_rat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->crest_of_the_rat(), output);
  }

  // optional uint32 unknown_7 = 7;
  if (has_unknown_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unknown_7(), output);
  }

  // optional uint32 unknown_8 = 8;
  if (has_unknown_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->unknown_8(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.ItemUsingInfo)
}

int ItemUsingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 named_ring_god = 1;
    if (has_named_ring_god()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->named_ring_god());
    }

    // optional uint32 using_dried_fingers = 2;
    if (has_using_dried_fingers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->using_dried_fingers());
    }

    // optional uint32 unknown_3 = 3;
    if (has_unknown_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_3());
    }

    // optional uint32 guardians_seal = 4;
    if (has_guardians_seal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guardians_seal());
    }

    // optional uint32 bell_keepers_seal = 5;
    if (has_bell_keepers_seal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bell_keepers_seal());
    }

    // optional uint32 crest_of_the_rat = 6;
    if (has_crest_of_the_rat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crest_of_the_rat());
    }

    // optional uint32 unknown_7 = 7;
    if (has_unknown_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_7());
    }

    // optional uint32 unknown_8 = 8;
    if (has_unknown_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_8());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemUsingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemUsingInfo*>(&from));
}

void ItemUsingInfo::MergeFrom(const ItemUsingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_named_ring_god()) {
      set_named_ring_god(from.named_ring_god());
    }
    if (from.has_using_dried_fingers()) {
      set_using_dried_fingers(from.using_dried_fingers());
    }
    if (from.has_unknown_3()) {
      set_unknown_3(from.unknown_3());
    }
    if (from.has_guardians_seal()) {
      set_guardians_seal(from.guardians_seal());
    }
    if (from.has_bell_keepers_seal()) {
      set_bell_keepers_seal(from.bell_keepers_seal());
    }
    if (from.has_crest_of_the_rat()) {
      set_crest_of_the_rat(from.crest_of_the_rat());
    }
    if (from.has_unknown_7()) {
      set_unknown_7(from.unknown_7());
    }
    if (from.has_unknown_8()) {
      set_unknown_8(from.unknown_8());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemUsingInfo::CopyFrom(const ItemUsingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUsingInfo::IsInitialized() const {

  return true;
}

void ItemUsingInfo::Swap(ItemUsingInfo* other) {
  if (other != this) {
    std::swap(named_ring_god_, other->named_ring_god_);
    std::swap(using_dried_fingers_, other->using_dried_fingers_);
    std::swap(unknown_3_, other->unknown_3_);
    std::swap(guardians_seal_, other->guardians_seal_);
    std::swap(bell_keepers_seal_, other->bell_keepers_seal_);
    std::swap(crest_of_the_rat_, other->crest_of_the_rat_);
    std::swap(unknown_7_, other->unknown_7_);
    std::swap(unknown_8_, other->unknown_8_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemUsingInfo::GetTypeName() const {
  return "DS2_Frpg2PlayerData.ItemUsingInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int LevelStatus::kVigorFieldNumber;
const int LevelStatus::kEnduranceFieldNumber;
const int LevelStatus::kVitalityFieldNumber;
const int LevelStatus::kAttunementFieldNumber;
const int LevelStatus::kStrenghtFieldNumber;
const int LevelStatus::kDexterityFieldNumber;
const int LevelStatus::kIntelligenceFieldNumber;
const int LevelStatus::kFaithFieldNumber;
const int LevelStatus::kAdaptabilityFieldNumber;
#endif  // !_MSC_VER

LevelStatus::LevelStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.LevelStatus)
}

void LevelStatus::InitAsDefaultInstance() {
}

LevelStatus::LevelStatus(const LevelStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.LevelStatus)
}

void LevelStatus::SharedCtor() {
  _cached_size_ = 0;
  vigor_ = 0u;
  endurance_ = 0u;
  vitality_ = 0u;
  attunement_ = 0u;
  strenght_ = 0u;
  dexterity_ = 0u;
  intelligence_ = 0u;
  faith_ = 0u;
  adaptability_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelStatus::~LevelStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.LevelStatus)
  SharedDtor();
}

void LevelStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LevelStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelStatus& LevelStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

LevelStatus* LevelStatus::default_instance_ = NULL;

LevelStatus* LevelStatus::New() const {
  return new LevelStatus;
}

void LevelStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LevelStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(vigor_, faith_);
  }
  adaptability_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LevelStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.LevelStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vigor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vigor_)));
          set_has_vigor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endurance;
        break;
      }

      // optional uint32 endurance = 2;
      case 2: {
        if (tag == 16) {
         parse_endurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endurance_)));
          set_has_endurance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vitality;
        break;
      }

      // optional uint32 vitality = 3;
      case 3: {
        if (tag == 24) {
         parse_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vitality_)));
          set_has_vitality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attunement;
        break;
      }

      // optional uint32 attunement = 4;
      case 4: {
        if (tag == 32) {
         parse_attunement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attunement_)));
          set_has_attunement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_strenght;
        break;
      }

      // optional uint32 strenght = 5;
      case 5: {
        if (tag == 40) {
         parse_strenght:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strenght_)));
          set_has_strenght();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dexterity;
        break;
      }

      // optional uint32 dexterity = 6;
      case 6: {
        if (tag == 48) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_intelligence;
        break;
      }

      // optional uint32 intelligence = 7;
      case 7: {
        if (tag == 56) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_faith;
        break;
      }

      // optional uint32 faith = 8;
      case 8: {
        if (tag == 64) {
         parse_faith:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faith_)));
          set_has_faith();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_adaptability;
        break;
      }

      // optional uint32 adaptability = 9;
      case 9: {
        if (tag == 72) {
         parse_adaptability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adaptability_)));
          set_has_adaptability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.LevelStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.LevelStatus)
  return false;
#undef DO_
}

void LevelStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.LevelStatus)
  // optional uint32 vigor = 1;
  if (has_vigor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vigor(), output);
  }

  // optional uint32 endurance = 2;
  if (has_endurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endurance(), output);
  }

  // optional uint32 vitality = 3;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vitality(), output);
  }

  // optional uint32 attunement = 4;
  if (has_attunement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attunement(), output);
  }

  // optional uint32 strenght = 5;
  if (has_strenght()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->strenght(), output);
  }

  // optional uint32 dexterity = 6;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dexterity(), output);
  }

  // optional uint32 intelligence = 7;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->intelligence(), output);
  }

  // optional uint32 faith = 8;
  if (has_faith()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->faith(), output);
  }

  // optional uint32 adaptability = 9;
  if (has_adaptability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->adaptability(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.LevelStatus)
}

int LevelStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vigor = 1;
    if (has_vigor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vigor());
    }

    // optional uint32 endurance = 2;
    if (has_endurance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endurance());
    }

    // optional uint32 vitality = 3;
    if (has_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vitality());
    }

    // optional uint32 attunement = 4;
    if (has_attunement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attunement());
    }

    // optional uint32 strenght = 5;
    if (has_strenght()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strenght());
    }

    // optional uint32 dexterity = 6;
    if (has_dexterity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexterity());
    }

    // optional uint32 intelligence = 7;
    if (has_intelligence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional uint32 faith = 8;
    if (has_faith()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faith());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 adaptability = 9;
    if (has_adaptability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adaptability());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelStatus*>(&from));
}

void LevelStatus::MergeFrom(const LevelStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vigor()) {
      set_vigor(from.vigor());
    }
    if (from.has_endurance()) {
      set_endurance(from.endurance());
    }
    if (from.has_vitality()) {
      set_vitality(from.vitality());
    }
    if (from.has_attunement()) {
      set_attunement(from.attunement());
    }
    if (from.has_strenght()) {
      set_strenght(from.strenght());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_faith()) {
      set_faith(from.faith());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adaptability()) {
      set_adaptability(from.adaptability());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LevelStatus::CopyFrom(const LevelStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelStatus::IsInitialized() const {

  return true;
}

void LevelStatus::Swap(LevelStatus* other) {
  if (other != this) {
    std::swap(vigor_, other->vigor_);
    std::swap(endurance_, other->endurance_);
    std::swap(vitality_, other->vitality_);
    std::swap(attunement_, other->attunement_);
    std::swap(strenght_, other->strenght_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(intelligence_, other->intelligence_);
    std::swap(faith_, other->faith_);
    std::swap(adaptability_, other->adaptability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelStatus::GetTypeName() const {
  return "DS2_Frpg2PlayerData.LevelStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int PhantomTypeCount::kUnknown1FieldNumber;
const int PhantomTypeCount::kUnknown2FieldNumber;
#endif  // !_MSC_VER

PhantomTypeCount::PhantomTypeCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.PhantomTypeCount)
}

void PhantomTypeCount::InitAsDefaultInstance() {
}

PhantomTypeCount::PhantomTypeCount(const PhantomTypeCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.PhantomTypeCount)
}

void PhantomTypeCount::SharedCtor() {
  _cached_size_ = 0;
  unknown_1_ = 0u;
  unknown_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhantomTypeCount::~PhantomTypeCount() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.PhantomTypeCount)
  SharedDtor();
}

void PhantomTypeCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PhantomTypeCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhantomTypeCount& PhantomTypeCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PhantomTypeCount* PhantomTypeCount::default_instance_ = NULL;

PhantomTypeCount* PhantomTypeCount::New() const {
  return new PhantomTypeCount;
}

void PhantomTypeCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhantomTypeCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(unknown_1_, unknown_2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PhantomTypeCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.PhantomTypeCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unknown_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_2;
        break;
      }

      // optional uint32 unknown_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.PhantomTypeCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.PhantomTypeCount)
  return false;
#undef DO_
}

void PhantomTypeCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.PhantomTypeCount)
  // optional uint32 unknown_1 = 1;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unknown_1(), output);
  }

  // optional uint32 unknown_2 = 2;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.PhantomTypeCount)
}

int PhantomTypeCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unknown_1 = 1;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

    // optional uint32 unknown_2 = 2;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhantomTypeCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhantomTypeCount*>(&from));
}

void PhantomTypeCount::MergeFrom(const PhantomTypeCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PhantomTypeCount::CopyFrom(const PhantomTypeCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhantomTypeCount::IsInitialized() const {

  return true;
}

void PhantomTypeCount::Swap(PhantomTypeCount* other) {
  if (other != this) {
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PhantomTypeCount::GetTypeName() const {
  return "DS2_Frpg2PlayerData.PhantomTypeCount";
}


// ===================================================================

#ifndef _MSC_VER
const int PhysicalStatus::kHealthFieldNumber;
const int PhysicalStatus::kStaminaFieldNumber;
const int PhysicalStatus::kEquipLoadFieldNumber;
const int PhysicalStatus::kUnknown4FieldNumber;
const int PhysicalStatus::kUnknown5FieldNumber;
const int PhysicalStatus::kAttackStrengthFieldNumber;
const int PhysicalStatus::kAttackDexterityFieldNumber;
const int PhysicalStatus::kUnknown8FieldNumber;
const int PhysicalStatus::kUnknown9FieldNumber;
const int PhysicalStatus::kUnknown10FieldNumber;
const int PhysicalStatus::kUnknown11FieldNumber;
const int PhysicalStatus::kUnknown12FieldNumber;
const int PhysicalStatus::kUnknown13FieldNumber;
const int PhysicalStatus::kPhysicalDefenceFieldNumber;
const int PhysicalStatus::kUnknown15FieldNumber;
const int PhysicalStatus::kUnknown16FieldNumber;
const int PhysicalStatus::kUnknown17FieldNumber;
const int PhysicalStatus::kUnknown18FieldNumber;
const int PhysicalStatus::kUnknown19FieldNumber;
const int PhysicalStatus::kUnknown20FieldNumber;
const int PhysicalStatus::kPetrifyResistFieldNumber;
const int PhysicalStatus::kCurseResistFieldNumber;
const int PhysicalStatus::kAgilityFieldNumber;
const int PhysicalStatus::kPoiseFieldNumber;
#endif  // !_MSC_VER

PhysicalStatus::PhysicalStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.PhysicalStatus)
}

void PhysicalStatus::InitAsDefaultInstance() {
}

PhysicalStatus::PhysicalStatus(const PhysicalStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.PhysicalStatus)
}

void PhysicalStatus::SharedCtor() {
  _cached_size_ = 0;
  health_ = 0u;
  stamina_ = 0u;
  equip_load_ = 0;
  unknown_4_ = 0u;
  unknown_5_ = 0u;
  attack_strength_ = 0u;
  attack_dexterity_ = 0u;
  unknown_8_ = 0u;
  unknown_9_ = 0u;
  unknown_10_ = 0u;
  unknown_11_ = 0u;
  unknown_12_ = 0u;
  unknown_13_ = 0u;
  physical_defence_ = 0u;
  unknown_15_ = 0u;
  unknown_16_ = 0u;
  unknown_17_ = 0u;
  unknown_18_ = 0u;
  unknown_19_ = 0u;
  unknown_20_ = 0u;
  petrify_resist_ = 0u;
  curse_resist_ = 0u;
  agility_ = 0u;
  poise_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhysicalStatus::~PhysicalStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.PhysicalStatus)
  SharedDtor();
}

void PhysicalStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PhysicalStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhysicalStatus& PhysicalStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PhysicalStatus* PhysicalStatus::default_instance_ = NULL;

PhysicalStatus* PhysicalStatus::New() const {
  return new PhysicalStatus;
}

void PhysicalStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhysicalStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(health_, unknown_8_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(unknown_9_, unknown_16_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(unknown_17_, poise_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PhysicalStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.PhysicalStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 health = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stamina;
        break;
      }

      // optional uint32 stamina = 2;
      case 2: {
        if (tag == 16) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_equip_load;
        break;
      }

      // optional float equip_load = 3;
      case 3: {
        if (tag == 29) {
         parse_equip_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &equip_load_)));
          set_has_equip_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // optional uint32 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // optional uint32 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attack_strength;
        break;
      }

      // optional uint32 attack_strength = 6;
      case 6: {
        if (tag == 48) {
         parse_attack_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_strength_)));
          set_has_attack_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_attack_dexterity;
        break;
      }

      // optional uint32 attack_dexterity = 7;
      case 7: {
        if (tag == 56) {
         parse_attack_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_dexterity_)));
          set_has_attack_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_unknown_8;
        break;
      }

      // optional uint32 unknown_8 = 8;
      case 8: {
        if (tag == 64) {
         parse_unknown_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_8_)));
          set_has_unknown_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_unknown_9;
        break;
      }

      // optional uint32 unknown_9 = 9;
      case 9: {
        if (tag == 72) {
         parse_unknown_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_9_)));
          set_has_unknown_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_unknown_10;
        break;
      }

      // optional uint32 unknown_10 = 10;
      case 10: {
        if (tag == 80) {
         parse_unknown_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_10_)));
          set_has_unknown_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_unknown_11;
        break;
      }

      // optional uint32 unknown_11 = 11;
      case 11: {
        if (tag == 88) {
         parse_unknown_11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_11_)));
          set_has_unknown_11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_unknown_12;
        break;
      }

      // optional uint32 unknown_12 = 12;
      case 12: {
        if (tag == 96) {
         parse_unknown_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_12_)));
          set_has_unknown_12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_unknown_13;
        break;
      }

      // optional uint32 unknown_13 = 13;
      case 13: {
        if (tag == 104) {
         parse_unknown_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_13_)));
          set_has_unknown_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_physical_defence;
        break;
      }

      // optional uint32 physical_defence = 14;
      case 14: {
        if (tag == 112) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_unknown_15;
        break;
      }

      // optional uint32 unknown_15 = 15;
      case 15: {
        if (tag == 120) {
         parse_unknown_15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_15_)));
          set_has_unknown_15();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_unknown_16;
        break;
      }

      // optional uint32 unknown_16 = 16;
      case 16: {
        if (tag == 128) {
         parse_unknown_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_16_)));
          set_has_unknown_16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_unknown_17;
        break;
      }

      // optional uint32 unknown_17 = 17;
      case 17: {
        if (tag == 136) {
         parse_unknown_17:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_17_)));
          set_has_unknown_17();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_unknown_18;
        break;
      }

      // optional uint32 unknown_18 = 18;
      case 18: {
        if (tag == 144) {
         parse_unknown_18:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_18_)));
          set_has_unknown_18();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_unknown_19;
        break;
      }

      // optional uint32 unknown_19 = 19;
      case 19: {
        if (tag == 152) {
         parse_unknown_19:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_19_)));
          set_has_unknown_19();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_unknown_20;
        break;
      }

      // optional uint32 unknown_20 = 20;
      case 20: {
        if (tag == 160) {
         parse_unknown_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_20_)));
          set_has_unknown_20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_petrify_resist;
        break;
      }

      // optional uint32 petrify_resist = 21;
      case 21: {
        if (tag == 168) {
         parse_petrify_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petrify_resist_)));
          set_has_petrify_resist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_curse_resist;
        break;
      }

      // optional uint32 curse_resist = 22;
      case 22: {
        if (tag == 176) {
         parse_curse_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curse_resist_)));
          set_has_curse_resist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_agility;
        break;
      }

      // optional uint32 agility = 23;
      case 23: {
        if (tag == 184) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_poise;
        break;
      }

      // optional float poise = 24;
      case 24: {
        if (tag == 197) {
         parse_poise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &poise_)));
          set_has_poise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.PhysicalStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.PhysicalStatus)
  return false;
#undef DO_
}

void PhysicalStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.PhysicalStatus)
  // optional uint32 health = 1;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->health(), output);
  }

  // optional uint32 stamina = 2;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamina(), output);
  }

  // optional float equip_load = 3;
  if (has_equip_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->equip_load(), output);
  }

  // optional uint32 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unknown_4(), output);
  }

  // optional uint32 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unknown_5(), output);
  }

  // optional uint32 attack_strength = 6;
  if (has_attack_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attack_strength(), output);
  }

  // optional uint32 attack_dexterity = 7;
  if (has_attack_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->attack_dexterity(), output);
  }

  // optional uint32 unknown_8 = 8;
  if (has_unknown_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->unknown_8(), output);
  }

  // optional uint32 unknown_9 = 9;
  if (has_unknown_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->unknown_9(), output);
  }

  // optional uint32 unknown_10 = 10;
  if (has_unknown_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->unknown_10(), output);
  }

  // optional uint32 unknown_11 = 11;
  if (has_unknown_11()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unknown_11(), output);
  }

  // optional uint32 unknown_12 = 12;
  if (has_unknown_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->unknown_12(), output);
  }

  // optional uint32 unknown_13 = 13;
  if (has_unknown_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->unknown_13(), output);
  }

  // optional uint32 physical_defence = 14;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->physical_defence(), output);
  }

  // optional uint32 unknown_15 = 15;
  if (has_unknown_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->unknown_15(), output);
  }

  // optional uint32 unknown_16 = 16;
  if (has_unknown_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->unknown_16(), output);
  }

  // optional uint32 unknown_17 = 17;
  if (has_unknown_17()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->unknown_17(), output);
  }

  // optional uint32 unknown_18 = 18;
  if (has_unknown_18()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->unknown_18(), output);
  }

  // optional uint32 unknown_19 = 19;
  if (has_unknown_19()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->unknown_19(), output);
  }

  // optional uint32 unknown_20 = 20;
  if (has_unknown_20()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->unknown_20(), output);
  }

  // optional uint32 petrify_resist = 21;
  if (has_petrify_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->petrify_resist(), output);
  }

  // optional uint32 curse_resist = 22;
  if (has_curse_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->curse_resist(), output);
  }

  // optional uint32 agility = 23;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->agility(), output);
  }

  // optional float poise = 24;
  if (has_poise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->poise(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.PhysicalStatus)
}

int PhysicalStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 health = 1;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional uint32 stamina = 2;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamina());
    }

    // optional float equip_load = 3;
    if (has_equip_load()) {
      total_size += 1 + 4;
    }

    // optional uint32 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

    // optional uint32 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_5());
    }

    // optional uint32 attack_strength = 6;
    if (has_attack_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_strength());
    }

    // optional uint32 attack_dexterity = 7;
    if (has_attack_dexterity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_dexterity());
    }

    // optional uint32 unknown_8 = 8;
    if (has_unknown_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_8());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 unknown_9 = 9;
    if (has_unknown_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_9());
    }

    // optional uint32 unknown_10 = 10;
    if (has_unknown_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_10());
    }

    // optional uint32 unknown_11 = 11;
    if (has_unknown_11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_11());
    }

    // optional uint32 unknown_12 = 12;
    if (has_unknown_12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_12());
    }

    // optional uint32 unknown_13 = 13;
    if (has_unknown_13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_13());
    }

    // optional uint32 physical_defence = 14;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }

    // optional uint32 unknown_15 = 15;
    if (has_unknown_15()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_15());
    }

    // optional uint32 unknown_16 = 16;
    if (has_unknown_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_16());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 unknown_17 = 17;
    if (has_unknown_17()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_17());
    }

    // optional uint32 unknown_18 = 18;
    if (has_unknown_18()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_18());
    }

    // optional uint32 unknown_19 = 19;
    if (has_unknown_19()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_19());
    }

    // optional uint32 unknown_20 = 20;
    if (has_unknown_20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_20());
    }

    // optional uint32 petrify_resist = 21;
    if (has_petrify_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petrify_resist());
    }

    // optional uint32 curse_resist = 22;
    if (has_curse_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curse_resist());
    }

    // optional uint32 agility = 23;
    if (has_agility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional float poise = 24;
    if (has_poise()) {
      total_size += 2 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicalStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhysicalStatus*>(&from));
}

void PhysicalStatus::MergeFrom(const PhysicalStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_equip_load()) {
      set_equip_load(from.equip_load());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
    if (from.has_attack_strength()) {
      set_attack_strength(from.attack_strength());
    }
    if (from.has_attack_dexterity()) {
      set_attack_dexterity(from.attack_dexterity());
    }
    if (from.has_unknown_8()) {
      set_unknown_8(from.unknown_8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unknown_9()) {
      set_unknown_9(from.unknown_9());
    }
    if (from.has_unknown_10()) {
      set_unknown_10(from.unknown_10());
    }
    if (from.has_unknown_11()) {
      set_unknown_11(from.unknown_11());
    }
    if (from.has_unknown_12()) {
      set_unknown_12(from.unknown_12());
    }
    if (from.has_unknown_13()) {
      set_unknown_13(from.unknown_13());
    }
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_unknown_15()) {
      set_unknown_15(from.unknown_15());
    }
    if (from.has_unknown_16()) {
      set_unknown_16(from.unknown_16());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_unknown_17()) {
      set_unknown_17(from.unknown_17());
    }
    if (from.has_unknown_18()) {
      set_unknown_18(from.unknown_18());
    }
    if (from.has_unknown_19()) {
      set_unknown_19(from.unknown_19());
    }
    if (from.has_unknown_20()) {
      set_unknown_20(from.unknown_20());
    }
    if (from.has_petrify_resist()) {
      set_petrify_resist(from.petrify_resist());
    }
    if (from.has_curse_resist()) {
      set_curse_resist(from.curse_resist());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_poise()) {
      set_poise(from.poise());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PhysicalStatus::CopyFrom(const PhysicalStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalStatus::IsInitialized() const {

  return true;
}

void PhysicalStatus::Swap(PhysicalStatus* other) {
  if (other != this) {
    std::swap(health_, other->health_);
    std::swap(stamina_, other->stamina_);
    std::swap(equip_load_, other->equip_load_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(attack_strength_, other->attack_strength_);
    std::swap(attack_dexterity_, other->attack_dexterity_);
    std::swap(unknown_8_, other->unknown_8_);
    std::swap(unknown_9_, other->unknown_9_);
    std::swap(unknown_10_, other->unknown_10_);
    std::swap(unknown_11_, other->unknown_11_);
    std::swap(unknown_12_, other->unknown_12_);
    std::swap(unknown_13_, other->unknown_13_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(unknown_15_, other->unknown_15_);
    std::swap(unknown_16_, other->unknown_16_);
    std::swap(unknown_17_, other->unknown_17_);
    std::swap(unknown_18_, other->unknown_18_);
    std::swap(unknown_19_, other->unknown_19_);
    std::swap(unknown_20_, other->unknown_20_);
    std::swap(petrify_resist_, other->petrify_resist_);
    std::swap(curse_resist_, other->curse_resist_);
    std::swap(agility_, other->agility_);
    std::swap(poise_, other->poise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PhysicalStatus::GetTypeName() const {
  return "DS2_Frpg2PlayerData.PhysicalStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLocation::kOnlineAreaIdFieldNumber;
const int PlayerLocation::kCellIdFieldNumber;
const int PlayerLocation::kOnlineActivityAreaIdFieldNumber;
const int PlayerLocation::kPositionFieldNumber;
const int PlayerLocation::kUnknown5FieldNumber;
#endif  // !_MSC_VER

PlayerLocation::PlayerLocation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.PlayerLocation)
}

void PlayerLocation::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::DS2_Frpg2PlayerData::Vector*>(
      ::DS2_Frpg2PlayerData::Vector::internal_default_instance());
#else
  position_ = const_cast< ::DS2_Frpg2PlayerData::Vector*>(&::DS2_Frpg2PlayerData::Vector::default_instance());
#endif
}

PlayerLocation::PlayerLocation(const PlayerLocation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.PlayerLocation)
}

void PlayerLocation::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  online_activity_area_id_ = 0u;
  position_ = NULL;
  unknown_5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLocation::~PlayerLocation() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.PlayerLocation)
  SharedDtor();
}

void PlayerLocation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete position_;
  }
}

void PlayerLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerLocation& PlayerLocation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PlayerLocation* PlayerLocation::default_instance_ = NULL;

PlayerLocation* PlayerLocation::New() const {
  return new PlayerLocation;
}

void PlayerLocation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerLocation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(online_area_id_, cell_id_);
    ZR_(online_activity_area_id_, unknown_5_);
    if (has_position()) {
      if (position_ != NULL) position_->::DS2_Frpg2PlayerData::Vector::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.PlayerLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_activity_area_id;
        break;
      }

      // optional uint32 online_activity_area_id = 3;
      case 3: {
        if (tag == 24) {
         parse_online_activity_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_activity_area_id_)));
          set_has_online_activity_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // optional .DS2_Frpg2PlayerData.Vector position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_unknown_5;
        break;
      }

      // optional float unknown_5 = 5;
      case 5: {
        if (tag == 45) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.PlayerLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.PlayerLocation)
  return false;
#undef DO_
}

void PlayerLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.PlayerLocation)
  // optional uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // optional uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // optional uint32 online_activity_area_id = 3;
  if (has_online_activity_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online_activity_area_id(), output);
  }

  // optional .DS2_Frpg2PlayerData.Vector position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->position(), output);
  }

  // optional float unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->unknown_5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.PlayerLocation)
}

int PlayerLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // optional uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 online_activity_area_id = 3;
    if (has_online_activity_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_activity_area_id());
    }

    // optional .DS2_Frpg2PlayerData.Vector position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional float unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLocation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerLocation*>(&from));
}

void PlayerLocation::MergeFrom(const PlayerLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_online_activity_area_id()) {
      set_online_activity_area_id(from.online_activity_area_id());
    }
    if (from.has_position()) {
      mutable_position()->::DS2_Frpg2PlayerData::Vector::MergeFrom(from.position());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerLocation::CopyFrom(const PlayerLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLocation::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void PlayerLocation::Swap(PlayerLocation* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(online_activity_area_id_, other->online_activity_area_id_);
    std::swap(position_, other->position_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerLocation::GetTypeName() const {
  return "DS2_Frpg2PlayerData.PlayerLocation";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStatus_Phantom_leave_at::kUnknown1FieldNumber;
const int PlayerStatus_Phantom_leave_at::kDatetimeFieldNumber;
#endif  // !_MSC_VER

PlayerStatus_Phantom_leave_at::PlayerStatus_Phantom_leave_at()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
}

void PlayerStatus_Phantom_leave_at::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  datetime_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(
      ::DS2_Frpg2PlayerData::DateTime::internal_default_instance());
#else
  datetime_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(&::DS2_Frpg2PlayerData::DateTime::default_instance());
#endif
}

PlayerStatus_Phantom_leave_at::PlayerStatus_Phantom_leave_at(const PlayerStatus_Phantom_leave_at& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
}

void PlayerStatus_Phantom_leave_at::SharedCtor() {
  _cached_size_ = 0;
  unknown_1_ = 0u;
  datetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStatus_Phantom_leave_at::~PlayerStatus_Phantom_leave_at() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
  SharedDtor();
}

void PlayerStatus_Phantom_leave_at::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete datetime_;
  }
}

void PlayerStatus_Phantom_leave_at::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerStatus_Phantom_leave_at& PlayerStatus_Phantom_leave_at::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PlayerStatus_Phantom_leave_at* PlayerStatus_Phantom_leave_at::default_instance_ = NULL;

PlayerStatus_Phantom_leave_at* PlayerStatus_Phantom_leave_at::New() const {
  return new PlayerStatus_Phantom_leave_at;
}

void PlayerStatus_Phantom_leave_at::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    unknown_1_ = 0u;
    if (has_datetime()) {
      if (datetime_ != NULL) datetime_->::DS2_Frpg2PlayerData::DateTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerStatus_Phantom_leave_at::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unknown_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datetime;
        break;
      }

      // optional .DS2_Frpg2PlayerData.DateTime datetime = 2;
      case 2: {
        if (tag == 18) {
         parse_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
  return false;
#undef DO_
}

void PlayerStatus_Phantom_leave_at::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
  // optional uint32 unknown_1 = 1;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unknown_1(), output);
  }

  // optional .DS2_Frpg2PlayerData.DateTime datetime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->datetime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at)
}

int PlayerStatus_Phantom_leave_at::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unknown_1 = 1;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

    // optional .DS2_Frpg2PlayerData.DateTime datetime = 2;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datetime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatus_Phantom_leave_at::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerStatus_Phantom_leave_at*>(&from));
}

void PlayerStatus_Phantom_leave_at::MergeFrom(const PlayerStatus_Phantom_leave_at& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_datetime()) {
      mutable_datetime()->::DS2_Frpg2PlayerData::DateTime::MergeFrom(from.datetime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerStatus_Phantom_leave_at::CopyFrom(const PlayerStatus_Phantom_leave_at& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus_Phantom_leave_at::IsInitialized() const {

  if (has_datetime()) {
    if (!this->datetime().IsInitialized()) return false;
  }
  return true;
}

void PlayerStatus_Phantom_leave_at::Swap(PlayerStatus_Phantom_leave_at* other) {
  if (other != this) {
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerStatus_Phantom_leave_at::GetTypeName() const {
  return "DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStatus::kNameFieldNumber;
const int PlayerStatus::kArchetypeFieldNumber;
const int PlayerStatus::kCovenantFieldNumber;
const int PlayerStatus::kUnknown4FieldNumber;
const int PlayerStatus::kUnknown5FieldNumber;
const int PlayerStatus::kUnknown6FieldNumber;
const int PlayerStatus::kSittingAtBonfireFieldNumber;
const int PlayerStatus::kPhantomLeaveAtFieldNumber;
const int PlayerStatus::kDisableCrossRegionPlayFieldNumber;
const int PlayerStatus::kCharacterIdFieldNumber;
const int PlayerStatus::kHumanEffigyBurntFieldNumber;
const int PlayerStatus::kPlayedAreasFieldNumber;
const int PlayerStatus::kUnknown13FieldNumber;
const int PlayerStatus::kUnknown14FieldNumber;
const int PlayerStatus::kSoulLevelFieldNumber;
const int PlayerStatus::kUnknown16FieldNumber;
const int PlayerStatus::kUnknown17FieldNumber;
const int PlayerStatus::kPlayTimeSecondsFieldNumber;
const int PlayerStatus::kSoulMemoryFieldNumber;
const int PlayerStatus::kUnknown20FieldNumber;
const int PlayerStatus::kUnknown21FieldNumber;
#endif  // !_MSC_VER

PlayerStatus::PlayerStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.PlayerStatus)
}

void PlayerStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  phantom_leave_at_ = const_cast< ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at*>(
      ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at::internal_default_instance());
#else
  phantom_leave_at_ = const_cast< ::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at*>(&::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at::default_instance());
#endif
}

PlayerStatus::PlayerStatus(const PlayerStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.PlayerStatus)
}

void PlayerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  archetype_ = 0u;
  covenant_ = 0u;
  unknown_4_ = 0u;
  unknown_5_ = 0u;
  unknown_6_ = 0u;
  sitting_at_bonfire_ = 0u;
  phantom_leave_at_ = NULL;
  disable_cross_region_play_ = 0u;
  character_id_ = 0u;
  human_effigy_burnt_ = 0u;
  unknown_13_ = 0u;
  unknown_14_ = 0u;
  soul_level_ = 0u;
  unknown_16_ = 0u;
  unknown_17_ = 0u;
  play_time_seconds_ = 0u;
  soul_memory_ = 0u;
  unknown_20_ = 0u;
  unknown_21_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStatus::~PlayerStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.PlayerStatus)
  SharedDtor();
}

void PlayerStatus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (unknown_21_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unknown_21_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete phantom_leave_at_;
  }
}

void PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerStatus& PlayerStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PlayerStatus* PlayerStatus::default_instance_ = NULL;

PlayerStatus* PlayerStatus::New() const {
  return new PlayerStatus;
}

void PlayerStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(archetype_, sitting_at_bonfire_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_phantom_leave_at()) {
      if (phantom_leave_at_ != NULL) phantom_leave_at_->::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 63232) {
    ZR_(disable_cross_region_play_, character_id_);
    ZR_(human_effigy_burnt_, unknown_16_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(unknown_17_, soul_memory_);
    unknown_20_ = 0u;
    if (has_unknown_21()) {
      if (unknown_21_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unknown_21_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  played_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.PlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_archetype;
        break;
      }

      // optional uint32 archetype = 2;
      case 2: {
        if (tag == 16) {
         parse_archetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &archetype_)));
          set_has_archetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_covenant;
        break;
      }

      // optional uint32 covenant = 3;
      case 3: {
        if (tag == 24) {
         parse_covenant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &covenant_)));
          set_has_covenant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // optional uint32 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // optional uint32 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unknown_6;
        break;
      }

      // optional uint32 unknown_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_unknown_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_6_)));
          set_has_unknown_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sitting_at_bonfire;
        break;
      }

      // optional uint32 sitting_at_bonfire = 7;
      case 7: {
        if (tag == 56) {
         parse_sitting_at_bonfire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sitting_at_bonfire_)));
          set_has_sitting_at_bonfire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_phantom_leave_at;
        break;
      }

      // optional .DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at phantom_leave_at = 8;
      case 8: {
        if (tag == 66) {
         parse_phantom_leave_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phantom_leave_at()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_disable_cross_region_play;
        break;
      }

      // optional uint32 disable_cross_region_play = 9;
      case 9: {
        if (tag == 72) {
         parse_disable_cross_region_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disable_cross_region_play_)));
          set_has_disable_cross_region_play();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_character_id;
        break;
      }

      // optional uint32 character_id = 10;
      case 10: {
        if (tag == 80) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_human_effigy_burnt;
        break;
      }

      // optional uint32 human_effigy_burnt = 11;
      case 11: {
        if (tag == 88) {
         parse_human_effigy_burnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &human_effigy_burnt_)));
          set_has_human_effigy_burnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_played_areas;
        break;
      }

      // repeated uint32 played_areas = 12;
      case 12: {
        if (tag == 96) {
         parse_played_areas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_played_areas())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_played_areas())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_played_areas;
        if (input->ExpectTag(104)) goto parse_unknown_13;
        break;
      }

      // optional uint32 unknown_13 = 13;
      case 13: {
        if (tag == 104) {
         parse_unknown_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_13_)));
          set_has_unknown_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unknown_14;
        break;
      }

      // optional uint32 unknown_14 = 14;
      case 14: {
        if (tag == 112) {
         parse_unknown_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_14_)));
          set_has_unknown_14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_soul_level;
        break;
      }

      // optional uint32 soul_level = 15;
      case 15: {
        if (tag == 120) {
         parse_soul_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_level_)));
          set_has_soul_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_unknown_16;
        break;
      }

      // optional uint32 unknown_16 = 16;
      case 16: {
        if (tag == 128) {
         parse_unknown_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_16_)));
          set_has_unknown_16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_unknown_17;
        break;
      }

      // optional uint32 unknown_17 = 17;
      case 17: {
        if (tag == 136) {
         parse_unknown_17:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_17_)));
          set_has_unknown_17();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_play_time_seconds;
        break;
      }

      // optional uint32 play_time_seconds = 18;
      case 18: {
        if (tag == 144) {
         parse_play_time_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_seconds_)));
          set_has_play_time_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_soul_memory;
        break;
      }

      // optional uint32 soul_memory = 19;
      case 19: {
        if (tag == 152) {
         parse_soul_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_memory_)));
          set_has_soul_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_unknown_20;
        break;
      }

      // optional uint32 unknown_20 = 20;
      case 20: {
        if (tag == 160) {
         parse_unknown_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_20_)));
          set_has_unknown_20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_unknown_21;
        break;
      }

      // optional string unknown_21 = 21;
      case 21: {
        if (tag == 170) {
         parse_unknown_21:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unknown_21()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.PlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.PlayerStatus)
  return false;
#undef DO_
}

void PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.PlayerStatus)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 archetype = 2;
  if (has_archetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->archetype(), output);
  }

  // optional uint32 covenant = 3;
  if (has_covenant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->covenant(), output);
  }

  // optional uint32 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unknown_4(), output);
  }

  // optional uint32 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unknown_5(), output);
  }

  // optional uint32 unknown_6 = 6;
  if (has_unknown_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unknown_6(), output);
  }

  // optional uint32 sitting_at_bonfire = 7;
  if (has_sitting_at_bonfire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sitting_at_bonfire(), output);
  }

  // optional .DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at phantom_leave_at = 8;
  if (has_phantom_leave_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->phantom_leave_at(), output);
  }

  // optional uint32 disable_cross_region_play = 9;
  if (has_disable_cross_region_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->disable_cross_region_play(), output);
  }

  // optional uint32 character_id = 10;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->character_id(), output);
  }

  // optional uint32 human_effigy_burnt = 11;
  if (has_human_effigy_burnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->human_effigy_burnt(), output);
  }

  // repeated uint32 played_areas = 12;
  for (int i = 0; i < this->played_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->played_areas(i), output);
  }

  // optional uint32 unknown_13 = 13;
  if (has_unknown_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->unknown_13(), output);
  }

  // optional uint32 unknown_14 = 14;
  if (has_unknown_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->unknown_14(), output);
  }

  // optional uint32 soul_level = 15;
  if (has_soul_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->soul_level(), output);
  }

  // optional uint32 unknown_16 = 16;
  if (has_unknown_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->unknown_16(), output);
  }

  // optional uint32 unknown_17 = 17;
  if (has_unknown_17()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->unknown_17(), output);
  }

  // optional uint32 play_time_seconds = 18;
  if (has_play_time_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->play_time_seconds(), output);
  }

  // optional uint32 soul_memory = 19;
  if (has_soul_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->soul_memory(), output);
  }

  // optional uint32 unknown_20 = 20;
  if (has_unknown_20()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->unknown_20(), output);
  }

  // optional string unknown_21 = 21;
  if (has_unknown_21()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->unknown_21(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.PlayerStatus)
}

int PlayerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 archetype = 2;
    if (has_archetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->archetype());
    }

    // optional uint32 covenant = 3;
    if (has_covenant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->covenant());
    }

    // optional uint32 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

    // optional uint32 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_5());
    }

    // optional uint32 unknown_6 = 6;
    if (has_unknown_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_6());
    }

    // optional uint32 sitting_at_bonfire = 7;
    if (has_sitting_at_bonfire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sitting_at_bonfire());
    }

    // optional .DS2_Frpg2PlayerData.PlayerStatus_Phantom_leave_at phantom_leave_at = 8;
    if (has_phantom_leave_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phantom_leave_at());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 disable_cross_region_play = 9;
    if (has_disable_cross_region_play()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disable_cross_region_play());
    }

    // optional uint32 character_id = 10;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // optional uint32 human_effigy_burnt = 11;
    if (has_human_effigy_burnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->human_effigy_burnt());
    }

    // optional uint32 unknown_13 = 13;
    if (has_unknown_13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_13());
    }

    // optional uint32 unknown_14 = 14;
    if (has_unknown_14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_14());
    }

    // optional uint32 soul_level = 15;
    if (has_soul_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_level());
    }

    // optional uint32 unknown_16 = 16;
    if (has_unknown_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_16());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 unknown_17 = 17;
    if (has_unknown_17()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_17());
    }

    // optional uint32 play_time_seconds = 18;
    if (has_play_time_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_seconds());
    }

    // optional uint32 soul_memory = 19;
    if (has_soul_memory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_memory());
    }

    // optional uint32 unknown_20 = 20;
    if (has_unknown_20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_20());
    }

    // optional string unknown_21 = 21;
    if (has_unknown_21()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unknown_21());
    }

  }
  // repeated uint32 played_areas = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->played_areas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->played_areas(i));
    }
    total_size += 1 * this->played_areas_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerStatus*>(&from));
}

void PlayerStatus::MergeFrom(const PlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  played_areas_.MergeFrom(from.played_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_archetype()) {
      set_archetype(from.archetype());
    }
    if (from.has_covenant()) {
      set_covenant(from.covenant());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
    if (from.has_unknown_6()) {
      set_unknown_6(from.unknown_6());
    }
    if (from.has_sitting_at_bonfire()) {
      set_sitting_at_bonfire(from.sitting_at_bonfire());
    }
    if (from.has_phantom_leave_at()) {
      mutable_phantom_leave_at()->::DS2_Frpg2PlayerData::PlayerStatus_Phantom_leave_at::MergeFrom(from.phantom_leave_at());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_disable_cross_region_play()) {
      set_disable_cross_region_play(from.disable_cross_region_play());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_human_effigy_burnt()) {
      set_human_effigy_burnt(from.human_effigy_burnt());
    }
    if (from.has_unknown_13()) {
      set_unknown_13(from.unknown_13());
    }
    if (from.has_unknown_14()) {
      set_unknown_14(from.unknown_14());
    }
    if (from.has_soul_level()) {
      set_soul_level(from.soul_level());
    }
    if (from.has_unknown_16()) {
      set_unknown_16(from.unknown_16());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_unknown_17()) {
      set_unknown_17(from.unknown_17());
    }
    if (from.has_play_time_seconds()) {
      set_play_time_seconds(from.play_time_seconds());
    }
    if (from.has_soul_memory()) {
      set_soul_memory(from.soul_memory());
    }
    if (from.has_unknown_20()) {
      set_unknown_20(from.unknown_20());
    }
    if (from.has_unknown_21()) {
      set_unknown_21(from.unknown_21());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerStatus::CopyFrom(const PlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus::IsInitialized() const {

  if (has_phantom_leave_at()) {
    if (!this->phantom_leave_at().IsInitialized()) return false;
  }
  return true;
}

void PlayerStatus::Swap(PlayerStatus* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(archetype_, other->archetype_);
    std::swap(covenant_, other->covenant_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(unknown_6_, other->unknown_6_);
    std::swap(sitting_at_bonfire_, other->sitting_at_bonfire_);
    std::swap(phantom_leave_at_, other->phantom_leave_at_);
    std::swap(disable_cross_region_play_, other->disable_cross_region_play_);
    std::swap(character_id_, other->character_id_);
    std::swap(human_effigy_burnt_, other->human_effigy_burnt_);
    played_areas_.Swap(&other->played_areas_);
    std::swap(unknown_13_, other->unknown_13_);
    std::swap(unknown_14_, other->unknown_14_);
    std::swap(soul_level_, other->soul_level_);
    std::swap(unknown_16_, other->unknown_16_);
    std::swap(unknown_17_, other->unknown_17_);
    std::swap(play_time_seconds_, other->play_time_seconds_);
    std::swap(soul_memory_, other->soul_memory_);
    std::swap(unknown_20_, other->unknown_20_);
    std::swap(unknown_21_, other->unknown_21_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerStatus::GetTypeName() const {
  return "DS2_Frpg2PlayerData.PlayerStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerSideStatus::kUnknown1FieldNumber;
#endif  // !_MSC_VER

ServerSideStatus::ServerSideStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.ServerSideStatus)
}

void ServerSideStatus::InitAsDefaultInstance() {
}

ServerSideStatus::ServerSideStatus(const ServerSideStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.ServerSideStatus)
}

void ServerSideStatus::SharedCtor() {
  _cached_size_ = 0;
  unknown_1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerSideStatus::~ServerSideStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.ServerSideStatus)
  SharedDtor();
}

void ServerSideStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerSideStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerSideStatus& ServerSideStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

ServerSideStatus* ServerSideStatus::default_instance_ = NULL;

ServerSideStatus* ServerSideStatus::New() const {
  return new ServerSideStatus;
}

void ServerSideStatus::Clear() {
  unknown_1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerSideStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.ServerSideStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unknown_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.ServerSideStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.ServerSideStatus)
  return false;
#undef DO_
}

void ServerSideStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.ServerSideStatus)
  // optional uint32 unknown_1 = 1;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unknown_1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.ServerSideStatus)
}

int ServerSideStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unknown_1 = 1;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSideStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerSideStatus*>(&from));
}

void ServerSideStatus::MergeFrom(const ServerSideStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerSideStatus::CopyFrom(const ServerSideStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSideStatus::IsInitialized() const {

  return true;
}

void ServerSideStatus::Swap(ServerSideStatus* other) {
  if (other != this) {
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerSideStatus::GetTypeName() const {
  return "DS2_Frpg2PlayerData.ServerSideStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int StatsInfo_Bonfire_levels::kBonfireIdFieldNumber;
const int StatsInfo_Bonfire_levels::kBonfireLevelFieldNumber;
#endif  // !_MSC_VER

StatsInfo_Bonfire_levels::StatsInfo_Bonfire_levels()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
}

void StatsInfo_Bonfire_levels::InitAsDefaultInstance() {
}

StatsInfo_Bonfire_levels::StatsInfo_Bonfire_levels(const StatsInfo_Bonfire_levels& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
}

void StatsInfo_Bonfire_levels::SharedCtor() {
  _cached_size_ = 0;
  bonfire_id_ = 0u;
  bonfire_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatsInfo_Bonfire_levels::~StatsInfo_Bonfire_levels() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
  SharedDtor();
}

void StatsInfo_Bonfire_levels::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StatsInfo_Bonfire_levels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StatsInfo_Bonfire_levels& StatsInfo_Bonfire_levels::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

StatsInfo_Bonfire_levels* StatsInfo_Bonfire_levels::default_instance_ = NULL;

StatsInfo_Bonfire_levels* StatsInfo_Bonfire_levels::New() const {
  return new StatsInfo_Bonfire_levels;
}

void StatsInfo_Bonfire_levels::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatsInfo_Bonfire_levels*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bonfire_id_, bonfire_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StatsInfo_Bonfire_levels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bonfire_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonfire_id_)));
          set_has_bonfire_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bonfire_level;
        break;
      }

      // optional uint32 bonfire_level = 2;
      case 2: {
        if (tag == 16) {
         parse_bonfire_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonfire_level_)));
          set_has_bonfire_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
  return false;
#undef DO_
}

void StatsInfo_Bonfire_levels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
  // optional uint32 bonfire_id = 1;
  if (has_bonfire_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bonfire_id(), output);
  }

  // optional uint32 bonfire_level = 2;
  if (has_bonfire_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bonfire_level(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels)
}

int StatsInfo_Bonfire_levels::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bonfire_id = 1;
    if (has_bonfire_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonfire_id());
    }

    // optional uint32 bonfire_level = 2;
    if (has_bonfire_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonfire_level());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsInfo_Bonfire_levels::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatsInfo_Bonfire_levels*>(&from));
}

void StatsInfo_Bonfire_levels::MergeFrom(const StatsInfo_Bonfire_levels& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonfire_id()) {
      set_bonfire_id(from.bonfire_id());
    }
    if (from.has_bonfire_level()) {
      set_bonfire_level(from.bonfire_level());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StatsInfo_Bonfire_levels::CopyFrom(const StatsInfo_Bonfire_levels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsInfo_Bonfire_levels::IsInitialized() const {

  return true;
}

void StatsInfo_Bonfire_levels::Swap(StatsInfo_Bonfire_levels* other) {
  if (other != this) {
    std::swap(bonfire_id_, other->bonfire_id_);
    std::swap(bonfire_level_, other->bonfire_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StatsInfo_Bonfire_levels::GetTypeName() const {
  return "DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels";
}


// ===================================================================

#ifndef _MSC_VER
const int StatsInfo::kUnknown1FieldNumber;
const int StatsInfo::kUnknown2FieldNumber;
const int StatsInfo::kSinnerPointsFieldNumber;
const int StatsInfo::kBonfireLevelsFieldNumber;
const int StatsInfo::kUnknown5FieldNumber;
const int StatsInfo::kPhantomTypeCount6FieldNumber;
const int StatsInfo::kPhantomTypeCount7FieldNumber;
const int StatsInfo::kPhantomTypeCount8FieldNumber;
const int StatsInfo::kPhantomTypeCount9FieldNumber;
const int StatsInfo::kUnknown10FieldNumber;
const int StatsInfo::kUnknown11FieldNumber;
const int StatsInfo::kUnknown12FieldNumber;
const int StatsInfo::kUnknown13FieldNumber;
const int StatsInfo::kUnknown14FieldNumber;
const int StatsInfo::kUnknown15FieldNumber;
const int StatsInfo::kUnknown16FieldNumber;
const int StatsInfo::kDatetimeFieldNumber;
const int StatsInfo::kUnknown18FieldNumber;
const int StatsInfo::kUnlockedBonfiresFieldNumber;
const int StatsInfo::kUnknown20FieldNumber;
const int StatsInfo::kUnknown21FieldNumber;
#endif  // !_MSC_VER

StatsInfo::StatsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.StatsInfo)
}

void StatsInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  datetime_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(
      ::DS2_Frpg2PlayerData::DateTime::internal_default_instance());
#else
  datetime_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(&::DS2_Frpg2PlayerData::DateTime::default_instance());
#endif
}

StatsInfo::StatsInfo(const StatsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.StatsInfo)
}

void StatsInfo::SharedCtor() {
  _cached_size_ = 0;
  unknown_1_ = 0u;
  unknown_2_ = 0u;
  sinner_points_ = 0u;
  unknown_5_ = 0u;
  unknown_10_ = 0u;
  unknown_12_ = 0u;
  unknown_13_ = 0u;
  unknown_14_ = 0u;
  unknown_15_ = 0u;
  unknown_16_ = 0u;
  datetime_ = NULL;
  unknown_18_ = 0u;
  unknown_20_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatsInfo::~StatsInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.StatsInfo)
  SharedDtor();
}

void StatsInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete datetime_;
  }
}

void StatsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StatsInfo& StatsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

StatsInfo* StatsInfo::default_instance_ = NULL;

StatsInfo* StatsInfo::New() const {
  return new StatsInfo;
}

void StatsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(unknown_1_, unknown_2_);
  ZR_(sinner_points_, unknown_5_);
  if (_has_bits_[8 / 32] & 64000) {
    ZR_(unknown_10_, unknown_16_);
  }
  if (_has_bits_[16 / 32] & 720896) {
    ZR_(unknown_18_, unknown_20_);
    if (has_datetime()) {
      if (datetime_ != NULL) datetime_->::DS2_Frpg2PlayerData::DateTime::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bonfire_levels_.Clear();
  phantom_type_count_6_.Clear();
  phantom_type_count_7_.Clear();
  phantom_type_count_8_.Clear();
  phantom_type_count_9_.Clear();
  unknown_11_.Clear();
  unlocked_bonfires_.Clear();
  unknown_21_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StatsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.StatsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unknown_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_2;
        break;
      }

      // optional uint32 unknown_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sinner_points;
        break;
      }

      // optional uint32 sinner_points = 3;
      case 3: {
        if (tag == 24) {
         parse_sinner_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sinner_points_)));
          set_has_sinner_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bonfire_levels;
        break;
      }

      // repeated .DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels bonfire_levels = 4;
      case 4: {
        if (tag == 34) {
         parse_bonfire_levels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonfire_levels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bonfire_levels;
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // optional uint32 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_phantom_type_count_6;
        break;
      }

      // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_6 = 6;
      case 6: {
        if (tag == 50) {
         parse_phantom_type_count_6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phantom_type_count_6()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_phantom_type_count_6;
        if (input->ExpectTag(58)) goto parse_phantom_type_count_7;
        break;
      }

      // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_7 = 7;
      case 7: {
        if (tag == 58) {
         parse_phantom_type_count_7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phantom_type_count_7()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_phantom_type_count_7;
        if (input->ExpectTag(66)) goto parse_phantom_type_count_8;
        break;
      }

      // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_8 = 8;
      case 8: {
        if (tag == 66) {
         parse_phantom_type_count_8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phantom_type_count_8()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_phantom_type_count_8;
        if (input->ExpectTag(74)) goto parse_phantom_type_count_9;
        break;
      }

      // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_9 = 9;
      case 9: {
        if (tag == 74) {
         parse_phantom_type_count_9:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phantom_type_count_9()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_phantom_type_count_9;
        if (input->ExpectTag(80)) goto parse_unknown_10;
        break;
      }

      // optional uint32 unknown_10 = 10;
      case 10: {
        if (tag == 80) {
         parse_unknown_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_10_)));
          set_has_unknown_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_unknown_11;
        break;
      }

      // repeated uint32 unknown_11 = 11;
      case 11: {
        if (tag == 88) {
         parse_unknown_11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_unknown_11())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_11())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_unknown_11;
        if (input->ExpectTag(96)) goto parse_unknown_12;
        break;
      }

      // optional uint32 unknown_12 = 12;
      case 12: {
        if (tag == 96) {
         parse_unknown_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_12_)));
          set_has_unknown_12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_unknown_13;
        break;
      }

      // optional uint32 unknown_13 = 13;
      case 13: {
        if (tag == 104) {
         parse_unknown_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_13_)));
          set_has_unknown_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unknown_14;
        break;
      }

      // optional uint32 unknown_14 = 14;
      case 14: {
        if (tag == 112) {
         parse_unknown_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_14_)));
          set_has_unknown_14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_unknown_15;
        break;
      }

      // optional uint32 unknown_15 = 15;
      case 15: {
        if (tag == 120) {
         parse_unknown_15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_15_)));
          set_has_unknown_15();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_unknown_16;
        break;
      }

      // optional uint32 unknown_16 = 16;
      case 16: {
        if (tag == 128) {
         parse_unknown_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_16_)));
          set_has_unknown_16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_datetime;
        break;
      }

      // optional .DS2_Frpg2PlayerData.DateTime datetime = 17;
      case 17: {
        if (tag == 138) {
         parse_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_unknown_18;
        break;
      }

      // optional uint32 unknown_18 = 18;
      case 18: {
        if (tag == 144) {
         parse_unknown_18:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_18_)));
          set_has_unknown_18();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_unlocked_bonfires;
        break;
      }

      // repeated uint32 unlocked_bonfires = 19;
      case 19: {
        if (tag == 152) {
         parse_unlocked_bonfires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_unlocked_bonfires())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlocked_bonfires())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_unlocked_bonfires;
        if (input->ExpectTag(160)) goto parse_unknown_20;
        break;
      }

      // optional uint32 unknown_20 = 20;
      case 20: {
        if (tag == 160) {
         parse_unknown_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_20_)));
          set_has_unknown_20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_unknown_21;
        break;
      }

      // repeated uint32 unknown_21 = 21;
      case 21: {
        if (tag == 168) {
         parse_unknown_21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168, input, this->mutable_unknown_21())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_21())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_unknown_21;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.StatsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.StatsInfo)
  return false;
#undef DO_
}

void StatsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.StatsInfo)
  // optional uint32 unknown_1 = 1;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unknown_1(), output);
  }

  // optional uint32 unknown_2 = 2;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_2(), output);
  }

  // optional uint32 sinner_points = 3;
  if (has_sinner_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sinner_points(), output);
  }

  // repeated .DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels bonfire_levels = 4;
  for (int i = 0; i < this->bonfire_levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->bonfire_levels(i), output);
  }

  // optional uint32 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unknown_5(), output);
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_6 = 6;
  for (int i = 0; i < this->phantom_type_count_6_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->phantom_type_count_6(i), output);
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_7 = 7;
  for (int i = 0; i < this->phantom_type_count_7_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->phantom_type_count_7(i), output);
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_8 = 8;
  for (int i = 0; i < this->phantom_type_count_8_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->phantom_type_count_8(i), output);
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_9 = 9;
  for (int i = 0; i < this->phantom_type_count_9_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->phantom_type_count_9(i), output);
  }

  // optional uint32 unknown_10 = 10;
  if (has_unknown_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->unknown_10(), output);
  }

  // repeated uint32 unknown_11 = 11;
  for (int i = 0; i < this->unknown_11_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->unknown_11(i), output);
  }

  // optional uint32 unknown_12 = 12;
  if (has_unknown_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->unknown_12(), output);
  }

  // optional uint32 unknown_13 = 13;
  if (has_unknown_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->unknown_13(), output);
  }

  // optional uint32 unknown_14 = 14;
  if (has_unknown_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->unknown_14(), output);
  }

  // optional uint32 unknown_15 = 15;
  if (has_unknown_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->unknown_15(), output);
  }

  // optional uint32 unknown_16 = 16;
  if (has_unknown_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->unknown_16(), output);
  }

  // optional .DS2_Frpg2PlayerData.DateTime datetime = 17;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->datetime(), output);
  }

  // optional uint32 unknown_18 = 18;
  if (has_unknown_18()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->unknown_18(), output);
  }

  // repeated uint32 unlocked_bonfires = 19;
  for (int i = 0; i < this->unlocked_bonfires_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->unlocked_bonfires(i), output);
  }

  // optional uint32 unknown_20 = 20;
  if (has_unknown_20()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->unknown_20(), output);
  }

  // repeated uint32 unknown_21 = 21;
  for (int i = 0; i < this->unknown_21_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->unknown_21(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.StatsInfo)
}

int StatsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unknown_1 = 1;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

    // optional uint32 unknown_2 = 2;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_2());
    }

    // optional uint32 sinner_points = 3;
    if (has_sinner_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sinner_points());
    }

    // optional uint32 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_5());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 unknown_10 = 10;
    if (has_unknown_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_10());
    }

    // optional uint32 unknown_12 = 12;
    if (has_unknown_12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_12());
    }

    // optional uint32 unknown_13 = 13;
    if (has_unknown_13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_13());
    }

    // optional uint32 unknown_14 = 14;
    if (has_unknown_14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_14());
    }

    // optional uint32 unknown_15 = 15;
    if (has_unknown_15()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_15());
    }

    // optional uint32 unknown_16 = 16;
    if (has_unknown_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_16());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .DS2_Frpg2PlayerData.DateTime datetime = 17;
    if (has_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datetime());
    }

    // optional uint32 unknown_18 = 18;
    if (has_unknown_18()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_18());
    }

    // optional uint32 unknown_20 = 20;
    if (has_unknown_20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_20());
    }

  }
  // repeated .DS2_Frpg2PlayerData.StatsInfo_Bonfire_levels bonfire_levels = 4;
  total_size += 1 * this->bonfire_levels_size();
  for (int i = 0; i < this->bonfire_levels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonfire_levels(i));
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_6 = 6;
  total_size += 1 * this->phantom_type_count_6_size();
  for (int i = 0; i < this->phantom_type_count_6_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phantom_type_count_6(i));
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_7 = 7;
  total_size += 1 * this->phantom_type_count_7_size();
  for (int i = 0; i < this->phantom_type_count_7_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phantom_type_count_7(i));
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_8 = 8;
  total_size += 1 * this->phantom_type_count_8_size();
  for (int i = 0; i < this->phantom_type_count_8_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phantom_type_count_8(i));
  }

  // repeated .DS2_Frpg2PlayerData.PhantomTypeCount phantom_type_count_9 = 9;
  total_size += 1 * this->phantom_type_count_9_size();
  for (int i = 0; i < this->phantom_type_count_9_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phantom_type_count_9(i));
  }

  // repeated uint32 unknown_11 = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->unknown_11_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unknown_11(i));
    }
    total_size += 1 * this->unknown_11_size() + data_size;
  }

  // repeated uint32 unlocked_bonfires = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlocked_bonfires_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlocked_bonfires(i));
    }
    total_size += 2 * this->unlocked_bonfires_size() + data_size;
  }

  // repeated uint32 unknown_21 = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->unknown_21_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unknown_21(i));
    }
    total_size += 2 * this->unknown_21_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatsInfo*>(&from));
}

void StatsInfo::MergeFrom(const StatsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bonfire_levels_.MergeFrom(from.bonfire_levels_);
  phantom_type_count_6_.MergeFrom(from.phantom_type_count_6_);
  phantom_type_count_7_.MergeFrom(from.phantom_type_count_7_);
  phantom_type_count_8_.MergeFrom(from.phantom_type_count_8_);
  phantom_type_count_9_.MergeFrom(from.phantom_type_count_9_);
  unknown_11_.MergeFrom(from.unknown_11_);
  unlocked_bonfires_.MergeFrom(from.unlocked_bonfires_);
  unknown_21_.MergeFrom(from.unknown_21_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_sinner_points()) {
      set_sinner_points(from.sinner_points());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_unknown_10()) {
      set_unknown_10(from.unknown_10());
    }
    if (from.has_unknown_12()) {
      set_unknown_12(from.unknown_12());
    }
    if (from.has_unknown_13()) {
      set_unknown_13(from.unknown_13());
    }
    if (from.has_unknown_14()) {
      set_unknown_14(from.unknown_14());
    }
    if (from.has_unknown_15()) {
      set_unknown_15(from.unknown_15());
    }
    if (from.has_unknown_16()) {
      set_unknown_16(from.unknown_16());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_datetime()) {
      mutable_datetime()->::DS2_Frpg2PlayerData::DateTime::MergeFrom(from.datetime());
    }
    if (from.has_unknown_18()) {
      set_unknown_18(from.unknown_18());
    }
    if (from.has_unknown_20()) {
      set_unknown_20(from.unknown_20());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StatsInfo::CopyFrom(const StatsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsInfo::IsInitialized() const {

  if (has_datetime()) {
    if (!this->datetime().IsInitialized()) return false;
  }
  return true;
}

void StatsInfo::Swap(StatsInfo* other) {
  if (other != this) {
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(sinner_points_, other->sinner_points_);
    bonfire_levels_.Swap(&other->bonfire_levels_);
    std::swap(unknown_5_, other->unknown_5_);
    phantom_type_count_6_.Swap(&other->phantom_type_count_6_);
    phantom_type_count_7_.Swap(&other->phantom_type_count_7_);
    phantom_type_count_8_.Swap(&other->phantom_type_count_8_);
    phantom_type_count_9_.Swap(&other->phantom_type_count_9_);
    std::swap(unknown_10_, other->unknown_10_);
    unknown_11_.Swap(&other->unknown_11_);
    std::swap(unknown_12_, other->unknown_12_);
    std::swap(unknown_13_, other->unknown_13_);
    std::swap(unknown_14_, other->unknown_14_);
    std::swap(unknown_15_, other->unknown_15_);
    std::swap(unknown_16_, other->unknown_16_);
    std::swap(datetime_, other->datetime_);
    std::swap(unknown_18_, other->unknown_18_);
    unlocked_bonfires_.Swap(&other->unlocked_bonfires_);
    std::swap(unknown_20_, other->unknown_20_);
    unknown_21_.Swap(&other->unknown_21_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StatsInfo::GetTypeName() const {
  return "DS2_Frpg2PlayerData.StatsInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vector& Vector::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.Vector)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.Vector)
}

int Vector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vector*>(&from));
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Vector::GetTypeName() const {
  return "DS2_Frpg2PlayerData.Vector";
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponStatus::kLeftAr1FieldNumber;
const int WeaponStatus::kLeftAr2FieldNumber;
const int WeaponStatus::kLeftAr3FieldNumber;
const int WeaponStatus::kRightAr1FieldNumber;
const int WeaponStatus::kRightAr2FieldNumber;
const int WeaponStatus::kRightAr3FieldNumber;
#endif  // !_MSC_VER

WeaponStatus::WeaponStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2PlayerData.WeaponStatus)
}

void WeaponStatus::InitAsDefaultInstance() {
}

WeaponStatus::WeaponStatus(const WeaponStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2PlayerData.WeaponStatus)
}

void WeaponStatus::SharedCtor() {
  _cached_size_ = 0;
  left_ar_1_ = 0u;
  left_ar_2_ = 0u;
  left_ar_3_ = 0u;
  right_ar_1_ = 0u;
  right_ar_2_ = 0u;
  right_ar_3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponStatus::~WeaponStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2PlayerData.WeaponStatus)
  SharedDtor();
}

void WeaponStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponStatus& WeaponStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

WeaponStatus* WeaponStatus::default_instance_ = NULL;

WeaponStatus* WeaponStatus::New() const {
  return new WeaponStatus;
}

void WeaponStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeaponStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(left_ar_1_, right_ar_3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool WeaponStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2PlayerData.WeaponStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 left_ar_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_ar_1_)));
          set_has_left_ar_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left_ar_2;
        break;
      }

      // optional uint32 left_ar_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_left_ar_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_ar_2_)));
          set_has_left_ar_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left_ar_3;
        break;
      }

      // optional uint32 left_ar_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_left_ar_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_ar_3_)));
          set_has_left_ar_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_right_ar_1;
        break;
      }

      // optional uint32 right_ar_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_right_ar_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_ar_1_)));
          set_has_right_ar_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_right_ar_2;
        break;
      }

      // optional uint32 right_ar_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_right_ar_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_ar_2_)));
          set_has_right_ar_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_right_ar_3;
        break;
      }

      // optional uint32 right_ar_3 = 6;
      case 6: {
        if (tag == 48) {
         parse_right_ar_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_ar_3_)));
          set_has_right_ar_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2PlayerData.WeaponStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2PlayerData.WeaponStatus)
  return false;
#undef DO_
}

void WeaponStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2PlayerData.WeaponStatus)
  // optional uint32 left_ar_1 = 1;
  if (has_left_ar_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left_ar_1(), output);
  }

  // optional uint32 left_ar_2 = 2;
  if (has_left_ar_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_ar_2(), output);
  }

  // optional uint32 left_ar_3 = 3;
  if (has_left_ar_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_ar_3(), output);
  }

  // optional uint32 right_ar_1 = 4;
  if (has_right_ar_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->right_ar_1(), output);
  }

  // optional uint32 right_ar_2 = 5;
  if (has_right_ar_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->right_ar_2(), output);
  }

  // optional uint32 right_ar_3 = 6;
  if (has_right_ar_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->right_ar_3(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2PlayerData.WeaponStatus)
}

int WeaponStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 left_ar_1 = 1;
    if (has_left_ar_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_ar_1());
    }

    // optional uint32 left_ar_2 = 2;
    if (has_left_ar_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_ar_2());
    }

    // optional uint32 left_ar_3 = 3;
    if (has_left_ar_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_ar_3());
    }

    // optional uint32 right_ar_1 = 4;
    if (has_right_ar_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_ar_1());
    }

    // optional uint32 right_ar_2 = 5;
    if (has_right_ar_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_ar_2());
    }

    // optional uint32 right_ar_3 = 6;
    if (has_right_ar_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_ar_3());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponStatus*>(&from));
}

void WeaponStatus::MergeFrom(const WeaponStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_ar_1()) {
      set_left_ar_1(from.left_ar_1());
    }
    if (from.has_left_ar_2()) {
      set_left_ar_2(from.left_ar_2());
    }
    if (from.has_left_ar_3()) {
      set_left_ar_3(from.left_ar_3());
    }
    if (from.has_right_ar_1()) {
      set_right_ar_1(from.right_ar_1());
    }
    if (from.has_right_ar_2()) {
      set_right_ar_2(from.right_ar_2());
    }
    if (from.has_right_ar_3()) {
      set_right_ar_3(from.right_ar_3());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void WeaponStatus::CopyFrom(const WeaponStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponStatus::IsInitialized() const {

  return true;
}

void WeaponStatus::Swap(WeaponStatus* other) {
  if (other != this) {
    std::swap(left_ar_1_, other->left_ar_1_);
    std::swap(left_ar_2_, other->left_ar_2_);
    std::swap(left_ar_3_, other->left_ar_3_);
    std::swap(right_ar_1_, other->right_ar_1_);
    std::swap(right_ar_2_, other->right_ar_2_);
    std::swap(right_ar_3_, other->right_ar_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponStatus::GetTypeName() const {
  return "DS2_Frpg2PlayerData.WeaponStatus";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DS2_Frpg2PlayerData

// @@protoc_insertion_point(global_scope)
