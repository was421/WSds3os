// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS2_Frpg2RequestMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DS2_Frpg2RequestMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace DS2_Frpg2RequestMessage {

void protobuf_ShutdownFile_DS2_5fFrpg2RequestMessage_2eproto() {
  delete EmptyResponse::default_instance_;
  delete RequestWaitForUserLogin::default_instance_;
  delete RequestWaitForUserLoginResponse::default_instance_;
  delete PlayerStatusUploadConfig::default_instance_;
  delete AnnounceMessageData::default_instance_;
  delete AnnounceMessageDataList::default_instance_;
  delete RequestGetAnnounceMessageList::default_instance_;
  delete RequestGetAnnounceMessageListResponse::default_instance_;
  delete PlayerCharacterData::default_instance_;
  delete PlayerCharacterID::default_instance_;
  delete PlayerInfoUploadConfigPushMessage::default_instance_;
  delete RequestUpdateLoginPlayerCharacter::default_instance_;
  delete RequestUpdateLoginPlayerCharacterResponse::default_instance_;
  delete RequestUpdatePlayerStatus::default_instance_;
  delete RequestUpdatePlayerStatusResponse::default_instance_;
  delete RequestUpdatePlayerCharacter::default_instance_;
  delete RequestUpdatePlayerCharacterResponse::default_instance_;
  delete RequestGetPlayerCharacter::default_instance_;
  delete RequestGetPlayerCharacterResponse::default_instance_;
  delete RequestGetLoginPlayerCharacter::default_instance_;
  delete RequestGetLoginPlayerCharacterResponse::default_instance_;
  delete BloodMessageData::default_instance_;
  delete BloodMessageCellLimitData::default_instance_;
  delete RequestReentryBloodMessage::default_instance_;
  delete RequestReentryBloodMessageResponse::default_instance_;
  delete RequestCreateBloodMessage::default_instance_;
  delete RequestCreateBloodMessageResponse::default_instance_;
  delete RequestRemoveBloodMessage::default_instance_;
  delete RequestRemoveBloodMessageResponse::default_instance_;
  delete RequestGetBloodMessageList::default_instance_;
  delete RequestGetBloodMessageListResponse::default_instance_;
  delete RequestEvaluateBloodMessage::default_instance_;
  delete RequestEvaluateBloodMessageResponse::default_instance_;
  delete RequestGetBloodMessageEvaluation::default_instance_;
  delete RequestGetBloodMessageEvaluationResponse::default_instance_;
  delete PushRequestEvaluateBloodMessage::default_instance_;
  delete RequestGetAreaBloodMessageList::default_instance_;
  delete BloodstainInfo::default_instance_;
  delete RequestCreateBloodstain::default_instance_;
  delete RequestGetBloodstainList::default_instance_;
  delete RequestGetAreaBloodstainList::default_instance_;
  delete RequestGetBloodstainListResponse::default_instance_;
  delete RequestGetDeadingGhost::default_instance_;
  delete RequestGetDeadingGhostResponse::default_instance_;
  delete RequestNotifyBuyItem::default_instance_;
  delete RequestNotifyBuyItemResponse::default_instance_;
  delete RequestNotifyDeath::default_instance_;
  delete RequestNotifyDeathResponse::default_instance_;
  delete RequestNotifyDisconnectSession::default_instance_;
  delete RequestNotifyDisconnectSessionResponse::default_instance_;
  delete RequestNotifyJoinGuestPlayer::default_instance_;
  delete RequestNotifyJoinGuestPlayerResponse::default_instance_;
  delete RequestNotifyJoinSession::default_instance_;
  delete RequestNotifyJoinSessionResponse::default_instance_;
  delete RequestNotifyKillEnemy::default_instance_;
  delete RequestNotifyKillEnemy_Enemy_count::default_instance_;
  delete RequestNotifyKillEnemyResponse::default_instance_;
  delete RequestNotifyKillPlayer::default_instance_;
  delete RequestNotifyKillPlayerResponse::default_instance_;
  delete RequestNotifyLeaveGuestPlayer::default_instance_;
  delete RequestNotifyLeaveGuestPlayerResponse::default_instance_;
  delete RequestNotifyLeaveSession::default_instance_;
  delete RequestNotifyLeaveSessionResponse::default_instance_;
  delete RequestNotifyMirrorKnight::default_instance_;
  delete RequestNotifyMirrorKnightResponse::default_instance_;
  delete RequestNotifyOfflineDeathCount::default_instance_;
  delete RequestNotifyOfflineDeathCountResponse::default_instance_;
  delete MatchingParameter::default_instance_;
  delete PushRequestSummonSign::default_instance_;
  delete RequestSummonSign::default_instance_;
  delete RequestSummonSignResponse::default_instance_;
  delete PushRequestRejectSign::default_instance_;
  delete PushRequestRemoveSign::default_instance_;
  delete RequestCreateSign::default_instance_;
  delete RequestCreateSignResponse::default_instance_;
  delete RequestGetSignList::default_instance_;
  delete RequestGetSignListResponse::default_instance_;
  delete RequestRejectSign::default_instance_;
  delete RequestRejectSignResponse::default_instance_;
  delete RequestRemoveSign::default_instance_;
  delete RequestRemoveSignResponse::default_instance_;
  delete RequestUpdateSign::default_instance_;
  delete RequestUpdateSignResponse::default_instance_;
  delete SignCellInfo::default_instance_;
  delete SignInfo::default_instance_;
  delete SignData::default_instance_;
  delete RequestGetRightMatchingArea::default_instance_;
  delete RequestGetRightMatchingAreaResponse::default_instance_;
  delete RequestGetRightMatchingAreaResponse_Area_info::default_instance_;
  delete PushRequestRejectMirrorKnightSign::default_instance_;
  delete PushRequestRemoveMirrorKnightSign::default_instance_;
  delete PushRequestSummonMirrorKnightSign::default_instance_;
  delete RequestCreateMirrorKnightSign::default_instance_;
  delete RequestCreateMirrorKnightSignResponse::default_instance_;
  delete RequestGetMirrorKnightSignList::default_instance_;
  delete RequestGetMirrorKnightSignListResponse::default_instance_;
  delete RequestRejectMirrorKnightSign::default_instance_;
  delete RequestRejectMirrorKnightSignResponse::default_instance_;
  delete RequestRemoveMirrorKnightSign::default_instance_;
  delete RequestRemoveMirrorKnightSignResponse::default_instance_;
  delete RequestSummonMirrorKnightSign::default_instance_;
  delete RequestSummonMirrorKnightSignResponse::default_instance_;
  delete RequestUpdateMirrorKnightSign::default_instance_;
  delete RequestUpdateMirrorKnightSignResponse::default_instance_;
  delete BreakInTargetData::default_instance_;
  delete PushRequestAllowBreakInTarget::default_instance_;
  delete PushRequestBreakInTarget::default_instance_;
  delete PushRequestRejectBreakInTarget::default_instance_;
  delete PushRequestRemoveBreakInTarget::default_instance_;
  delete RequestBreakInTarget::default_instance_;
  delete RequestBreakInTargetResponse::default_instance_;
  delete RequestGetBreakInTargetList::default_instance_;
  delete RequestGetBreakInTargetListResponse::default_instance_;
  delete RequestRejectBreakInTarget::default_instance_;
  delete RequestRejectBreakInTargetResponse::default_instance_;
  delete GhostData::default_instance_;
  delete RequestGetGhostDataList::default_instance_;
  delete RequestGetGhostDataListResponse::default_instance_;
  delete RequestCreateGhostData::default_instance_;
  delete RequestCreateGhostDataResponse::default_instance_;
  delete VisitorData::default_instance_;
  delete RequestGetVisitorList::default_instance_;
  delete RequestGetVisitorListResponse::default_instance_;
  delete PushRequestRemoveVisitor::default_instance_;
  delete RequestVisit::default_instance_;
  delete RequestVisitResponse::default_instance_;
  delete RequestRejectVisit::default_instance_;
  delete RequestRejectVisitResponse::default_instance_;
  delete PushRequestRejectVisit::default_instance_;
  delete PushRequestVisit::default_instance_;
  delete PushRequestNotifyRingBell::default_instance_;
  delete RequestNotifyRingBell::default_instance_;
  delete RequestNotifyRingBellResponse::default_instance_;
  delete RequestGetRegulationFile::default_instance_;
  delete RequestGetRegulationFileResponse::default_instance_;
  delete RegulationFileDiffData::default_instance_;
  delete RegulationFileMessage::default_instance_;
  delete RegulationFileUpdateMessage::default_instance_;
  delete RegulationFileUpdatePushMessage::default_instance_;
  delete RankingRecordCount::default_instance_;
  delete RankingRotationID::default_instance_;
  delete PowerStoneRankingData::default_instance_;
  delete PowerStoneRankingDataPack::default_instance_;
  delete RequestGetPowerStoneMyRanking::default_instance_;
  delete RequestGetPowerStoneMyRankingResponse::default_instance_;
  delete RequestGetPowerStoneRanking::default_instance_;
  delete RequestGetPowerStoneRankingResponse::default_instance_;
  delete RequestGetPowerStoneRankingRecordCount::default_instance_;
  delete RequestGetPowerStoneRankingRecordCountResponse::default_instance_;
  delete RequestRegisterPowerStoneData::default_instance_;
  delete RequestRegisterPowerStoneDataResponse::default_instance_;
  delete PushRequestAllowQuickMatch::default_instance_;
  delete PushRequestJoinQuickMatch::default_instance_;
  delete PushRequestRejectQuickMatch::default_instance_;
  delete PushRequestRemoveQuickMatch::default_instance_;
  delete QuickMatchData::default_instance_;
  delete RequestJoinQuickMatch::default_instance_;
  delete RequestJoinQuickMatchResponse::default_instance_;
  delete RequestRegisterQuickMatch::default_instance_;
  delete RequestRegisterQuickMatchResponse::default_instance_;
  delete RequestRejectQuickMatch::default_instance_;
  delete RequestRejectQuickMatchResponse::default_instance_;
  delete RequestSearchQuickMatch::default_instance_;
  delete RequestSearchQuickMatchResponse::default_instance_;
  delete RequestUnregisterQuickMatch::default_instance_;
  delete RequestUnregisterQuickMatchResponse::default_instance_;
  delete RequestUpdateQuickMatch::default_instance_;
  delete RequestUpdateQuickMatchResponse::default_instance_;
  delete RequestGetTotalDeathCount::default_instance_;
  delete RequestGetTotalDeathCountResponse::default_instance_;
  delete PushRequestHeader::default_instance_;
  delete ManagementTextMessage::default_instance_;
  delete NRLoggingMessage::default_instance_;
  delete NRLogUploadRequest::default_instance_;
  delete ServerPing::default_instance_;
  delete RequestBenchmarkThroughput::default_instance_;
  delete RequestBenchmarkThroughputResponse::default_instance_;
  delete RequestMeasureDownloadBandwidth::default_instance_;
  delete RequestMeasureDownloadBandwidthResponse::default_instance_;
  delete RequestMeasureUploadBandwidth::default_instance_;
  delete RequestMeasureUploadBandwidthResponse::default_instance_;
  delete RequestSendMessageToAllPlayers::default_instance_;
  delete RequestSendMessageToAllPlayersResponse::default_instance_;
  delete RequestSendMessageToPlayers::default_instance_;
  delete RequestSendMessageToPlayersResponse::default_instance_;
  delete RequestSendMessageToSelectLanguagePlayers::default_instance_;
  delete RequestSendMessageToSelectLanguagePlayersResponse::default_instance_;
  delete RequestSendMessageToPushClient::default_instance_;
  delete RequestSendPlayerList::default_instance_;
  delete NotifyLoginToPushServer::default_instance_;
  delete NotifyLogoutToPushServer::default_instance_;
  delete UserLoginInfo::default_instance_;
  delete UserLogout::default_instance_;
  delete LoginClientInfo::default_instance_;
  delete LoginForXboxOne::default_instance_;
  delete SocketOptionSetting::default_instance_;
  delete GetConnectGameServerPortIdResponse::default_instance_;
  delete NotifyClientServerInfoToPushServer::default_instance_;
  delete PushLoginUserInfo::default_instance_;
  delete RequestCheckLogin::default_instance_;
  delete RequestCheckLoginResponse::default_instance_;
  delete RequestGetPlayerConnectGameServer::default_instance_;
  delete RequestGetPlayerConnectGameServerResponse::default_instance_;
  delete PlayerConnectServerInfo::default_instance_;
  delete RequestGetConnectionCount::default_instance_;
  delete RequestGetConnectionCountResponse::default_instance_;
  delete RequestDisconnectAllUser::default_instance_;
  delete RequestDisconnectUser::default_instance_;
  delete RequestGetServerSidePlayerStatus::default_instance_;
  delete CellLimitData::default_instance_;
  delete DateTime::default_instance_;
  delete RequestGetPlayerCharacterList::default_instance_;
  delete RequestGetPlayerCharacterListResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::DS2_Frpg2PlayerData::protobuf_AddDesc_DS2_5fFrpg2PlayerData_2eproto();
  EmptyResponse::default_instance_ = new EmptyResponse();
  RequestWaitForUserLogin::default_instance_ = new RequestWaitForUserLogin();
  RequestWaitForUserLoginResponse::default_instance_ = new RequestWaitForUserLoginResponse();
  PlayerStatusUploadConfig::default_instance_ = new PlayerStatusUploadConfig();
  AnnounceMessageData::default_instance_ = new AnnounceMessageData();
  AnnounceMessageDataList::default_instance_ = new AnnounceMessageDataList();
  RequestGetAnnounceMessageList::default_instance_ = new RequestGetAnnounceMessageList();
  RequestGetAnnounceMessageListResponse::default_instance_ = new RequestGetAnnounceMessageListResponse();
  PlayerCharacterData::default_instance_ = new PlayerCharacterData();
  PlayerCharacterID::default_instance_ = new PlayerCharacterID();
  PlayerInfoUploadConfigPushMessage::default_instance_ = new PlayerInfoUploadConfigPushMessage();
  RequestUpdateLoginPlayerCharacter::default_instance_ = new RequestUpdateLoginPlayerCharacter();
  RequestUpdateLoginPlayerCharacterResponse::default_instance_ = new RequestUpdateLoginPlayerCharacterResponse();
  RequestUpdatePlayerStatus::default_instance_ = new RequestUpdatePlayerStatus();
  RequestUpdatePlayerStatusResponse::default_instance_ = new RequestUpdatePlayerStatusResponse();
  RequestUpdatePlayerCharacter::default_instance_ = new RequestUpdatePlayerCharacter();
  RequestUpdatePlayerCharacterResponse::default_instance_ = new RequestUpdatePlayerCharacterResponse();
  RequestGetPlayerCharacter::default_instance_ = new RequestGetPlayerCharacter();
  RequestGetPlayerCharacterResponse::default_instance_ = new RequestGetPlayerCharacterResponse();
  RequestGetLoginPlayerCharacter::default_instance_ = new RequestGetLoginPlayerCharacter();
  RequestGetLoginPlayerCharacterResponse::default_instance_ = new RequestGetLoginPlayerCharacterResponse();
  BloodMessageData::default_instance_ = new BloodMessageData();
  BloodMessageCellLimitData::default_instance_ = new BloodMessageCellLimitData();
  RequestReentryBloodMessage::default_instance_ = new RequestReentryBloodMessage();
  RequestReentryBloodMessageResponse::default_instance_ = new RequestReentryBloodMessageResponse();
  RequestCreateBloodMessage::default_instance_ = new RequestCreateBloodMessage();
  RequestCreateBloodMessageResponse::default_instance_ = new RequestCreateBloodMessageResponse();
  RequestRemoveBloodMessage::default_instance_ = new RequestRemoveBloodMessage();
  RequestRemoveBloodMessageResponse::default_instance_ = new RequestRemoveBloodMessageResponse();
  RequestGetBloodMessageList::default_instance_ = new RequestGetBloodMessageList();
  RequestGetBloodMessageListResponse::default_instance_ = new RequestGetBloodMessageListResponse();
  RequestEvaluateBloodMessage::default_instance_ = new RequestEvaluateBloodMessage();
  RequestEvaluateBloodMessageResponse::default_instance_ = new RequestEvaluateBloodMessageResponse();
  RequestGetBloodMessageEvaluation::default_instance_ = new RequestGetBloodMessageEvaluation();
  RequestGetBloodMessageEvaluationResponse::default_instance_ = new RequestGetBloodMessageEvaluationResponse();
  PushRequestEvaluateBloodMessage::default_instance_ = new PushRequestEvaluateBloodMessage();
  RequestGetAreaBloodMessageList::default_instance_ = new RequestGetAreaBloodMessageList();
  BloodstainInfo::default_instance_ = new BloodstainInfo();
  RequestCreateBloodstain::default_instance_ = new RequestCreateBloodstain();
  RequestGetBloodstainList::default_instance_ = new RequestGetBloodstainList();
  RequestGetAreaBloodstainList::default_instance_ = new RequestGetAreaBloodstainList();
  RequestGetBloodstainListResponse::default_instance_ = new RequestGetBloodstainListResponse();
  RequestGetDeadingGhost::default_instance_ = new RequestGetDeadingGhost();
  RequestGetDeadingGhostResponse::default_instance_ = new RequestGetDeadingGhostResponse();
  RequestNotifyBuyItem::default_instance_ = new RequestNotifyBuyItem();
  RequestNotifyBuyItemResponse::default_instance_ = new RequestNotifyBuyItemResponse();
  RequestNotifyDeath::default_instance_ = new RequestNotifyDeath();
  RequestNotifyDeathResponse::default_instance_ = new RequestNotifyDeathResponse();
  RequestNotifyDisconnectSession::default_instance_ = new RequestNotifyDisconnectSession();
  RequestNotifyDisconnectSessionResponse::default_instance_ = new RequestNotifyDisconnectSessionResponse();
  RequestNotifyJoinGuestPlayer::default_instance_ = new RequestNotifyJoinGuestPlayer();
  RequestNotifyJoinGuestPlayerResponse::default_instance_ = new RequestNotifyJoinGuestPlayerResponse();
  RequestNotifyJoinSession::default_instance_ = new RequestNotifyJoinSession();
  RequestNotifyJoinSessionResponse::default_instance_ = new RequestNotifyJoinSessionResponse();
  RequestNotifyKillEnemy::default_instance_ = new RequestNotifyKillEnemy();
  RequestNotifyKillEnemy_Enemy_count::default_instance_ = new RequestNotifyKillEnemy_Enemy_count();
  RequestNotifyKillEnemyResponse::default_instance_ = new RequestNotifyKillEnemyResponse();
  RequestNotifyKillPlayer::default_instance_ = new RequestNotifyKillPlayer();
  RequestNotifyKillPlayerResponse::default_instance_ = new RequestNotifyKillPlayerResponse();
  RequestNotifyLeaveGuestPlayer::default_instance_ = new RequestNotifyLeaveGuestPlayer();
  RequestNotifyLeaveGuestPlayerResponse::default_instance_ = new RequestNotifyLeaveGuestPlayerResponse();
  RequestNotifyLeaveSession::default_instance_ = new RequestNotifyLeaveSession();
  RequestNotifyLeaveSessionResponse::default_instance_ = new RequestNotifyLeaveSessionResponse();
  RequestNotifyMirrorKnight::default_instance_ = new RequestNotifyMirrorKnight();
  RequestNotifyMirrorKnightResponse::default_instance_ = new RequestNotifyMirrorKnightResponse();
  RequestNotifyOfflineDeathCount::default_instance_ = new RequestNotifyOfflineDeathCount();
  RequestNotifyOfflineDeathCountResponse::default_instance_ = new RequestNotifyOfflineDeathCountResponse();
  MatchingParameter::default_instance_ = new MatchingParameter();
  PushRequestSummonSign::default_instance_ = new PushRequestSummonSign();
  RequestSummonSign::default_instance_ = new RequestSummonSign();
  RequestSummonSignResponse::default_instance_ = new RequestSummonSignResponse();
  PushRequestRejectSign::default_instance_ = new PushRequestRejectSign();
  PushRequestRemoveSign::default_instance_ = new PushRequestRemoveSign();
  RequestCreateSign::default_instance_ = new RequestCreateSign();
  RequestCreateSignResponse::default_instance_ = new RequestCreateSignResponse();
  RequestGetSignList::default_instance_ = new RequestGetSignList();
  RequestGetSignListResponse::default_instance_ = new RequestGetSignListResponse();
  RequestRejectSign::default_instance_ = new RequestRejectSign();
  RequestRejectSignResponse::default_instance_ = new RequestRejectSignResponse();
  RequestRemoveSign::default_instance_ = new RequestRemoveSign();
  RequestRemoveSignResponse::default_instance_ = new RequestRemoveSignResponse();
  RequestUpdateSign::default_instance_ = new RequestUpdateSign();
  RequestUpdateSignResponse::default_instance_ = new RequestUpdateSignResponse();
  SignCellInfo::default_instance_ = new SignCellInfo();
  SignInfo::default_instance_ = new SignInfo();
  SignData::default_instance_ = new SignData();
  RequestGetRightMatchingArea::default_instance_ = new RequestGetRightMatchingArea();
  RequestGetRightMatchingAreaResponse::default_instance_ = new RequestGetRightMatchingAreaResponse();
  RequestGetRightMatchingAreaResponse_Area_info::default_instance_ = new RequestGetRightMatchingAreaResponse_Area_info();
  PushRequestRejectMirrorKnightSign::default_instance_ = new PushRequestRejectMirrorKnightSign();
  PushRequestRemoveMirrorKnightSign::default_instance_ = new PushRequestRemoveMirrorKnightSign();
  PushRequestSummonMirrorKnightSign::default_instance_ = new PushRequestSummonMirrorKnightSign();
  RequestCreateMirrorKnightSign::default_instance_ = new RequestCreateMirrorKnightSign();
  RequestCreateMirrorKnightSignResponse::default_instance_ = new RequestCreateMirrorKnightSignResponse();
  RequestGetMirrorKnightSignList::default_instance_ = new RequestGetMirrorKnightSignList();
  RequestGetMirrorKnightSignListResponse::default_instance_ = new RequestGetMirrorKnightSignListResponse();
  RequestRejectMirrorKnightSign::default_instance_ = new RequestRejectMirrorKnightSign();
  RequestRejectMirrorKnightSignResponse::default_instance_ = new RequestRejectMirrorKnightSignResponse();
  RequestRemoveMirrorKnightSign::default_instance_ = new RequestRemoveMirrorKnightSign();
  RequestRemoveMirrorKnightSignResponse::default_instance_ = new RequestRemoveMirrorKnightSignResponse();
  RequestSummonMirrorKnightSign::default_instance_ = new RequestSummonMirrorKnightSign();
  RequestSummonMirrorKnightSignResponse::default_instance_ = new RequestSummonMirrorKnightSignResponse();
  RequestUpdateMirrorKnightSign::default_instance_ = new RequestUpdateMirrorKnightSign();
  RequestUpdateMirrorKnightSignResponse::default_instance_ = new RequestUpdateMirrorKnightSignResponse();
  BreakInTargetData::default_instance_ = new BreakInTargetData();
  PushRequestAllowBreakInTarget::default_instance_ = new PushRequestAllowBreakInTarget();
  PushRequestBreakInTarget::default_instance_ = new PushRequestBreakInTarget();
  PushRequestRejectBreakInTarget::default_instance_ = new PushRequestRejectBreakInTarget();
  PushRequestRemoveBreakInTarget::default_instance_ = new PushRequestRemoveBreakInTarget();
  RequestBreakInTarget::default_instance_ = new RequestBreakInTarget();
  RequestBreakInTargetResponse::default_instance_ = new RequestBreakInTargetResponse();
  RequestGetBreakInTargetList::default_instance_ = new RequestGetBreakInTargetList();
  RequestGetBreakInTargetListResponse::default_instance_ = new RequestGetBreakInTargetListResponse();
  RequestRejectBreakInTarget::default_instance_ = new RequestRejectBreakInTarget();
  RequestRejectBreakInTargetResponse::default_instance_ = new RequestRejectBreakInTargetResponse();
  GhostData::default_instance_ = new GhostData();
  RequestGetGhostDataList::default_instance_ = new RequestGetGhostDataList();
  RequestGetGhostDataListResponse::default_instance_ = new RequestGetGhostDataListResponse();
  RequestCreateGhostData::default_instance_ = new RequestCreateGhostData();
  RequestCreateGhostDataResponse::default_instance_ = new RequestCreateGhostDataResponse();
  VisitorData::default_instance_ = new VisitorData();
  RequestGetVisitorList::default_instance_ = new RequestGetVisitorList();
  RequestGetVisitorListResponse::default_instance_ = new RequestGetVisitorListResponse();
  PushRequestRemoveVisitor::default_instance_ = new PushRequestRemoveVisitor();
  RequestVisit::default_instance_ = new RequestVisit();
  RequestVisitResponse::default_instance_ = new RequestVisitResponse();
  RequestRejectVisit::default_instance_ = new RequestRejectVisit();
  RequestRejectVisitResponse::default_instance_ = new RequestRejectVisitResponse();
  PushRequestRejectVisit::default_instance_ = new PushRequestRejectVisit();
  PushRequestVisit::default_instance_ = new PushRequestVisit();
  PushRequestNotifyRingBell::default_instance_ = new PushRequestNotifyRingBell();
  RequestNotifyRingBell::default_instance_ = new RequestNotifyRingBell();
  RequestNotifyRingBellResponse::default_instance_ = new RequestNotifyRingBellResponse();
  RequestGetRegulationFile::default_instance_ = new RequestGetRegulationFile();
  RequestGetRegulationFileResponse::default_instance_ = new RequestGetRegulationFileResponse();
  RegulationFileDiffData::default_instance_ = new RegulationFileDiffData();
  RegulationFileMessage::default_instance_ = new RegulationFileMessage();
  RegulationFileUpdateMessage::default_instance_ = new RegulationFileUpdateMessage();
  RegulationFileUpdatePushMessage::default_instance_ = new RegulationFileUpdatePushMessage();
  RankingRecordCount::default_instance_ = new RankingRecordCount();
  RankingRotationID::default_instance_ = new RankingRotationID();
  PowerStoneRankingData::default_instance_ = new PowerStoneRankingData();
  PowerStoneRankingDataPack::default_instance_ = new PowerStoneRankingDataPack();
  RequestGetPowerStoneMyRanking::default_instance_ = new RequestGetPowerStoneMyRanking();
  RequestGetPowerStoneMyRankingResponse::default_instance_ = new RequestGetPowerStoneMyRankingResponse();
  RequestGetPowerStoneRanking::default_instance_ = new RequestGetPowerStoneRanking();
  RequestGetPowerStoneRankingResponse::default_instance_ = new RequestGetPowerStoneRankingResponse();
  RequestGetPowerStoneRankingRecordCount::default_instance_ = new RequestGetPowerStoneRankingRecordCount();
  RequestGetPowerStoneRankingRecordCountResponse::default_instance_ = new RequestGetPowerStoneRankingRecordCountResponse();
  RequestRegisterPowerStoneData::default_instance_ = new RequestRegisterPowerStoneData();
  RequestRegisterPowerStoneDataResponse::default_instance_ = new RequestRegisterPowerStoneDataResponse();
  PushRequestAllowQuickMatch::default_instance_ = new PushRequestAllowQuickMatch();
  PushRequestJoinQuickMatch::default_instance_ = new PushRequestJoinQuickMatch();
  PushRequestRejectQuickMatch::default_instance_ = new PushRequestRejectQuickMatch();
  PushRequestRemoveQuickMatch::default_instance_ = new PushRequestRemoveQuickMatch();
  QuickMatchData::default_instance_ = new QuickMatchData();
  RequestJoinQuickMatch::default_instance_ = new RequestJoinQuickMatch();
  RequestJoinQuickMatchResponse::default_instance_ = new RequestJoinQuickMatchResponse();
  RequestRegisterQuickMatch::default_instance_ = new RequestRegisterQuickMatch();
  RequestRegisterQuickMatchResponse::default_instance_ = new RequestRegisterQuickMatchResponse();
  RequestRejectQuickMatch::default_instance_ = new RequestRejectQuickMatch();
  RequestRejectQuickMatchResponse::default_instance_ = new RequestRejectQuickMatchResponse();
  RequestSearchQuickMatch::default_instance_ = new RequestSearchQuickMatch();
  RequestSearchQuickMatchResponse::default_instance_ = new RequestSearchQuickMatchResponse();
  RequestUnregisterQuickMatch::default_instance_ = new RequestUnregisterQuickMatch();
  RequestUnregisterQuickMatchResponse::default_instance_ = new RequestUnregisterQuickMatchResponse();
  RequestUpdateQuickMatch::default_instance_ = new RequestUpdateQuickMatch();
  RequestUpdateQuickMatchResponse::default_instance_ = new RequestUpdateQuickMatchResponse();
  RequestGetTotalDeathCount::default_instance_ = new RequestGetTotalDeathCount();
  RequestGetTotalDeathCountResponse::default_instance_ = new RequestGetTotalDeathCountResponse();
  PushRequestHeader::default_instance_ = new PushRequestHeader();
  ManagementTextMessage::default_instance_ = new ManagementTextMessage();
  NRLoggingMessage::default_instance_ = new NRLoggingMessage();
  NRLogUploadRequest::default_instance_ = new NRLogUploadRequest();
  ServerPing::default_instance_ = new ServerPing();
  RequestBenchmarkThroughput::default_instance_ = new RequestBenchmarkThroughput();
  RequestBenchmarkThroughputResponse::default_instance_ = new RequestBenchmarkThroughputResponse();
  RequestMeasureDownloadBandwidth::default_instance_ = new RequestMeasureDownloadBandwidth();
  RequestMeasureDownloadBandwidthResponse::default_instance_ = new RequestMeasureDownloadBandwidthResponse();
  RequestMeasureUploadBandwidth::default_instance_ = new RequestMeasureUploadBandwidth();
  RequestMeasureUploadBandwidthResponse::default_instance_ = new RequestMeasureUploadBandwidthResponse();
  RequestSendMessageToAllPlayers::default_instance_ = new RequestSendMessageToAllPlayers();
  RequestSendMessageToAllPlayersResponse::default_instance_ = new RequestSendMessageToAllPlayersResponse();
  RequestSendMessageToPlayers::default_instance_ = new RequestSendMessageToPlayers();
  RequestSendMessageToPlayersResponse::default_instance_ = new RequestSendMessageToPlayersResponse();
  RequestSendMessageToSelectLanguagePlayers::default_instance_ = new RequestSendMessageToSelectLanguagePlayers();
  RequestSendMessageToSelectLanguagePlayersResponse::default_instance_ = new RequestSendMessageToSelectLanguagePlayersResponse();
  RequestSendMessageToPushClient::default_instance_ = new RequestSendMessageToPushClient();
  RequestSendPlayerList::default_instance_ = new RequestSendPlayerList();
  NotifyLoginToPushServer::default_instance_ = new NotifyLoginToPushServer();
  NotifyLogoutToPushServer::default_instance_ = new NotifyLogoutToPushServer();
  UserLoginInfo::default_instance_ = new UserLoginInfo();
  UserLogout::default_instance_ = new UserLogout();
  LoginClientInfo::default_instance_ = new LoginClientInfo();
  LoginForXboxOne::default_instance_ = new LoginForXboxOne();
  SocketOptionSetting::default_instance_ = new SocketOptionSetting();
  GetConnectGameServerPortIdResponse::default_instance_ = new GetConnectGameServerPortIdResponse();
  NotifyClientServerInfoToPushServer::default_instance_ = new NotifyClientServerInfoToPushServer();
  PushLoginUserInfo::default_instance_ = new PushLoginUserInfo();
  RequestCheckLogin::default_instance_ = new RequestCheckLogin();
  RequestCheckLoginResponse::default_instance_ = new RequestCheckLoginResponse();
  RequestGetPlayerConnectGameServer::default_instance_ = new RequestGetPlayerConnectGameServer();
  RequestGetPlayerConnectGameServerResponse::default_instance_ = new RequestGetPlayerConnectGameServerResponse();
  PlayerConnectServerInfo::default_instance_ = new PlayerConnectServerInfo();
  RequestGetConnectionCount::default_instance_ = new RequestGetConnectionCount();
  RequestGetConnectionCountResponse::default_instance_ = new RequestGetConnectionCountResponse();
  RequestDisconnectAllUser::default_instance_ = new RequestDisconnectAllUser();
  RequestDisconnectUser::default_instance_ = new RequestDisconnectUser();
  RequestGetServerSidePlayerStatus::default_instance_ = new RequestGetServerSidePlayerStatus();
  CellLimitData::default_instance_ = new CellLimitData();
  DateTime::default_instance_ = new DateTime();
  RequestGetPlayerCharacterList::default_instance_ = new RequestGetPlayerCharacterList();
  RequestGetPlayerCharacterListResponse::default_instance_ = new RequestGetPlayerCharacterListResponse();
  EmptyResponse::default_instance_->InitAsDefaultInstance();
  RequestWaitForUserLogin::default_instance_->InitAsDefaultInstance();
  RequestWaitForUserLoginResponse::default_instance_->InitAsDefaultInstance();
  PlayerStatusUploadConfig::default_instance_->InitAsDefaultInstance();
  AnnounceMessageData::default_instance_->InitAsDefaultInstance();
  AnnounceMessageDataList::default_instance_->InitAsDefaultInstance();
  RequestGetAnnounceMessageList::default_instance_->InitAsDefaultInstance();
  RequestGetAnnounceMessageListResponse::default_instance_->InitAsDefaultInstance();
  PlayerCharacterData::default_instance_->InitAsDefaultInstance();
  PlayerCharacterID::default_instance_->InitAsDefaultInstance();
  PlayerInfoUploadConfigPushMessage::default_instance_->InitAsDefaultInstance();
  RequestUpdateLoginPlayerCharacter::default_instance_->InitAsDefaultInstance();
  RequestUpdateLoginPlayerCharacterResponse::default_instance_->InitAsDefaultInstance();
  RequestUpdatePlayerStatus::default_instance_->InitAsDefaultInstance();
  RequestUpdatePlayerStatusResponse::default_instance_->InitAsDefaultInstance();
  RequestUpdatePlayerCharacter::default_instance_->InitAsDefaultInstance();
  RequestUpdatePlayerCharacterResponse::default_instance_->InitAsDefaultInstance();
  RequestGetPlayerCharacter::default_instance_->InitAsDefaultInstance();
  RequestGetPlayerCharacterResponse::default_instance_->InitAsDefaultInstance();
  RequestGetLoginPlayerCharacter::default_instance_->InitAsDefaultInstance();
  RequestGetLoginPlayerCharacterResponse::default_instance_->InitAsDefaultInstance();
  BloodMessageData::default_instance_->InitAsDefaultInstance();
  BloodMessageCellLimitData::default_instance_->InitAsDefaultInstance();
  RequestReentryBloodMessage::default_instance_->InitAsDefaultInstance();
  RequestReentryBloodMessageResponse::default_instance_->InitAsDefaultInstance();
  RequestCreateBloodMessage::default_instance_->InitAsDefaultInstance();
  RequestCreateBloodMessageResponse::default_instance_->InitAsDefaultInstance();
  RequestRemoveBloodMessage::default_instance_->InitAsDefaultInstance();
  RequestRemoveBloodMessageResponse::default_instance_->InitAsDefaultInstance();
  RequestGetBloodMessageList::default_instance_->InitAsDefaultInstance();
  RequestGetBloodMessageListResponse::default_instance_->InitAsDefaultInstance();
  RequestEvaluateBloodMessage::default_instance_->InitAsDefaultInstance();
  RequestEvaluateBloodMessageResponse::default_instance_->InitAsDefaultInstance();
  RequestGetBloodMessageEvaluation::default_instance_->InitAsDefaultInstance();
  RequestGetBloodMessageEvaluationResponse::default_instance_->InitAsDefaultInstance();
  PushRequestEvaluateBloodMessage::default_instance_->InitAsDefaultInstance();
  RequestGetAreaBloodMessageList::default_instance_->InitAsDefaultInstance();
  BloodstainInfo::default_instance_->InitAsDefaultInstance();
  RequestCreateBloodstain::default_instance_->InitAsDefaultInstance();
  RequestGetBloodstainList::default_instance_->InitAsDefaultInstance();
  RequestGetAreaBloodstainList::default_instance_->InitAsDefaultInstance();
  RequestGetBloodstainListResponse::default_instance_->InitAsDefaultInstance();
  RequestGetDeadingGhost::default_instance_->InitAsDefaultInstance();
  RequestGetDeadingGhostResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyBuyItem::default_instance_->InitAsDefaultInstance();
  RequestNotifyBuyItemResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyDeath::default_instance_->InitAsDefaultInstance();
  RequestNotifyDeathResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyDisconnectSession::default_instance_->InitAsDefaultInstance();
  RequestNotifyDisconnectSessionResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyJoinGuestPlayer::default_instance_->InitAsDefaultInstance();
  RequestNotifyJoinGuestPlayerResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyJoinSession::default_instance_->InitAsDefaultInstance();
  RequestNotifyJoinSessionResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyKillEnemy::default_instance_->InitAsDefaultInstance();
  RequestNotifyKillEnemy_Enemy_count::default_instance_->InitAsDefaultInstance();
  RequestNotifyKillEnemyResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyKillPlayer::default_instance_->InitAsDefaultInstance();
  RequestNotifyKillPlayerResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyLeaveGuestPlayer::default_instance_->InitAsDefaultInstance();
  RequestNotifyLeaveGuestPlayerResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyLeaveSession::default_instance_->InitAsDefaultInstance();
  RequestNotifyLeaveSessionResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyMirrorKnight::default_instance_->InitAsDefaultInstance();
  RequestNotifyMirrorKnightResponse::default_instance_->InitAsDefaultInstance();
  RequestNotifyOfflineDeathCount::default_instance_->InitAsDefaultInstance();
  RequestNotifyOfflineDeathCountResponse::default_instance_->InitAsDefaultInstance();
  MatchingParameter::default_instance_->InitAsDefaultInstance();
  PushRequestSummonSign::default_instance_->InitAsDefaultInstance();
  RequestSummonSign::default_instance_->InitAsDefaultInstance();
  RequestSummonSignResponse::default_instance_->InitAsDefaultInstance();
  PushRequestRejectSign::default_instance_->InitAsDefaultInstance();
  PushRequestRemoveSign::default_instance_->InitAsDefaultInstance();
  RequestCreateSign::default_instance_->InitAsDefaultInstance();
  RequestCreateSignResponse::default_instance_->InitAsDefaultInstance();
  RequestGetSignList::default_instance_->InitAsDefaultInstance();
  RequestGetSignListResponse::default_instance_->InitAsDefaultInstance();
  RequestRejectSign::default_instance_->InitAsDefaultInstance();
  RequestRejectSignResponse::default_instance_->InitAsDefaultInstance();
  RequestRemoveSign::default_instance_->InitAsDefaultInstance();
  RequestRemoveSignResponse::default_instance_->InitAsDefaultInstance();
  RequestUpdateSign::default_instance_->InitAsDefaultInstance();
  RequestUpdateSignResponse::default_instance_->InitAsDefaultInstance();
  SignCellInfo::default_instance_->InitAsDefaultInstance();
  SignInfo::default_instance_->InitAsDefaultInstance();
  SignData::default_instance_->InitAsDefaultInstance();
  RequestGetRightMatchingArea::default_instance_->InitAsDefaultInstance();
  RequestGetRightMatchingAreaResponse::default_instance_->InitAsDefaultInstance();
  RequestGetRightMatchingAreaResponse_Area_info::default_instance_->InitAsDefaultInstance();
  PushRequestRejectMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  PushRequestRemoveMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  PushRequestSummonMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  RequestCreateMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  RequestCreateMirrorKnightSignResponse::default_instance_->InitAsDefaultInstance();
  RequestGetMirrorKnightSignList::default_instance_->InitAsDefaultInstance();
  RequestGetMirrorKnightSignListResponse::default_instance_->InitAsDefaultInstance();
  RequestRejectMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  RequestRejectMirrorKnightSignResponse::default_instance_->InitAsDefaultInstance();
  RequestRemoveMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  RequestRemoveMirrorKnightSignResponse::default_instance_->InitAsDefaultInstance();
  RequestSummonMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  RequestSummonMirrorKnightSignResponse::default_instance_->InitAsDefaultInstance();
  RequestUpdateMirrorKnightSign::default_instance_->InitAsDefaultInstance();
  RequestUpdateMirrorKnightSignResponse::default_instance_->InitAsDefaultInstance();
  BreakInTargetData::default_instance_->InitAsDefaultInstance();
  PushRequestAllowBreakInTarget::default_instance_->InitAsDefaultInstance();
  PushRequestBreakInTarget::default_instance_->InitAsDefaultInstance();
  PushRequestRejectBreakInTarget::default_instance_->InitAsDefaultInstance();
  PushRequestRemoveBreakInTarget::default_instance_->InitAsDefaultInstance();
  RequestBreakInTarget::default_instance_->InitAsDefaultInstance();
  RequestBreakInTargetResponse::default_instance_->InitAsDefaultInstance();
  RequestGetBreakInTargetList::default_instance_->InitAsDefaultInstance();
  RequestGetBreakInTargetListResponse::default_instance_->InitAsDefaultInstance();
  RequestRejectBreakInTarget::default_instance_->InitAsDefaultInstance();
  RequestRejectBreakInTargetResponse::default_instance_->InitAsDefaultInstance();
  GhostData::default_instance_->InitAsDefaultInstance();
  RequestGetGhostDataList::default_instance_->InitAsDefaultInstance();
  RequestGetGhostDataListResponse::default_instance_->InitAsDefaultInstance();
  RequestCreateGhostData::default_instance_->InitAsDefaultInstance();
  RequestCreateGhostDataResponse::default_instance_->InitAsDefaultInstance();
  VisitorData::default_instance_->InitAsDefaultInstance();
  RequestGetVisitorList::default_instance_->InitAsDefaultInstance();
  RequestGetVisitorListResponse::default_instance_->InitAsDefaultInstance();
  PushRequestRemoveVisitor::default_instance_->InitAsDefaultInstance();
  RequestVisit::default_instance_->InitAsDefaultInstance();
  RequestVisitResponse::default_instance_->InitAsDefaultInstance();
  RequestRejectVisit::default_instance_->InitAsDefaultInstance();
  RequestRejectVisitResponse::default_instance_->InitAsDefaultInstance();
  PushRequestRejectVisit::default_instance_->InitAsDefaultInstance();
  PushRequestVisit::default_instance_->InitAsDefaultInstance();
  PushRequestNotifyRingBell::default_instance_->InitAsDefaultInstance();
  RequestNotifyRingBell::default_instance_->InitAsDefaultInstance();
  RequestNotifyRingBellResponse::default_instance_->InitAsDefaultInstance();
  RequestGetRegulationFile::default_instance_->InitAsDefaultInstance();
  RequestGetRegulationFileResponse::default_instance_->InitAsDefaultInstance();
  RegulationFileDiffData::default_instance_->InitAsDefaultInstance();
  RegulationFileMessage::default_instance_->InitAsDefaultInstance();
  RegulationFileUpdateMessage::default_instance_->InitAsDefaultInstance();
  RegulationFileUpdatePushMessage::default_instance_->InitAsDefaultInstance();
  RankingRecordCount::default_instance_->InitAsDefaultInstance();
  RankingRotationID::default_instance_->InitAsDefaultInstance();
  PowerStoneRankingData::default_instance_->InitAsDefaultInstance();
  PowerStoneRankingDataPack::default_instance_->InitAsDefaultInstance();
  RequestGetPowerStoneMyRanking::default_instance_->InitAsDefaultInstance();
  RequestGetPowerStoneMyRankingResponse::default_instance_->InitAsDefaultInstance();
  RequestGetPowerStoneRanking::default_instance_->InitAsDefaultInstance();
  RequestGetPowerStoneRankingResponse::default_instance_->InitAsDefaultInstance();
  RequestGetPowerStoneRankingRecordCount::default_instance_->InitAsDefaultInstance();
  RequestGetPowerStoneRankingRecordCountResponse::default_instance_->InitAsDefaultInstance();
  RequestRegisterPowerStoneData::default_instance_->InitAsDefaultInstance();
  RequestRegisterPowerStoneDataResponse::default_instance_->InitAsDefaultInstance();
  PushRequestAllowQuickMatch::default_instance_->InitAsDefaultInstance();
  PushRequestJoinQuickMatch::default_instance_->InitAsDefaultInstance();
  PushRequestRejectQuickMatch::default_instance_->InitAsDefaultInstance();
  PushRequestRemoveQuickMatch::default_instance_->InitAsDefaultInstance();
  QuickMatchData::default_instance_->InitAsDefaultInstance();
  RequestJoinQuickMatch::default_instance_->InitAsDefaultInstance();
  RequestJoinQuickMatchResponse::default_instance_->InitAsDefaultInstance();
  RequestRegisterQuickMatch::default_instance_->InitAsDefaultInstance();
  RequestRegisterQuickMatchResponse::default_instance_->InitAsDefaultInstance();
  RequestRejectQuickMatch::default_instance_->InitAsDefaultInstance();
  RequestRejectQuickMatchResponse::default_instance_->InitAsDefaultInstance();
  RequestSearchQuickMatch::default_instance_->InitAsDefaultInstance();
  RequestSearchQuickMatchResponse::default_instance_->InitAsDefaultInstance();
  RequestUnregisterQuickMatch::default_instance_->InitAsDefaultInstance();
  RequestUnregisterQuickMatchResponse::default_instance_->InitAsDefaultInstance();
  RequestUpdateQuickMatch::default_instance_->InitAsDefaultInstance();
  RequestUpdateQuickMatchResponse::default_instance_->InitAsDefaultInstance();
  RequestGetTotalDeathCount::default_instance_->InitAsDefaultInstance();
  RequestGetTotalDeathCountResponse::default_instance_->InitAsDefaultInstance();
  PushRequestHeader::default_instance_->InitAsDefaultInstance();
  ManagementTextMessage::default_instance_->InitAsDefaultInstance();
  NRLoggingMessage::default_instance_->InitAsDefaultInstance();
  NRLogUploadRequest::default_instance_->InitAsDefaultInstance();
  ServerPing::default_instance_->InitAsDefaultInstance();
  RequestBenchmarkThroughput::default_instance_->InitAsDefaultInstance();
  RequestBenchmarkThroughputResponse::default_instance_->InitAsDefaultInstance();
  RequestMeasureDownloadBandwidth::default_instance_->InitAsDefaultInstance();
  RequestMeasureDownloadBandwidthResponse::default_instance_->InitAsDefaultInstance();
  RequestMeasureUploadBandwidth::default_instance_->InitAsDefaultInstance();
  RequestMeasureUploadBandwidthResponse::default_instance_->InitAsDefaultInstance();
  RequestSendMessageToAllPlayers::default_instance_->InitAsDefaultInstance();
  RequestSendMessageToAllPlayersResponse::default_instance_->InitAsDefaultInstance();
  RequestSendMessageToPlayers::default_instance_->InitAsDefaultInstance();
  RequestSendMessageToPlayersResponse::default_instance_->InitAsDefaultInstance();
  RequestSendMessageToSelectLanguagePlayers::default_instance_->InitAsDefaultInstance();
  RequestSendMessageToSelectLanguagePlayersResponse::default_instance_->InitAsDefaultInstance();
  RequestSendMessageToPushClient::default_instance_->InitAsDefaultInstance();
  RequestSendPlayerList::default_instance_->InitAsDefaultInstance();
  NotifyLoginToPushServer::default_instance_->InitAsDefaultInstance();
  NotifyLogoutToPushServer::default_instance_->InitAsDefaultInstance();
  UserLoginInfo::default_instance_->InitAsDefaultInstance();
  UserLogout::default_instance_->InitAsDefaultInstance();
  LoginClientInfo::default_instance_->InitAsDefaultInstance();
  LoginForXboxOne::default_instance_->InitAsDefaultInstance();
  SocketOptionSetting::default_instance_->InitAsDefaultInstance();
  GetConnectGameServerPortIdResponse::default_instance_->InitAsDefaultInstance();
  NotifyClientServerInfoToPushServer::default_instance_->InitAsDefaultInstance();
  PushLoginUserInfo::default_instance_->InitAsDefaultInstance();
  RequestCheckLogin::default_instance_->InitAsDefaultInstance();
  RequestCheckLoginResponse::default_instance_->InitAsDefaultInstance();
  RequestGetPlayerConnectGameServer::default_instance_->InitAsDefaultInstance();
  RequestGetPlayerConnectGameServerResponse::default_instance_->InitAsDefaultInstance();
  PlayerConnectServerInfo::default_instance_->InitAsDefaultInstance();
  RequestGetConnectionCount::default_instance_->InitAsDefaultInstance();
  RequestGetConnectionCountResponse::default_instance_->InitAsDefaultInstance();
  RequestDisconnectAllUser::default_instance_->InitAsDefaultInstance();
  RequestDisconnectUser::default_instance_->InitAsDefaultInstance();
  RequestGetServerSidePlayerStatus::default_instance_->InitAsDefaultInstance();
  CellLimitData::default_instance_->InitAsDefaultInstance();
  DateTime::default_instance_->InitAsDefaultInstance();
  RequestGetPlayerCharacterList::default_instance_->InitAsDefaultInstance();
  RequestGetPlayerCharacterListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DS2_5fFrpg2RequestMessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto_once_);
void protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto_once_,
                 &protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DS2_5fFrpg2RequestMessage_2eproto {
  StaticDescriptorInitializer_DS2_5fFrpg2RequestMessage_2eproto() {
    protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
  }
} static_descriptor_initializer_DS2_5fFrpg2RequestMessage_2eproto_;
#endif
bool PushMessageId_IsValid(int value) {
  switch(value) {
    case 905:
    case 907:
    case 908:
    case 923:
    case 924:
    case 925:
    case 933:
    case 934:
    case 935:
    case 938:
    case 969:
    case 975:
    case 976:
    case 977:
    case 993:
    case 995:
    case 997:
    case 999:
    case 1019:
    case 1020:
    case 1021:
      return true;
    default:
      return false;
  }
}

bool SummonErrorId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool SignType_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

bool BreakInType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

bool VisitorType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool QuickMatchGameMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyResponse::EmptyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.EmptyResponse)
}

void EmptyResponse::InitAsDefaultInstance() {
}

EmptyResponse::EmptyResponse(const EmptyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.EmptyResponse)
}

void EmptyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyResponse::~EmptyResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.EmptyResponse)
  SharedDtor();
}

void EmptyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EmptyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EmptyResponse& EmptyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

EmptyResponse* EmptyResponse::default_instance_ = NULL;

EmptyResponse* EmptyResponse::New() const {
  return new EmptyResponse;
}

void EmptyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EmptyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.EmptyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.EmptyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.EmptyResponse)
  return false;
#undef DO_
}

void EmptyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.EmptyResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.EmptyResponse)
}

int EmptyResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EmptyResponse*>(&from));
}

void EmptyResponse::MergeFrom(const EmptyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EmptyResponse::CopyFrom(const EmptyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyResponse::IsInitialized() const {

  return true;
}

void EmptyResponse::Swap(EmptyResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EmptyResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.EmptyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestWaitForUserLogin::kSteamIdFieldNumber;
const int RequestWaitForUserLogin::kUnknown1FieldNumber;
const int RequestWaitForUserLogin::kUnknown2FieldNumber;
const int RequestWaitForUserLogin::kUnknown3FieldNumber;
const int RequestWaitForUserLogin::kUnknown4FieldNumber;
const int RequestWaitForUserLogin::kUnknown5FieldNumber;
const int RequestWaitForUserLogin::kUnknown6FieldNumber;
#endif  // !_MSC_VER

RequestWaitForUserLogin::RequestWaitForUserLogin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
}

void RequestWaitForUserLogin::InitAsDefaultInstance() {
}

RequestWaitForUserLogin::RequestWaitForUserLogin(const RequestWaitForUserLogin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
}

void RequestWaitForUserLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_1_ = 0u;
  unknown_2_ = 0u;
  unknown_3_ = 0u;
  unknown_4_ = 0u;
  unknown_5_ = 0u;
  unknown_6_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestWaitForUserLogin::~RequestWaitForUserLogin() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
  SharedDtor();
}

void RequestWaitForUserLogin::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestWaitForUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestWaitForUserLogin& RequestWaitForUserLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestWaitForUserLogin* RequestWaitForUserLogin::default_instance_ = NULL;

RequestWaitForUserLogin* RequestWaitForUserLogin::New() const {
  return new RequestWaitForUserLogin;
}

void RequestWaitForUserLogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestWaitForUserLogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(unknown_1_, unknown_6_);
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestWaitForUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string steam_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_1;
        break;
      }

      // required uint32 unknown_1 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_2;
        break;
      }

      // required uint32 unknown_2 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_3;
        break;
      }

      // required uint32 unknown_3 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_3_)));
          set_has_unknown_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_4;
        break;
      }

      // required uint32 unknown_4 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unknown_5;
        break;
      }

      // optional uint32 unknown_5 = 6;
      case 6: {
        if (tag == 48) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unknown_6;
        break;
      }

      // optional uint32 unknown_6 = 7;
      case 7: {
        if (tag == 56) {
         parse_unknown_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_6_)));
          set_has_unknown_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
  return false;
#undef DO_
}

void RequestWaitForUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
  // required string steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->steam_id(), output);
  }

  // required uint32 unknown_1 = 2;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_1(), output);
  }

  // required uint32 unknown_2 = 3;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unknown_2(), output);
  }

  // required uint32 unknown_3 = 4;
  if (has_unknown_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unknown_3(), output);
  }

  // required uint32 unknown_4 = 5;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unknown_4(), output);
  }

  // optional uint32 unknown_5 = 6;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unknown_5(), output);
  }

  // optional uint32 unknown_6 = 7;
  if (has_unknown_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unknown_6(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestWaitForUserLogin)
}

int RequestWaitForUserLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // required uint32 unknown_1 = 2;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

    // required uint32 unknown_2 = 3;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_2());
    }

    // required uint32 unknown_3 = 4;
    if (has_unknown_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_3());
    }

    // required uint32 unknown_4 = 5;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

    // optional uint32 unknown_5 = 6;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_5());
    }

    // optional uint32 unknown_6 = 7;
    if (has_unknown_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_6());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestWaitForUserLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestWaitForUserLogin*>(&from));
}

void RequestWaitForUserLogin::MergeFrom(const RequestWaitForUserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_unknown_3()) {
      set_unknown_3(from.unknown_3());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
    if (from.has_unknown_6()) {
      set_unknown_6(from.unknown_6());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestWaitForUserLogin::CopyFrom(const RequestWaitForUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestWaitForUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestWaitForUserLogin::Swap(RequestWaitForUserLogin* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(unknown_3_, other->unknown_3_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(unknown_6_, other->unknown_6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestWaitForUserLogin::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestWaitForUserLogin";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestWaitForUserLoginResponse::kSteamIdFieldNumber;
const int RequestWaitForUserLoginResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

RequestWaitForUserLoginResponse::RequestWaitForUserLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
}

void RequestWaitForUserLoginResponse::InitAsDefaultInstance() {
}

RequestWaitForUserLoginResponse::RequestWaitForUserLoginResponse(const RequestWaitForUserLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
}

void RequestWaitForUserLoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestWaitForUserLoginResponse::~RequestWaitForUserLoginResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
  SharedDtor();
}

void RequestWaitForUserLoginResponse::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestWaitForUserLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestWaitForUserLoginResponse& RequestWaitForUserLoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestWaitForUserLoginResponse* RequestWaitForUserLoginResponse::default_instance_ = NULL;

RequestWaitForUserLoginResponse* RequestWaitForUserLoginResponse::New() const {
  return new RequestWaitForUserLoginResponse;
}

void RequestWaitForUserLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
    player_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestWaitForUserLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string steam_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
  return false;
#undef DO_
}

void RequestWaitForUserLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
  // required string steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->steam_id(), output);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse)
}

int RequestWaitForUserLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // required uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestWaitForUserLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestWaitForUserLoginResponse*>(&from));
}

void RequestWaitForUserLoginResponse::MergeFrom(const RequestWaitForUserLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestWaitForUserLoginResponse::CopyFrom(const RequestWaitForUserLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestWaitForUserLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestWaitForUserLoginResponse::Swap(RequestWaitForUserLoginResponse* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestWaitForUserLoginResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestWaitForUserLoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStatusUploadConfig::kPlayerDataMaskFieldNumber;
const int PlayerStatusUploadConfig::kUploadIntervalFieldNumber;
#endif  // !_MSC_VER

PlayerStatusUploadConfig::PlayerStatusUploadConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
}

void PlayerStatusUploadConfig::InitAsDefaultInstance() {
}

PlayerStatusUploadConfig::PlayerStatusUploadConfig(const PlayerStatusUploadConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
}

void PlayerStatusUploadConfig::SharedCtor() {
  _cached_size_ = 0;
  upload_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStatusUploadConfig::~PlayerStatusUploadConfig() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
  SharedDtor();
}

void PlayerStatusUploadConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerStatusUploadConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerStatusUploadConfig& PlayerStatusUploadConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PlayerStatusUploadConfig* PlayerStatusUploadConfig::default_instance_ = NULL;

PlayerStatusUploadConfig* PlayerStatusUploadConfig::New() const {
  return new PlayerStatusUploadConfig;
}

void PlayerStatusUploadConfig::Clear() {
  upload_interval_ = 0u;
  player_data_mask_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerStatusUploadConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 player_data_mask = 1;
      case 1: {
        if (tag == 8) {
         parse_player_data_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_player_data_mask())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_data_mask())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_player_data_mask;
        if (input->ExpectTag(16)) goto parse_upload_interval;
        break;
      }

      // required uint32 upload_interval = 2;
      case 2: {
        if (tag == 16) {
         parse_upload_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_interval_)));
          set_has_upload_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
  return false;
#undef DO_
}

void PlayerStatusUploadConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
  // repeated uint32 player_data_mask = 1;
  for (int i = 0; i < this->player_data_mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->player_data_mask(i), output);
  }

  // required uint32 upload_interval = 2;
  if (has_upload_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upload_interval(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PlayerStatusUploadConfig)
}

int PlayerStatusUploadConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 upload_interval = 2;
    if (has_upload_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_interval());
    }

  }
  // repeated uint32 player_data_mask = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_data_mask_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_data_mask(i));
    }
    total_size += 1 * this->player_data_mask_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatusUploadConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerStatusUploadConfig*>(&from));
}

void PlayerStatusUploadConfig::MergeFrom(const PlayerStatusUploadConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_data_mask_.MergeFrom(from.player_data_mask_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_upload_interval()) {
      set_upload_interval(from.upload_interval());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerStatusUploadConfig::CopyFrom(const PlayerStatusUploadConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatusUploadConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PlayerStatusUploadConfig::Swap(PlayerStatusUploadConfig* other) {
  if (other != this) {
    player_data_mask_.Swap(&other->player_data_mask_);
    std::swap(upload_interval_, other->upload_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerStatusUploadConfig::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PlayerStatusUploadConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int AnnounceMessageData::kUnknown1FieldNumber;
const int AnnounceMessageData::kIndexFieldNumber;
const int AnnounceMessageData::kUnknown2FieldNumber;
const int AnnounceMessageData::kHeaderFieldNumber;
const int AnnounceMessageData::kMessageFieldNumber;
const int AnnounceMessageData::kDatetimeFieldNumber;
#endif  // !_MSC_VER

AnnounceMessageData::AnnounceMessageData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.AnnounceMessageData)
}

void AnnounceMessageData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  datetime_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(
      ::DS2_Frpg2PlayerData::DateTime::internal_default_instance());
#else
  datetime_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(&::DS2_Frpg2PlayerData::DateTime::default_instance());
#endif
}

AnnounceMessageData::AnnounceMessageData(const AnnounceMessageData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.AnnounceMessageData)
}

void AnnounceMessageData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unknown_1_ = 0u;
  index_ = 0u;
  unknown_2_ = 0u;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnounceMessageData::~AnnounceMessageData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.AnnounceMessageData)
  SharedDtor();
}

void AnnounceMessageData::SharedDtor() {
  if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete header_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete datetime_;
  }
}

void AnnounceMessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnnounceMessageData& AnnounceMessageData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

AnnounceMessageData* AnnounceMessageData::default_instance_ = NULL;

AnnounceMessageData* AnnounceMessageData::New() const {
  return new AnnounceMessageData;
}

void AnnounceMessageData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnnounceMessageData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(unknown_1_, index_);
    unknown_2_ = 0u;
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        header_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_datetime()) {
      if (datetime_ != NULL) datetime_->::DS2_Frpg2PlayerData::DateTime::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AnnounceMessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.AnnounceMessageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unknown_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_2;
        break;
      }

      // required uint32 unknown_2 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_header;
        break;
      }

      // required string header = 4;
      case 4: {
        if (tag == 34) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message;
        break;
      }

      // required string message = 5;
      case 5: {
        if (tag == 42) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_datetime;
        break;
      }

      // required .DS2_Frpg2PlayerData.DateTime datetime = 6;
      case 6: {
        if (tag == 50) {
         parse_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.AnnounceMessageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.AnnounceMessageData)
  return false;
#undef DO_
}

void AnnounceMessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.AnnounceMessageData)
  // required uint32 unknown_1 = 1;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unknown_1(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // required uint32 unknown_2 = 3;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unknown_2(), output);
  }

  // required string header = 4;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->header(), output);
  }

  // required string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  // required .DS2_Frpg2PlayerData.DateTime datetime = 6;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->datetime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.AnnounceMessageData)
}

int AnnounceMessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unknown_1 = 1;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 unknown_2 = 3;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_2());
    }

    // required string header = 4;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }

    // required string message = 5;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required .DS2_Frpg2PlayerData.DateTime datetime = 6;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datetime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceMessageData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnounceMessageData*>(&from));
}

void AnnounceMessageData::MergeFrom(const AnnounceMessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_datetime()) {
      mutable_datetime()->::DS2_Frpg2PlayerData::DateTime::MergeFrom(from.datetime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AnnounceMessageData::CopyFrom(const AnnounceMessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_datetime()) {
    if (!this->datetime().IsInitialized()) return false;
  }
  return true;
}

void AnnounceMessageData::Swap(AnnounceMessageData* other) {
  if (other != this) {
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(index_, other->index_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(header_, other->header_);
    std::swap(message_, other->message_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnnounceMessageData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.AnnounceMessageData";
}


// ===================================================================

#ifndef _MSC_VER
const int AnnounceMessageDataList::kItemsFieldNumber;
#endif  // !_MSC_VER

AnnounceMessageDataList::AnnounceMessageDataList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
}

void AnnounceMessageDataList::InitAsDefaultInstance() {
}

AnnounceMessageDataList::AnnounceMessageDataList(const AnnounceMessageDataList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
}

void AnnounceMessageDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnounceMessageDataList::~AnnounceMessageDataList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
  SharedDtor();
}

void AnnounceMessageDataList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AnnounceMessageDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnnounceMessageDataList& AnnounceMessageDataList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

AnnounceMessageDataList* AnnounceMessageDataList::default_instance_ = NULL;

AnnounceMessageDataList* AnnounceMessageDataList::New() const {
  return new AnnounceMessageDataList;
}

void AnnounceMessageDataList::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AnnounceMessageDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DS2_Frpg2RequestMessage.AnnounceMessageData items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
  return false;
#undef DO_
}

void AnnounceMessageDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
  // repeated .DS2_Frpg2RequestMessage.AnnounceMessageData items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->items(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.AnnounceMessageDataList)
}

int AnnounceMessageDataList::ByteSize() const {
  int total_size = 0;

  // repeated .DS2_Frpg2RequestMessage.AnnounceMessageData items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceMessageDataList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnounceMessageDataList*>(&from));
}

void AnnounceMessageDataList::MergeFrom(const AnnounceMessageDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AnnounceMessageDataList::CopyFrom(const AnnounceMessageDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessageDataList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void AnnounceMessageDataList::Swap(AnnounceMessageDataList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnnounceMessageDataList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.AnnounceMessageDataList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetAnnounceMessageList::kMaxEntriesFieldNumber;
const int RequestGetAnnounceMessageList::kUnknown1FieldNumber;
const int RequestGetAnnounceMessageList::kUnknown2FieldNumber;
#endif  // !_MSC_VER

RequestGetAnnounceMessageList::RequestGetAnnounceMessageList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
}

void RequestGetAnnounceMessageList::InitAsDefaultInstance() {
}

RequestGetAnnounceMessageList::RequestGetAnnounceMessageList(const RequestGetAnnounceMessageList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
}

void RequestGetAnnounceMessageList::SharedCtor() {
  _cached_size_ = 0;
  max_entries_ = 0u;
  unknown_1_ = 0u;
  unknown_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetAnnounceMessageList::~RequestGetAnnounceMessageList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
  SharedDtor();
}

void RequestGetAnnounceMessageList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetAnnounceMessageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetAnnounceMessageList& RequestGetAnnounceMessageList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetAnnounceMessageList* RequestGetAnnounceMessageList::default_instance_ = NULL;

RequestGetAnnounceMessageList* RequestGetAnnounceMessageList::New() const {
  return new RequestGetAnnounceMessageList;
}

void RequestGetAnnounceMessageList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetAnnounceMessageList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(max_entries_, unknown_2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetAnnounceMessageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_entries = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_entries_)));
          set_has_max_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_1;
        break;
      }

      // optional uint32 unknown_1 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_2;
        break;
      }

      // optional uint32 unknown_2 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
  return false;
#undef DO_
}

void RequestGetAnnounceMessageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
  // required uint32 max_entries = 1;
  if (has_max_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_entries(), output);
  }

  // optional uint32 unknown_1 = 2;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_1(), output);
  }

  // optional uint32 unknown_2 = 3;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unknown_2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList)
}

int RequestGetAnnounceMessageList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 max_entries = 1;
    if (has_max_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_entries());
    }

    // optional uint32 unknown_1 = 2;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

    // optional uint32 unknown_2 = 3;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetAnnounceMessageList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetAnnounceMessageList*>(&from));
}

void RequestGetAnnounceMessageList::MergeFrom(const RequestGetAnnounceMessageList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_entries()) {
      set_max_entries(from.max_entries());
    }
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetAnnounceMessageList::CopyFrom(const RequestGetAnnounceMessageList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetAnnounceMessageList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestGetAnnounceMessageList::Swap(RequestGetAnnounceMessageList* other) {
  if (other != this) {
    std::swap(max_entries_, other->max_entries_);
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetAnnounceMessageList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetAnnounceMessageList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetAnnounceMessageListResponse::kChangesFieldNumber;
const int RequestGetAnnounceMessageListResponse::kNoticesFieldNumber;
#endif  // !_MSC_VER

RequestGetAnnounceMessageListResponse::RequestGetAnnounceMessageListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
}

void RequestGetAnnounceMessageListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changes_ = const_cast< ::DS2_Frpg2RequestMessage::AnnounceMessageDataList*>(
      ::DS2_Frpg2RequestMessage::AnnounceMessageDataList::internal_default_instance());
#else
  changes_ = const_cast< ::DS2_Frpg2RequestMessage::AnnounceMessageDataList*>(&::DS2_Frpg2RequestMessage::AnnounceMessageDataList::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notices_ = const_cast< ::DS2_Frpg2RequestMessage::AnnounceMessageDataList*>(
      ::DS2_Frpg2RequestMessage::AnnounceMessageDataList::internal_default_instance());
#else
  notices_ = const_cast< ::DS2_Frpg2RequestMessage::AnnounceMessageDataList*>(&::DS2_Frpg2RequestMessage::AnnounceMessageDataList::default_instance());
#endif
}

RequestGetAnnounceMessageListResponse::RequestGetAnnounceMessageListResponse(const RequestGetAnnounceMessageListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
}

void RequestGetAnnounceMessageListResponse::SharedCtor() {
  _cached_size_ = 0;
  changes_ = NULL;
  notices_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetAnnounceMessageListResponse::~RequestGetAnnounceMessageListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
  SharedDtor();
}

void RequestGetAnnounceMessageListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete changes_;
    delete notices_;
  }
}

void RequestGetAnnounceMessageListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetAnnounceMessageListResponse& RequestGetAnnounceMessageListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetAnnounceMessageListResponse* RequestGetAnnounceMessageListResponse::default_instance_ = NULL;

RequestGetAnnounceMessageListResponse* RequestGetAnnounceMessageListResponse::New() const {
  return new RequestGetAnnounceMessageListResponse;
}

void RequestGetAnnounceMessageListResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_changes()) {
      if (changes_ != NULL) changes_->::DS2_Frpg2RequestMessage::AnnounceMessageDataList::Clear();
    }
    if (has_notices()) {
      if (notices_ != NULL) notices_->::DS2_Frpg2RequestMessage::AnnounceMessageDataList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetAnnounceMessageListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.AnnounceMessageDataList changes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notices;
        break;
      }

      // required .DS2_Frpg2RequestMessage.AnnounceMessageDataList notices = 2;
      case 2: {
        if (tag == 18) {
         parse_notices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
  return false;
#undef DO_
}

void RequestGetAnnounceMessageListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
  // required .DS2_Frpg2RequestMessage.AnnounceMessageDataList changes = 1;
  if (has_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->changes(), output);
  }

  // required .DS2_Frpg2RequestMessage.AnnounceMessageDataList notices = 2;
  if (has_notices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->notices(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse)
}

int RequestGetAnnounceMessageListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.AnnounceMessageDataList changes = 1;
    if (has_changes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changes());
    }

    // required .DS2_Frpg2RequestMessage.AnnounceMessageDataList notices = 2;
    if (has_notices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notices());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetAnnounceMessageListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetAnnounceMessageListResponse*>(&from));
}

void RequestGetAnnounceMessageListResponse::MergeFrom(const RequestGetAnnounceMessageListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changes()) {
      mutable_changes()->::DS2_Frpg2RequestMessage::AnnounceMessageDataList::MergeFrom(from.changes());
    }
    if (from.has_notices()) {
      mutable_notices()->::DS2_Frpg2RequestMessage::AnnounceMessageDataList::MergeFrom(from.notices());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetAnnounceMessageListResponse::CopyFrom(const RequestGetAnnounceMessageListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetAnnounceMessageListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_changes()) {
    if (!this->changes().IsInitialized()) return false;
  }
  if (has_notices()) {
    if (!this->notices().IsInitialized()) return false;
  }
  return true;
}

void RequestGetAnnounceMessageListResponse::Swap(RequestGetAnnounceMessageListResponse* other) {
  if (other != this) {
    std::swap(changes_, other->changes_);
    std::swap(notices_, other->notices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetAnnounceMessageListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetAnnounceMessageListResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerCharacterData::PlayerCharacterData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PlayerCharacterData)
}

void PlayerCharacterData::InitAsDefaultInstance() {
}

PlayerCharacterData::PlayerCharacterData(const PlayerCharacterData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PlayerCharacterData)
}

void PlayerCharacterData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCharacterData::~PlayerCharacterData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PlayerCharacterData)
  SharedDtor();
}

void PlayerCharacterData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerCharacterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerCharacterData& PlayerCharacterData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PlayerCharacterData* PlayerCharacterData::default_instance_ = NULL;

PlayerCharacterData* PlayerCharacterData::New() const {
  return new PlayerCharacterData;
}

void PlayerCharacterData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerCharacterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PlayerCharacterData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PlayerCharacterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PlayerCharacterData)
  return false;
#undef DO_
}

void PlayerCharacterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PlayerCharacterData)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PlayerCharacterData)
}

int PlayerCharacterData::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCharacterData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerCharacterData*>(&from));
}

void PlayerCharacterData::MergeFrom(const PlayerCharacterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerCharacterData::CopyFrom(const PlayerCharacterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCharacterData::IsInitialized() const {

  return true;
}

void PlayerCharacterData::Swap(PlayerCharacterData* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerCharacterData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PlayerCharacterData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerCharacterID::PlayerCharacterID()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PlayerCharacterID)
}

void PlayerCharacterID::InitAsDefaultInstance() {
}

PlayerCharacterID::PlayerCharacterID(const PlayerCharacterID& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PlayerCharacterID)
}

void PlayerCharacterID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCharacterID::~PlayerCharacterID() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PlayerCharacterID)
  SharedDtor();
}

void PlayerCharacterID::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerCharacterID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerCharacterID& PlayerCharacterID::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PlayerCharacterID* PlayerCharacterID::default_instance_ = NULL;

PlayerCharacterID* PlayerCharacterID::New() const {
  return new PlayerCharacterID;
}

void PlayerCharacterID::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerCharacterID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PlayerCharacterID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PlayerCharacterID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PlayerCharacterID)
  return false;
#undef DO_
}

void PlayerCharacterID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PlayerCharacterID)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PlayerCharacterID)
}

int PlayerCharacterID::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCharacterID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerCharacterID*>(&from));
}

void PlayerCharacterID::MergeFrom(const PlayerCharacterID& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerCharacterID::CopyFrom(const PlayerCharacterID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCharacterID::IsInitialized() const {

  return true;
}

void PlayerCharacterID::Swap(PlayerCharacterID* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerCharacterID::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PlayerCharacterID";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoUploadConfigPushMessage::kPushMessageIdFieldNumber;
const int PlayerInfoUploadConfigPushMessage::kConfigFieldNumber;
const int PlayerInfoUploadConfigPushMessage::kPlayerCharacterUpdateSendDelayFieldNumber;
const int PlayerInfoUploadConfigPushMessage::kPlayerStatusSendDelayFieldNumber;
#endif  // !_MSC_VER

PlayerInfoUploadConfigPushMessage::PlayerInfoUploadConfigPushMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
}

void PlayerInfoUploadConfigPushMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::DS2_Frpg2RequestMessage::PlayerStatusUploadConfig*>(
      ::DS2_Frpg2RequestMessage::PlayerStatusUploadConfig::internal_default_instance());
#else
  config_ = const_cast< ::DS2_Frpg2RequestMessage::PlayerStatusUploadConfig*>(&::DS2_Frpg2RequestMessage::PlayerStatusUploadConfig::default_instance());
#endif
}

PlayerInfoUploadConfigPushMessage::PlayerInfoUploadConfigPushMessage(const PlayerInfoUploadConfigPushMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
}

void PlayerInfoUploadConfigPushMessage::SharedCtor() {
  _cached_size_ = 0;
  push_message_id_ = 925;
  config_ = NULL;
  player_character_update_send_delay_ = 0u;
  player_status_send_delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoUploadConfigPushMessage::~PlayerInfoUploadConfigPushMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
  SharedDtor();
}

void PlayerInfoUploadConfigPushMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_;
  }
}

void PlayerInfoUploadConfigPushMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerInfoUploadConfigPushMessage& PlayerInfoUploadConfigPushMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PlayerInfoUploadConfigPushMessage* PlayerInfoUploadConfigPushMessage::default_instance_ = NULL;

PlayerInfoUploadConfigPushMessage* PlayerInfoUploadConfigPushMessage::New() const {
  return new PlayerInfoUploadConfigPushMessage;
}

void PlayerInfoUploadConfigPushMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerInfoUploadConfigPushMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(player_character_update_send_delay_, player_status_send_delay_);
    push_message_id_ = 925;
    if (has_config()) {
      if (config_ != NULL) config_->::DS2_Frpg2RequestMessage::PlayerStatusUploadConfig::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerInfoUploadConfigPushMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // required .DS2_Frpg2RequestMessage.PlayerStatusUploadConfig config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_character_update_send_delay;
        break;
      }

      // required uint32 player_character_update_send_delay = 3;
      case 3: {
        if (tag == 24) {
         parse_player_character_update_send_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_character_update_send_delay_)));
          set_has_player_character_update_send_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_status_send_delay;
        break;
      }

      // required uint32 player_status_send_delay = 4;
      case 4: {
        if (tag == 32) {
         parse_player_status_send_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_status_send_delay_)));
          set_has_player_status_send_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
  return false;
#undef DO_
}

void PlayerInfoUploadConfigPushMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.PlayerStatusUploadConfig config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->config(), output);
  }

  // required uint32 player_character_update_send_delay = 3;
  if (has_player_character_update_send_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_character_update_send_delay(), output);
  }

  // required uint32 player_status_send_delay = 4;
  if (has_player_status_send_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_status_send_delay(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage)
}

int PlayerInfoUploadConfigPushMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required .DS2_Frpg2RequestMessage.PlayerStatusUploadConfig config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // required uint32 player_character_update_send_delay = 3;
    if (has_player_character_update_send_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_character_update_send_delay());
    }

    // required uint32 player_status_send_delay = 4;
    if (has_player_status_send_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_status_send_delay());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoUploadConfigPushMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoUploadConfigPushMessage*>(&from));
}

void PlayerInfoUploadConfigPushMessage::MergeFrom(const PlayerInfoUploadConfigPushMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_config()) {
      mutable_config()->::DS2_Frpg2RequestMessage::PlayerStatusUploadConfig::MergeFrom(from.config());
    }
    if (from.has_player_character_update_send_delay()) {
      set_player_character_update_send_delay(from.player_character_update_send_delay());
    }
    if (from.has_player_status_send_delay()) {
      set_player_status_send_delay(from.player_status_send_delay());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerInfoUploadConfigPushMessage::CopyFrom(const PlayerInfoUploadConfigPushMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoUploadConfigPushMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoUploadConfigPushMessage::Swap(PlayerInfoUploadConfigPushMessage* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(config_, other->config_);
    std::swap(player_character_update_send_delay_, other->player_character_update_send_delay_);
    std::swap(player_status_send_delay_, other->player_status_send_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerInfoUploadConfigPushMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PlayerInfoUploadConfigPushMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateLoginPlayerCharacter::kCharacterIdFieldNumber;
const int RequestUpdateLoginPlayerCharacter::kLocalCharacterIdsFieldNumber;
#endif  // !_MSC_VER

RequestUpdateLoginPlayerCharacter::RequestUpdateLoginPlayerCharacter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
}

void RequestUpdateLoginPlayerCharacter::InitAsDefaultInstance() {
}

RequestUpdateLoginPlayerCharacter::RequestUpdateLoginPlayerCharacter(const RequestUpdateLoginPlayerCharacter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
}

void RequestUpdateLoginPlayerCharacter::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateLoginPlayerCharacter::~RequestUpdateLoginPlayerCharacter() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
  SharedDtor();
}

void RequestUpdateLoginPlayerCharacter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateLoginPlayerCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateLoginPlayerCharacter& RequestUpdateLoginPlayerCharacter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateLoginPlayerCharacter* RequestUpdateLoginPlayerCharacter::default_instance_ = NULL;

RequestUpdateLoginPlayerCharacter* RequestUpdateLoginPlayerCharacter::New() const {
  return new RequestUpdateLoginPlayerCharacter;
}

void RequestUpdateLoginPlayerCharacter::Clear() {
  character_id_ = 0u;
  local_character_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateLoginPlayerCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_local_character_ids;
        break;
      }

      // repeated uint32 local_character_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_local_character_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_local_character_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_local_character_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_local_character_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
  return false;
#undef DO_
}

void RequestUpdateLoginPlayerCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  // repeated uint32 local_character_ids = 2;
  for (int i = 0; i < this->local_character_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->local_character_ids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter)
}

int RequestUpdateLoginPlayerCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

  }
  // repeated uint32 local_character_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->local_character_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->local_character_ids(i));
    }
    total_size += 1 * this->local_character_ids_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateLoginPlayerCharacter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateLoginPlayerCharacter*>(&from));
}

void RequestUpdateLoginPlayerCharacter::MergeFrom(const RequestUpdateLoginPlayerCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  local_character_ids_.MergeFrom(from.local_character_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateLoginPlayerCharacter::CopyFrom(const RequestUpdateLoginPlayerCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateLoginPlayerCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestUpdateLoginPlayerCharacter::Swap(RequestUpdateLoginPlayerCharacter* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    local_character_ids_.Swap(&other->local_character_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateLoginPlayerCharacter::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacter";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateLoginPlayerCharacterResponse::kCharacterIdFieldNumber;
#endif  // !_MSC_VER

RequestUpdateLoginPlayerCharacterResponse::RequestUpdateLoginPlayerCharacterResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
}

void RequestUpdateLoginPlayerCharacterResponse::InitAsDefaultInstance() {
}

RequestUpdateLoginPlayerCharacterResponse::RequestUpdateLoginPlayerCharacterResponse(const RequestUpdateLoginPlayerCharacterResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
}

void RequestUpdateLoginPlayerCharacterResponse::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateLoginPlayerCharacterResponse::~RequestUpdateLoginPlayerCharacterResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
  SharedDtor();
}

void RequestUpdateLoginPlayerCharacterResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateLoginPlayerCharacterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateLoginPlayerCharacterResponse& RequestUpdateLoginPlayerCharacterResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateLoginPlayerCharacterResponse* RequestUpdateLoginPlayerCharacterResponse::default_instance_ = NULL;

RequestUpdateLoginPlayerCharacterResponse* RequestUpdateLoginPlayerCharacterResponse::New() const {
  return new RequestUpdateLoginPlayerCharacterResponse;
}

void RequestUpdateLoginPlayerCharacterResponse::Clear() {
  character_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateLoginPlayerCharacterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
  return false;
#undef DO_
}

void RequestUpdateLoginPlayerCharacterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse)
}

int RequestUpdateLoginPlayerCharacterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateLoginPlayerCharacterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateLoginPlayerCharacterResponse*>(&from));
}

void RequestUpdateLoginPlayerCharacterResponse::MergeFrom(const RequestUpdateLoginPlayerCharacterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateLoginPlayerCharacterResponse::CopyFrom(const RequestUpdateLoginPlayerCharacterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateLoginPlayerCharacterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestUpdateLoginPlayerCharacterResponse::Swap(RequestUpdateLoginPlayerCharacterResponse* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateLoginPlayerCharacterResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateLoginPlayerCharacterResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdatePlayerStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

RequestUpdatePlayerStatus::RequestUpdatePlayerStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
}

void RequestUpdatePlayerStatus::InitAsDefaultInstance() {
}

RequestUpdatePlayerStatus::RequestUpdatePlayerStatus(const RequestUpdatePlayerStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
}

void RequestUpdatePlayerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdatePlayerStatus::~RequestUpdatePlayerStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
  SharedDtor();
}

void RequestUpdatePlayerStatus::SharedDtor() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdatePlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdatePlayerStatus& RequestUpdatePlayerStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdatePlayerStatus* RequestUpdatePlayerStatus::default_instance_ = NULL;

RequestUpdatePlayerStatus* RequestUpdatePlayerStatus::New() const {
  return new RequestUpdatePlayerStatus;
}

void RequestUpdatePlayerStatus::Clear() {
  if (has_status()) {
    if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      status_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdatePlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
  return false;
#undef DO_
}

void RequestUpdatePlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
  // required bytes status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus)
}

int RequestUpdatePlayerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdatePlayerStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdatePlayerStatus*>(&from));
}

void RequestUpdatePlayerStatus::MergeFrom(const RequestUpdatePlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdatePlayerStatus::CopyFrom(const RequestUpdatePlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdatePlayerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestUpdatePlayerStatus::Swap(RequestUpdatePlayerStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdatePlayerStatus::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdatePlayerStatus";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestUpdatePlayerStatusResponse::RequestUpdatePlayerStatusResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
}

void RequestUpdatePlayerStatusResponse::InitAsDefaultInstance() {
}

RequestUpdatePlayerStatusResponse::RequestUpdatePlayerStatusResponse(const RequestUpdatePlayerStatusResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
}

void RequestUpdatePlayerStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdatePlayerStatusResponse::~RequestUpdatePlayerStatusResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
  SharedDtor();
}

void RequestUpdatePlayerStatusResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdatePlayerStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdatePlayerStatusResponse& RequestUpdatePlayerStatusResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdatePlayerStatusResponse* RequestUpdatePlayerStatusResponse::default_instance_ = NULL;

RequestUpdatePlayerStatusResponse* RequestUpdatePlayerStatusResponse::New() const {
  return new RequestUpdatePlayerStatusResponse;
}

void RequestUpdatePlayerStatusResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdatePlayerStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
  return false;
#undef DO_
}

void RequestUpdatePlayerStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse)
}

int RequestUpdatePlayerStatusResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdatePlayerStatusResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdatePlayerStatusResponse*>(&from));
}

void RequestUpdatePlayerStatusResponse::MergeFrom(const RequestUpdatePlayerStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdatePlayerStatusResponse::CopyFrom(const RequestUpdatePlayerStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdatePlayerStatusResponse::IsInitialized() const {

  return true;
}

void RequestUpdatePlayerStatusResponse::Swap(RequestUpdatePlayerStatusResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdatePlayerStatusResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdatePlayerStatusResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdatePlayerCharacter::kCharacterIdFieldNumber;
const int RequestUpdatePlayerCharacter::kCharacterDataFieldNumber;
#endif  // !_MSC_VER

RequestUpdatePlayerCharacter::RequestUpdatePlayerCharacter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
}

void RequestUpdatePlayerCharacter::InitAsDefaultInstance() {
}

RequestUpdatePlayerCharacter::RequestUpdatePlayerCharacter(const RequestUpdatePlayerCharacter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
}

void RequestUpdatePlayerCharacter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  character_id_ = 0u;
  character_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdatePlayerCharacter::~RequestUpdatePlayerCharacter() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
  SharedDtor();
}

void RequestUpdatePlayerCharacter::SharedDtor() {
  if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete character_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdatePlayerCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdatePlayerCharacter& RequestUpdatePlayerCharacter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdatePlayerCharacter* RequestUpdatePlayerCharacter::default_instance_ = NULL;

RequestUpdatePlayerCharacter* RequestUpdatePlayerCharacter::New() const {
  return new RequestUpdatePlayerCharacter;
}

void RequestUpdatePlayerCharacter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    character_id_ = 0u;
    if (has_character_data()) {
      if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        character_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdatePlayerCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_character_data;
        break;
      }

      // required bytes character_data = 2;
      case 2: {
        if (tag == 18) {
         parse_character_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_character_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
  return false;
#undef DO_
}

void RequestUpdatePlayerCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  // required bytes character_data = 2;
  if (has_character_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->character_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter)
}

int RequestUpdatePlayerCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required bytes character_data = 2;
    if (has_character_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->character_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdatePlayerCharacter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdatePlayerCharacter*>(&from));
}

void RequestUpdatePlayerCharacter::MergeFrom(const RequestUpdatePlayerCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_character_data()) {
      set_character_data(from.character_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdatePlayerCharacter::CopyFrom(const RequestUpdatePlayerCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdatePlayerCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestUpdatePlayerCharacter::Swap(RequestUpdatePlayerCharacter* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(character_data_, other->character_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdatePlayerCharacter::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacter";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestUpdatePlayerCharacterResponse::RequestUpdatePlayerCharacterResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
}

void RequestUpdatePlayerCharacterResponse::InitAsDefaultInstance() {
}

RequestUpdatePlayerCharacterResponse::RequestUpdatePlayerCharacterResponse(const RequestUpdatePlayerCharacterResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
}

void RequestUpdatePlayerCharacterResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdatePlayerCharacterResponse::~RequestUpdatePlayerCharacterResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
  SharedDtor();
}

void RequestUpdatePlayerCharacterResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdatePlayerCharacterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdatePlayerCharacterResponse& RequestUpdatePlayerCharacterResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdatePlayerCharacterResponse* RequestUpdatePlayerCharacterResponse::default_instance_ = NULL;

RequestUpdatePlayerCharacterResponse* RequestUpdatePlayerCharacterResponse::New() const {
  return new RequestUpdatePlayerCharacterResponse;
}

void RequestUpdatePlayerCharacterResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdatePlayerCharacterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
  return false;
#undef DO_
}

void RequestUpdatePlayerCharacterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse)
}

int RequestUpdatePlayerCharacterResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdatePlayerCharacterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdatePlayerCharacterResponse*>(&from));
}

void RequestUpdatePlayerCharacterResponse::MergeFrom(const RequestUpdatePlayerCharacterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdatePlayerCharacterResponse::CopyFrom(const RequestUpdatePlayerCharacterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdatePlayerCharacterResponse::IsInitialized() const {

  return true;
}

void RequestUpdatePlayerCharacterResponse::Swap(RequestUpdatePlayerCharacterResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdatePlayerCharacterResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdatePlayerCharacterResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPlayerCharacter::kPlayerIdFieldNumber;
const int RequestGetPlayerCharacter::kCharacterIdFieldNumber;
#endif  // !_MSC_VER

RequestGetPlayerCharacter::RequestGetPlayerCharacter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
}

void RequestGetPlayerCharacter::InitAsDefaultInstance() {
}

RequestGetPlayerCharacter::RequestGetPlayerCharacter(const RequestGetPlayerCharacter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
}

void RequestGetPlayerCharacter::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  character_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPlayerCharacter::~RequestGetPlayerCharacter() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
  SharedDtor();
}

void RequestGetPlayerCharacter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPlayerCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPlayerCharacter& RequestGetPlayerCharacter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPlayerCharacter* RequestGetPlayerCharacter::default_instance_ = NULL;

RequestGetPlayerCharacter* RequestGetPlayerCharacter::New() const {
  return new RequestGetPlayerCharacter;
}

void RequestGetPlayerCharacter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetPlayerCharacter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, character_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPlayerCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 2;
      case 2: {
        if (tag == 16) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
  return false;
#undef DO_
}

void RequestGetPlayerCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->character_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPlayerCharacter)
}

int RequestGetPlayerCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 character_id = 2;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPlayerCharacter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPlayerCharacter*>(&from));
}

void RequestGetPlayerCharacter::MergeFrom(const RequestGetPlayerCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPlayerCharacter::CopyFrom(const RequestGetPlayerCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPlayerCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestGetPlayerCharacter::Swap(RequestGetPlayerCharacter* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(character_id_, other->character_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPlayerCharacter::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPlayerCharacter";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPlayerCharacterResponse::kPlayerIdFieldNumber;
const int RequestGetPlayerCharacterResponse::kCharacterIdFieldNumber;
const int RequestGetPlayerCharacterResponse::kCharacterDataFieldNumber;
#endif  // !_MSC_VER

RequestGetPlayerCharacterResponse::RequestGetPlayerCharacterResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
}

void RequestGetPlayerCharacterResponse::InitAsDefaultInstance() {
}

RequestGetPlayerCharacterResponse::RequestGetPlayerCharacterResponse(const RequestGetPlayerCharacterResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
}

void RequestGetPlayerCharacterResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  character_id_ = 0u;
  character_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPlayerCharacterResponse::~RequestGetPlayerCharacterResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
  SharedDtor();
}

void RequestGetPlayerCharacterResponse::SharedDtor() {
  if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete character_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPlayerCharacterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPlayerCharacterResponse& RequestGetPlayerCharacterResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPlayerCharacterResponse* RequestGetPlayerCharacterResponse::default_instance_ = NULL;

RequestGetPlayerCharacterResponse* RequestGetPlayerCharacterResponse::New() const {
  return new RequestGetPlayerCharacterResponse;
}

void RequestGetPlayerCharacterResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetPlayerCharacterResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(player_id_, character_id_);
    if (has_character_data()) {
      if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        character_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPlayerCharacterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 2;
      case 2: {
        if (tag == 16) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_character_data;
        break;
      }

      // required bytes character_data = 3;
      case 3: {
        if (tag == 26) {
         parse_character_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_character_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
  return false;
#undef DO_
}

void RequestGetPlayerCharacterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->character_id(), output);
  }

  // required bytes character_data = 3;
  if (has_character_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->character_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse)
}

int RequestGetPlayerCharacterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 character_id = 2;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required bytes character_data = 3;
    if (has_character_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->character_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPlayerCharacterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPlayerCharacterResponse*>(&from));
}

void RequestGetPlayerCharacterResponse::MergeFrom(const RequestGetPlayerCharacterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_character_data()) {
      set_character_data(from.character_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPlayerCharacterResponse::CopyFrom(const RequestGetPlayerCharacterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPlayerCharacterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestGetPlayerCharacterResponse::Swap(RequestGetPlayerCharacterResponse* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(character_id_, other->character_id_);
    std::swap(character_data_, other->character_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPlayerCharacterResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPlayerCharacterResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetLoginPlayerCharacter::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

RequestGetLoginPlayerCharacter::RequestGetLoginPlayerCharacter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
}

void RequestGetLoginPlayerCharacter::InitAsDefaultInstance() {
}

RequestGetLoginPlayerCharacter::RequestGetLoginPlayerCharacter(const RequestGetLoginPlayerCharacter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
}

void RequestGetLoginPlayerCharacter::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetLoginPlayerCharacter::~RequestGetLoginPlayerCharacter() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
  SharedDtor();
}

void RequestGetLoginPlayerCharacter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetLoginPlayerCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetLoginPlayerCharacter& RequestGetLoginPlayerCharacter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetLoginPlayerCharacter* RequestGetLoginPlayerCharacter::default_instance_ = NULL;

RequestGetLoginPlayerCharacter* RequestGetLoginPlayerCharacter::New() const {
  return new RequestGetLoginPlayerCharacter;
}

void RequestGetLoginPlayerCharacter::Clear() {
  player_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetLoginPlayerCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
  return false;
#undef DO_
}

void RequestGetLoginPlayerCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
  // required int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter)
}

int RequestGetLoginPlayerCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetLoginPlayerCharacter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetLoginPlayerCharacter*>(&from));
}

void RequestGetLoginPlayerCharacter::MergeFrom(const RequestGetLoginPlayerCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetLoginPlayerCharacter::CopyFrom(const RequestGetLoginPlayerCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetLoginPlayerCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestGetLoginPlayerCharacter::Swap(RequestGetLoginPlayerCharacter* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetLoginPlayerCharacter::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacter";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetLoginPlayerCharacterResponse::kPlayerIdFieldNumber;
const int RequestGetLoginPlayerCharacterResponse::kCharacterIdFieldNumber;
const int RequestGetLoginPlayerCharacterResponse::kCharacterDataFieldNumber;
#endif  // !_MSC_VER

RequestGetLoginPlayerCharacterResponse::RequestGetLoginPlayerCharacterResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
}

void RequestGetLoginPlayerCharacterResponse::InitAsDefaultInstance() {
}

RequestGetLoginPlayerCharacterResponse::RequestGetLoginPlayerCharacterResponse(const RequestGetLoginPlayerCharacterResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
}

void RequestGetLoginPlayerCharacterResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  character_id_ = 0u;
  character_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetLoginPlayerCharacterResponse::~RequestGetLoginPlayerCharacterResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
  SharedDtor();
}

void RequestGetLoginPlayerCharacterResponse::SharedDtor() {
  if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete character_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetLoginPlayerCharacterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetLoginPlayerCharacterResponse& RequestGetLoginPlayerCharacterResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetLoginPlayerCharacterResponse* RequestGetLoginPlayerCharacterResponse::default_instance_ = NULL;

RequestGetLoginPlayerCharacterResponse* RequestGetLoginPlayerCharacterResponse::New() const {
  return new RequestGetLoginPlayerCharacterResponse;
}

void RequestGetLoginPlayerCharacterResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    player_id_ = GOOGLE_LONGLONG(0);
    character_id_ = 0u;
    if (has_character_data()) {
      if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        character_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetLoginPlayerCharacterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 2;
      case 2: {
        if (tag == 16) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_character_data;
        break;
      }

      // required bytes character_data = 3;
      case 3: {
        if (tag == 26) {
         parse_character_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_character_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
  return false;
#undef DO_
}

void RequestGetLoginPlayerCharacterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
  // required int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->character_id(), output);
  }

  // required bytes character_data = 3;
  if (has_character_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->character_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse)
}

int RequestGetLoginPlayerCharacterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required uint32 character_id = 2;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required bytes character_data = 3;
    if (has_character_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->character_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetLoginPlayerCharacterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetLoginPlayerCharacterResponse*>(&from));
}

void RequestGetLoginPlayerCharacterResponse::MergeFrom(const RequestGetLoginPlayerCharacterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_character_data()) {
      set_character_data(from.character_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetLoginPlayerCharacterResponse::CopyFrom(const RequestGetLoginPlayerCharacterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetLoginPlayerCharacterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestGetLoginPlayerCharacterResponse::Swap(RequestGetLoginPlayerCharacterResponse* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(character_id_, other->character_id_);
    std::swap(character_data_, other->character_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetLoginPlayerCharacterResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetLoginPlayerCharacterResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BloodMessageData::kPlayerIdFieldNumber;
const int BloodMessageData::kCharacterIdFieldNumber;
const int BloodMessageData::kMessageIdFieldNumber;
const int BloodMessageData::kGoodFieldNumber;
const int BloodMessageData::kMessageDataFieldNumber;
const int BloodMessageData::kPlayerSteamIdFieldNumber;
const int BloodMessageData::kCellIdFieldNumber;
const int BloodMessageData::kUnknown8FieldNumber;
#endif  // !_MSC_VER

BloodMessageData::BloodMessageData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.BloodMessageData)
}

void BloodMessageData::InitAsDefaultInstance() {
}

BloodMessageData::BloodMessageData(const BloodMessageData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.BloodMessageData)
}

void BloodMessageData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  character_id_ = 0u;
  message_id_ = 0u;
  good_ = 0u;
  message_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_id_ = 0u;
  unknown_8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloodMessageData::~BloodMessageData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.BloodMessageData)
  SharedDtor();
}

void BloodMessageData::SharedDtor() {
  if (message_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_data_;
  }
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  if (unknown_8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unknown_8_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BloodMessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BloodMessageData& BloodMessageData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

BloodMessageData* BloodMessageData::default_instance_ = NULL;

BloodMessageData* BloodMessageData::New() const {
  return new BloodMessageData;
}

void BloodMessageData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BloodMessageData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(player_id_, good_);
    if (has_message_data()) {
      if (message_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_data_->clear();
      }
    }
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
    cell_id_ = 0u;
    if (has_unknown_8()) {
      if (unknown_8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unknown_8_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BloodMessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.BloodMessageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 2;
      case 2: {
        if (tag == 16) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (tag == 24) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_good;
        break;
      }

      // required uint32 good = 4;
      case 4: {
        if (tag == 32) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message_data;
        break;
      }

      // required bytes message_data = 5;
      case 5: {
        if (tag == 42) {
         parse_message_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 6;
      case 6: {
        if (tag == 50) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 7;
      case 7: {
        if (tag == 56) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unknown_8;
        break;
      }

      // optional string unknown_8 = 8;
      case 8: {
        if (tag == 66) {
         parse_unknown_8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unknown_8()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.BloodMessageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.BloodMessageData)
  return false;
#undef DO_
}

void BloodMessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.BloodMessageData)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->character_id(), output);
  }

  // required uint32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  // required uint32 good = 4;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->good(), output);
  }

  // required bytes message_data = 5;
  if (has_message_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->message_data(), output);
  }

  // required string player_steam_id = 6;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->player_steam_id(), output);
  }

  // required uint32 cell_id = 7;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cell_id(), output);
  }

  // optional string unknown_8 = 8;
  if (has_unknown_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unknown_8(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.BloodMessageData)
}

int BloodMessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 character_id = 2;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required uint32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // required uint32 good = 4;
    if (has_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->good());
    }

    // required bytes message_data = 5;
    if (has_message_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_data());
    }

    // required string player_steam_id = 6;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // required uint32 cell_id = 7;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional string unknown_8 = 8;
    if (has_unknown_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unknown_8());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloodMessageData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BloodMessageData*>(&from));
}

void BloodMessageData::MergeFrom(const BloodMessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_message_data()) {
      set_message_data(from.message_data());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_unknown_8()) {
      set_unknown_8(from.unknown_8());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BloodMessageData::CopyFrom(const BloodMessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloodMessageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void BloodMessageData::Swap(BloodMessageData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(character_id_, other->character_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(good_, other->good_);
    std::swap(message_data_, other->message_data_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(unknown_8_, other->unknown_8_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BloodMessageData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.BloodMessageData";
}


// ===================================================================

#ifndef _MSC_VER
const int BloodMessageCellLimitData::kCellIdFieldNumber;
const int BloodMessageCellLimitData::kMaxType1FieldNumber;
const int BloodMessageCellLimitData::kMaxType2FieldNumber;
#endif  // !_MSC_VER

BloodMessageCellLimitData::BloodMessageCellLimitData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
}

void BloodMessageCellLimitData::InitAsDefaultInstance() {
}

BloodMessageCellLimitData::BloodMessageCellLimitData(const BloodMessageCellLimitData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
}

void BloodMessageCellLimitData::SharedCtor() {
  _cached_size_ = 0;
  cell_id_ = 0u;
  max_type_1_ = 0u;
  max_type_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloodMessageCellLimitData::~BloodMessageCellLimitData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
  SharedDtor();
}

void BloodMessageCellLimitData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BloodMessageCellLimitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BloodMessageCellLimitData& BloodMessageCellLimitData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

BloodMessageCellLimitData* BloodMessageCellLimitData::default_instance_ = NULL;

BloodMessageCellLimitData* BloodMessageCellLimitData::New() const {
  return new BloodMessageCellLimitData;
}

void BloodMessageCellLimitData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BloodMessageCellLimitData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cell_id_, max_type_2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BloodMessageCellLimitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cell_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_type_1;
        break;
      }

      // required uint32 max_type_1 = 2;
      case 2: {
        if (tag == 16) {
         parse_max_type_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_type_1_)));
          set_has_max_type_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_type_2;
        break;
      }

      // required uint32 max_type_2 = 3;
      case 3: {
        if (tag == 24) {
         parse_max_type_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_type_2_)));
          set_has_max_type_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
  return false;
#undef DO_
}

void BloodMessageCellLimitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
  // required uint32 cell_id = 1;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // required uint32 max_type_1 = 2;
  if (has_max_type_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_type_1(), output);
  }

  // required uint32 max_type_2 = 3;
  if (has_max_type_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_type_2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.BloodMessageCellLimitData)
}

int BloodMessageCellLimitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cell_id = 1;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 max_type_1 = 2;
    if (has_max_type_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_type_1());
    }

    // required uint32 max_type_2 = 3;
    if (has_max_type_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_type_2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloodMessageCellLimitData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BloodMessageCellLimitData*>(&from));
}

void BloodMessageCellLimitData::MergeFrom(const BloodMessageCellLimitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_max_type_1()) {
      set_max_type_1(from.max_type_1());
    }
    if (from.has_max_type_2()) {
      set_max_type_2(from.max_type_2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BloodMessageCellLimitData::CopyFrom(const BloodMessageCellLimitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloodMessageCellLimitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BloodMessageCellLimitData::Swap(BloodMessageCellLimitData* other) {
  if (other != this) {
    std::swap(cell_id_, other->cell_id_);
    std::swap(max_type_1_, other->max_type_1_);
    std::swap(max_type_2_, other->max_type_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BloodMessageCellLimitData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.BloodMessageCellLimitData";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestReentryBloodMessage::kOnlineAreaIdFieldNumber;
const int RequestReentryBloodMessage::kCellIdFieldNumber;
const int RequestReentryBloodMessage::kMessageIdFieldNumber;
#endif  // !_MSC_VER

RequestReentryBloodMessage::RequestReentryBloodMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
}

void RequestReentryBloodMessage::InitAsDefaultInstance() {
}

RequestReentryBloodMessage::RequestReentryBloodMessage(const RequestReentryBloodMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
}

void RequestReentryBloodMessage::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  message_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestReentryBloodMessage::~RequestReentryBloodMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
  SharedDtor();
}

void RequestReentryBloodMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestReentryBloodMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestReentryBloodMessage& RequestReentryBloodMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestReentryBloodMessage* RequestReentryBloodMessage::default_instance_ = NULL;

RequestReentryBloodMessage* RequestReentryBloodMessage::New() const {
  return new RequestReentryBloodMessage;
}

void RequestReentryBloodMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestReentryBloodMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, message_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestReentryBloodMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (tag == 24) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
  return false;
#undef DO_
}

void RequestReentryBloodMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestReentryBloodMessage)
}

int RequestReentryBloodMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestReentryBloodMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestReentryBloodMessage*>(&from));
}

void RequestReentryBloodMessage::MergeFrom(const RequestReentryBloodMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestReentryBloodMessage::CopyFrom(const RequestReentryBloodMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestReentryBloodMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestReentryBloodMessage::Swap(RequestReentryBloodMessage* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestReentryBloodMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestReentryBloodMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestReentryBloodMessageResponse::RequestReentryBloodMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
}

void RequestReentryBloodMessageResponse::InitAsDefaultInstance() {
}

RequestReentryBloodMessageResponse::RequestReentryBloodMessageResponse(const RequestReentryBloodMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
}

void RequestReentryBloodMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestReentryBloodMessageResponse::~RequestReentryBloodMessageResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
  SharedDtor();
}

void RequestReentryBloodMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestReentryBloodMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestReentryBloodMessageResponse& RequestReentryBloodMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestReentryBloodMessageResponse* RequestReentryBloodMessageResponse::default_instance_ = NULL;

RequestReentryBloodMessageResponse* RequestReentryBloodMessageResponse::New() const {
  return new RequestReentryBloodMessageResponse;
}

void RequestReentryBloodMessageResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestReentryBloodMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
  return false;
#undef DO_
}

void RequestReentryBloodMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse)
}

int RequestReentryBloodMessageResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestReentryBloodMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestReentryBloodMessageResponse*>(&from));
}

void RequestReentryBloodMessageResponse::MergeFrom(const RequestReentryBloodMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestReentryBloodMessageResponse::CopyFrom(const RequestReentryBloodMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestReentryBloodMessageResponse::IsInitialized() const {

  return true;
}

void RequestReentryBloodMessageResponse::Swap(RequestReentryBloodMessageResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestReentryBloodMessageResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestReentryBloodMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateBloodMessage::kOnlineAreaIdFieldNumber;
const int RequestCreateBloodMessage::kCellIdFieldNumber;
const int RequestCreateBloodMessage::kCharacterIdFieldNumber;
const int RequestCreateBloodMessage::kMessageDataFieldNumber;
#endif  // !_MSC_VER

RequestCreateBloodMessage::RequestCreateBloodMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
}

void RequestCreateBloodMessage::InitAsDefaultInstance() {
}

RequestCreateBloodMessage::RequestCreateBloodMessage(const RequestCreateBloodMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
}

void RequestCreateBloodMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  character_id_ = 0u;
  message_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateBloodMessage::~RequestCreateBloodMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
  SharedDtor();
}

void RequestCreateBloodMessage::SharedDtor() {
  if (message_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateBloodMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateBloodMessage& RequestCreateBloodMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateBloodMessage* RequestCreateBloodMessage::default_instance_ = NULL;

RequestCreateBloodMessage* RequestCreateBloodMessage::New() const {
  return new RequestCreateBloodMessage;
}

void RequestCreateBloodMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestCreateBloodMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(online_area_id_, cell_id_);
    character_id_ = 0u;
    if (has_message_data()) {
      if (message_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateBloodMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 3;
      case 3: {
        if (tag == 24) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message_data;
        break;
      }

      // required bytes message_data = 4;
      case 4: {
        if (tag == 34) {
         parse_message_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
  return false;
#undef DO_
}

void RequestCreateBloodMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 character_id = 3;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->character_id(), output);
  }

  // required bytes message_data = 4;
  if (has_message_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->message_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateBloodMessage)
}

int RequestCreateBloodMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 character_id = 3;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required bytes message_data = 4;
    if (has_message_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateBloodMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateBloodMessage*>(&from));
}

void RequestCreateBloodMessage::MergeFrom(const RequestCreateBloodMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_message_data()) {
      set_message_data(from.message_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateBloodMessage::CopyFrom(const RequestCreateBloodMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateBloodMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestCreateBloodMessage::Swap(RequestCreateBloodMessage* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(character_id_, other->character_id_);
    std::swap(message_data_, other->message_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateBloodMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateBloodMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateBloodMessageResponse::kMessageIdFieldNumber;
#endif  // !_MSC_VER

RequestCreateBloodMessageResponse::RequestCreateBloodMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
}

void RequestCreateBloodMessageResponse::InitAsDefaultInstance() {
}

RequestCreateBloodMessageResponse::RequestCreateBloodMessageResponse(const RequestCreateBloodMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
}

void RequestCreateBloodMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateBloodMessageResponse::~RequestCreateBloodMessageResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
  SharedDtor();
}

void RequestCreateBloodMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateBloodMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateBloodMessageResponse& RequestCreateBloodMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateBloodMessageResponse* RequestCreateBloodMessageResponse::default_instance_ = NULL;

RequestCreateBloodMessageResponse* RequestCreateBloodMessageResponse::New() const {
  return new RequestCreateBloodMessageResponse;
}

void RequestCreateBloodMessageResponse::Clear() {
  message_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateBloodMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
  return false;
#undef DO_
}

void RequestCreateBloodMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
  // required uint32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse)
}

int RequestCreateBloodMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateBloodMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateBloodMessageResponse*>(&from));
}

void RequestCreateBloodMessageResponse::MergeFrom(const RequestCreateBloodMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateBloodMessageResponse::CopyFrom(const RequestCreateBloodMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateBloodMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCreateBloodMessageResponse::Swap(RequestCreateBloodMessageResponse* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateBloodMessageResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateBloodMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRemoveBloodMessage::kOnlineAreaIdFieldNumber;
const int RequestRemoveBloodMessage::kCellIdFieldNumber;
const int RequestRemoveBloodMessage::kMessageIdFieldNumber;
#endif  // !_MSC_VER

RequestRemoveBloodMessage::RequestRemoveBloodMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
}

void RequestRemoveBloodMessage::InitAsDefaultInstance() {
}

RequestRemoveBloodMessage::RequestRemoveBloodMessage(const RequestRemoveBloodMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
}

void RequestRemoveBloodMessage::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  message_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveBloodMessage::~RequestRemoveBloodMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
  SharedDtor();
}

void RequestRemoveBloodMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRemoveBloodMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRemoveBloodMessage& RequestRemoveBloodMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRemoveBloodMessage* RequestRemoveBloodMessage::default_instance_ = NULL;

RequestRemoveBloodMessage* RequestRemoveBloodMessage::New() const {
  return new RequestRemoveBloodMessage;
}

void RequestRemoveBloodMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRemoveBloodMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, message_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRemoveBloodMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (tag == 24) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
  return false;
#undef DO_
}

void RequestRemoveBloodMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRemoveBloodMessage)
}

int RequestRemoveBloodMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveBloodMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRemoveBloodMessage*>(&from));
}

void RequestRemoveBloodMessage::MergeFrom(const RequestRemoveBloodMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRemoveBloodMessage::CopyFrom(const RequestRemoveBloodMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveBloodMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestRemoveBloodMessage::Swap(RequestRemoveBloodMessage* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRemoveBloodMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRemoveBloodMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRemoveBloodMessageResponse::RequestRemoveBloodMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
}

void RequestRemoveBloodMessageResponse::InitAsDefaultInstance() {
}

RequestRemoveBloodMessageResponse::RequestRemoveBloodMessageResponse(const RequestRemoveBloodMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
}

void RequestRemoveBloodMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveBloodMessageResponse::~RequestRemoveBloodMessageResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
  SharedDtor();
}

void RequestRemoveBloodMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRemoveBloodMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRemoveBloodMessageResponse& RequestRemoveBloodMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRemoveBloodMessageResponse* RequestRemoveBloodMessageResponse::default_instance_ = NULL;

RequestRemoveBloodMessageResponse* RequestRemoveBloodMessageResponse::New() const {
  return new RequestRemoveBloodMessageResponse;
}

void RequestRemoveBloodMessageResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRemoveBloodMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
  return false;
#undef DO_
}

void RequestRemoveBloodMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse)
}

int RequestRemoveBloodMessageResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveBloodMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRemoveBloodMessageResponse*>(&from));
}

void RequestRemoveBloodMessageResponse::MergeFrom(const RequestRemoveBloodMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRemoveBloodMessageResponse::CopyFrom(const RequestRemoveBloodMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveBloodMessageResponse::IsInitialized() const {

  return true;
}

void RequestRemoveBloodMessageResponse::Swap(RequestRemoveBloodMessageResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRemoveBloodMessageResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRemoveBloodMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBloodMessageList::kOnlineAreaIdFieldNumber;
const int RequestGetBloodMessageList::kMaxMessagesFieldNumber;
const int RequestGetBloodMessageList::kSearchAreasFieldNumber;
#endif  // !_MSC_VER

RequestGetBloodMessageList::RequestGetBloodMessageList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
}

void RequestGetBloodMessageList::InitAsDefaultInstance() {
}

RequestGetBloodMessageList::RequestGetBloodMessageList(const RequestGetBloodMessageList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
}

void RequestGetBloodMessageList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  max_messages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBloodMessageList::~RequestGetBloodMessageList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
  SharedDtor();
}

void RequestGetBloodMessageList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetBloodMessageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBloodMessageList& RequestGetBloodMessageList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBloodMessageList* RequestGetBloodMessageList::default_instance_ = NULL;

RequestGetBloodMessageList* RequestGetBloodMessageList::New() const {
  return new RequestGetBloodMessageList;
}

void RequestGetBloodMessageList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetBloodMessageList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, max_messages_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  search_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBloodMessageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_messages;
        break;
      }

      // required uint32 max_messages = 2;
      case 2: {
        if (tag == 16) {
         parse_max_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_messages_)));
          set_has_max_messages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_areas;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.BloodMessageCellLimitData search_areas = 3;
      case 3: {
        if (tag == 26) {
         parse_search_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_areas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
  return false;
#undef DO_
}

void RequestGetBloodMessageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 max_messages = 2;
  if (has_max_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_messages(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.BloodMessageCellLimitData search_areas = 3;
  for (int i = 0; i < this->search_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->search_areas(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBloodMessageList)
}

int RequestGetBloodMessageList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 max_messages = 2;
    if (has_max_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_messages());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.BloodMessageCellLimitData search_areas = 3;
  total_size += 1 * this->search_areas_size();
  for (int i = 0; i < this->search_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_areas(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBloodMessageList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBloodMessageList*>(&from));
}

void RequestGetBloodMessageList::MergeFrom(const RequestGetBloodMessageList& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_areas_.MergeFrom(from.search_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_max_messages()) {
      set_max_messages(from.max_messages());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBloodMessageList::CopyFrom(const RequestGetBloodMessageList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBloodMessageList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->search_areas())) return false;
  return true;
}

void RequestGetBloodMessageList::Swap(RequestGetBloodMessageList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(max_messages_, other->max_messages_);
    search_areas_.Swap(&other->search_areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBloodMessageList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBloodMessageList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBloodMessageListResponse::kOnlineAreaIdFieldNumber;
const int RequestGetBloodMessageListResponse::kMessagesFieldNumber;
#endif  // !_MSC_VER

RequestGetBloodMessageListResponse::RequestGetBloodMessageListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
}

void RequestGetBloodMessageListResponse::InitAsDefaultInstance() {
}

RequestGetBloodMessageListResponse::RequestGetBloodMessageListResponse(const RequestGetBloodMessageListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
}

void RequestGetBloodMessageListResponse::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBloodMessageListResponse::~RequestGetBloodMessageListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
  SharedDtor();
}

void RequestGetBloodMessageListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetBloodMessageListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBloodMessageListResponse& RequestGetBloodMessageListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBloodMessageListResponse* RequestGetBloodMessageListResponse::default_instance_ = NULL;

RequestGetBloodMessageListResponse* RequestGetBloodMessageListResponse::New() const {
  return new RequestGetBloodMessageListResponse;
}

void RequestGetBloodMessageListResponse::Clear() {
  online_area_id_ = 0u;
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBloodMessageListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.BloodMessageData messages = 2;
      case 2: {
        if (tag == 18) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
  return false;
#undef DO_
}

void RequestGetBloodMessageListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.BloodMessageData messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->messages(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse)
}

int RequestGetBloodMessageListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.BloodMessageData messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBloodMessageListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBloodMessageListResponse*>(&from));
}

void RequestGetBloodMessageListResponse::MergeFrom(const RequestGetBloodMessageListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBloodMessageListResponse::CopyFrom(const RequestGetBloodMessageListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBloodMessageListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void RequestGetBloodMessageListResponse::Swap(RequestGetBloodMessageListResponse* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBloodMessageListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBloodMessageListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestEvaluateBloodMessage::kOnlineAreaIdFieldNumber;
const int RequestEvaluateBloodMessage::kCellIdFieldNumber;
const int RequestEvaluateBloodMessage::kMessageIdFieldNumber;
#endif  // !_MSC_VER

RequestEvaluateBloodMessage::RequestEvaluateBloodMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
}

void RequestEvaluateBloodMessage::InitAsDefaultInstance() {
}

RequestEvaluateBloodMessage::RequestEvaluateBloodMessage(const RequestEvaluateBloodMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
}

void RequestEvaluateBloodMessage::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  message_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEvaluateBloodMessage::~RequestEvaluateBloodMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
  SharedDtor();
}

void RequestEvaluateBloodMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestEvaluateBloodMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestEvaluateBloodMessage& RequestEvaluateBloodMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestEvaluateBloodMessage* RequestEvaluateBloodMessage::default_instance_ = NULL;

RequestEvaluateBloodMessage* RequestEvaluateBloodMessage::New() const {
  return new RequestEvaluateBloodMessage;
}

void RequestEvaluateBloodMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestEvaluateBloodMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, message_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestEvaluateBloodMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (tag == 24) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
  return false;
#undef DO_
}

void RequestEvaluateBloodMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage)
}

int RequestEvaluateBloodMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEvaluateBloodMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestEvaluateBloodMessage*>(&from));
}

void RequestEvaluateBloodMessage::MergeFrom(const RequestEvaluateBloodMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestEvaluateBloodMessage::CopyFrom(const RequestEvaluateBloodMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEvaluateBloodMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestEvaluateBloodMessage::Swap(RequestEvaluateBloodMessage* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestEvaluateBloodMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestEvaluateBloodMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestEvaluateBloodMessageResponse::RequestEvaluateBloodMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
}

void RequestEvaluateBloodMessageResponse::InitAsDefaultInstance() {
}

RequestEvaluateBloodMessageResponse::RequestEvaluateBloodMessageResponse(const RequestEvaluateBloodMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
}

void RequestEvaluateBloodMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEvaluateBloodMessageResponse::~RequestEvaluateBloodMessageResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
  SharedDtor();
}

void RequestEvaluateBloodMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestEvaluateBloodMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestEvaluateBloodMessageResponse& RequestEvaluateBloodMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestEvaluateBloodMessageResponse* RequestEvaluateBloodMessageResponse::default_instance_ = NULL;

RequestEvaluateBloodMessageResponse* RequestEvaluateBloodMessageResponse::New() const {
  return new RequestEvaluateBloodMessageResponse;
}

void RequestEvaluateBloodMessageResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestEvaluateBloodMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
  return false;
#undef DO_
}

void RequestEvaluateBloodMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse)
}

int RequestEvaluateBloodMessageResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEvaluateBloodMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestEvaluateBloodMessageResponse*>(&from));
}

void RequestEvaluateBloodMessageResponse::MergeFrom(const RequestEvaluateBloodMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestEvaluateBloodMessageResponse::CopyFrom(const RequestEvaluateBloodMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEvaluateBloodMessageResponse::IsInitialized() const {

  return true;
}

void RequestEvaluateBloodMessageResponse::Swap(RequestEvaluateBloodMessageResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestEvaluateBloodMessageResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestEvaluateBloodMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBloodMessageEvaluation::kOnlineAreaIdFieldNumber;
const int RequestGetBloodMessageEvaluation::kCellIdFieldNumber;
const int RequestGetBloodMessageEvaluation::kMessageIdFieldNumber;
#endif  // !_MSC_VER

RequestGetBloodMessageEvaluation::RequestGetBloodMessageEvaluation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
}

void RequestGetBloodMessageEvaluation::InitAsDefaultInstance() {
}

RequestGetBloodMessageEvaluation::RequestGetBloodMessageEvaluation(const RequestGetBloodMessageEvaluation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
}

void RequestGetBloodMessageEvaluation::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  message_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBloodMessageEvaluation::~RequestGetBloodMessageEvaluation() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
  SharedDtor();
}

void RequestGetBloodMessageEvaluation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetBloodMessageEvaluation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBloodMessageEvaluation& RequestGetBloodMessageEvaluation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBloodMessageEvaluation* RequestGetBloodMessageEvaluation::default_instance_ = NULL;

RequestGetBloodMessageEvaluation* RequestGetBloodMessageEvaluation::New() const {
  return new RequestGetBloodMessageEvaluation;
}

void RequestGetBloodMessageEvaluation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetBloodMessageEvaluation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, message_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBloodMessageEvaluation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (tag == 24) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
  return false;
#undef DO_
}

void RequestGetBloodMessageEvaluation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation)
}

int RequestGetBloodMessageEvaluation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBloodMessageEvaluation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBloodMessageEvaluation*>(&from));
}

void RequestGetBloodMessageEvaluation::MergeFrom(const RequestGetBloodMessageEvaluation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBloodMessageEvaluation::CopyFrom(const RequestGetBloodMessageEvaluation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBloodMessageEvaluation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestGetBloodMessageEvaluation::Swap(RequestGetBloodMessageEvaluation* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBloodMessageEvaluation::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluation";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBloodMessageEvaluationResponse::kMessageIdFieldNumber;
const int RequestGetBloodMessageEvaluationResponse::kRatingFieldNumber;
#endif  // !_MSC_VER

RequestGetBloodMessageEvaluationResponse::RequestGetBloodMessageEvaluationResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
}

void RequestGetBloodMessageEvaluationResponse::InitAsDefaultInstance() {
}

RequestGetBloodMessageEvaluationResponse::RequestGetBloodMessageEvaluationResponse(const RequestGetBloodMessageEvaluationResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
}

void RequestGetBloodMessageEvaluationResponse::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = GOOGLE_LONGLONG(0);
  rating_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBloodMessageEvaluationResponse::~RequestGetBloodMessageEvaluationResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
  SharedDtor();
}

void RequestGetBloodMessageEvaluationResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetBloodMessageEvaluationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBloodMessageEvaluationResponse& RequestGetBloodMessageEvaluationResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBloodMessageEvaluationResponse* RequestGetBloodMessageEvaluationResponse::default_instance_ = NULL;

RequestGetBloodMessageEvaluationResponse* RequestGetBloodMessageEvaluationResponse::New() const {
  return new RequestGetBloodMessageEvaluationResponse;
}

void RequestGetBloodMessageEvaluationResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetBloodMessageEvaluationResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(message_id_, rating_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBloodMessageEvaluationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rating;
        break;
      }

      // required int64 rating = 2;
      case 2: {
        if (tag == 16) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
  return false;
#undef DO_
}

void RequestGetBloodMessageEvaluationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
  // required int64 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // required int64 rating = 2;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rating(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse)
}

int RequestGetBloodMessageEvaluationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->message_id());
    }

    // required int64 rating = 2;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rating());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBloodMessageEvaluationResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBloodMessageEvaluationResponse*>(&from));
}

void RequestGetBloodMessageEvaluationResponse::MergeFrom(const RequestGetBloodMessageEvaluationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBloodMessageEvaluationResponse::CopyFrom(const RequestGetBloodMessageEvaluationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBloodMessageEvaluationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestGetBloodMessageEvaluationResponse::Swap(RequestGetBloodMessageEvaluationResponse* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(rating_, other->rating_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBloodMessageEvaluationResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBloodMessageEvaluationResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestEvaluateBloodMessage::kPushMessageIdFieldNumber;
const int PushRequestEvaluateBloodMessage::kPlayerIdFieldNumber;
const int PushRequestEvaluateBloodMessage::kMessageIdFieldNumber;
const int PushRequestEvaluateBloodMessage::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

PushRequestEvaluateBloodMessage::PushRequestEvaluateBloodMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
}

void PushRequestEvaluateBloodMessage::InitAsDefaultInstance() {
}

PushRequestEvaluateBloodMessage::PushRequestEvaluateBloodMessage(const PushRequestEvaluateBloodMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
}

void PushRequestEvaluateBloodMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = 0u;
  message_id_ = 0u;
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestEvaluateBloodMessage::~PushRequestEvaluateBloodMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
  SharedDtor();
}

void PushRequestEvaluateBloodMessage::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestEvaluateBloodMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestEvaluateBloodMessage& PushRequestEvaluateBloodMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestEvaluateBloodMessage* PushRequestEvaluateBloodMessage::default_instance_ = NULL;

PushRequestEvaluateBloodMessage* PushRequestEvaluateBloodMessage::New() const {
  return new PushRequestEvaluateBloodMessage;
}

void PushRequestEvaluateBloodMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    push_message_id_ = 925;
    player_id_ = 0u;
    message_id_ = 0u;
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestEvaluateBloodMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (tag == 24) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 4;
      case 4: {
        if (tag == 34) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
  return false;
#undef DO_
}

void PushRequestEvaluateBloodMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // required uint32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  // required string player_steam_id = 4;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage)
}

int PushRequestEvaluateBloodMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // required string player_steam_id = 4;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestEvaluateBloodMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestEvaluateBloodMessage*>(&from));
}

void PushRequestEvaluateBloodMessage::MergeFrom(const PushRequestEvaluateBloodMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestEvaluateBloodMessage::CopyFrom(const PushRequestEvaluateBloodMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestEvaluateBloodMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PushRequestEvaluateBloodMessage::Swap(PushRequestEvaluateBloodMessage* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestEvaluateBloodMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestEvaluateBloodMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetAreaBloodMessageList::kOnlineAreaIdFieldNumber;
const int RequestGetAreaBloodMessageList::kCountFieldNumber;
const int RequestGetAreaBloodMessageList::kMaxType1FieldNumber;
const int RequestGetAreaBloodMessageList::kMaxType2FieldNumber;
#endif  // !_MSC_VER

RequestGetAreaBloodMessageList::RequestGetAreaBloodMessageList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
}

void RequestGetAreaBloodMessageList::InitAsDefaultInstance() {
}

RequestGetAreaBloodMessageList::RequestGetAreaBloodMessageList(const RequestGetAreaBloodMessageList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
}

void RequestGetAreaBloodMessageList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  count_ = 0u;
  max_type_1_ = 0u;
  max_type_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetAreaBloodMessageList::~RequestGetAreaBloodMessageList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
  SharedDtor();
}

void RequestGetAreaBloodMessageList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetAreaBloodMessageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetAreaBloodMessageList& RequestGetAreaBloodMessageList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetAreaBloodMessageList* RequestGetAreaBloodMessageList::default_instance_ = NULL;

RequestGetAreaBloodMessageList* RequestGetAreaBloodMessageList::New() const {
  return new RequestGetAreaBloodMessageList;
}

void RequestGetAreaBloodMessageList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetAreaBloodMessageList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, max_type_2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetAreaBloodMessageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_type_1;
        break;
      }

      // required uint32 max_type_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_max_type_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_type_1_)));
          set_has_max_type_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_type_2;
        break;
      }

      // required uint32 max_type_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_max_type_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_type_2_)));
          set_has_max_type_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
  return false;
#undef DO_
}

void RequestGetAreaBloodMessageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 max_type_1 = 3;
  if (has_max_type_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_type_1(), output);
  }

  // required uint32 max_type_2 = 4;
  if (has_max_type_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_type_2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList)
}

int RequestGetAreaBloodMessageList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 max_type_1 = 3;
    if (has_max_type_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_type_1());
    }

    // required uint32 max_type_2 = 4;
    if (has_max_type_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_type_2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetAreaBloodMessageList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetAreaBloodMessageList*>(&from));
}

void RequestGetAreaBloodMessageList::MergeFrom(const RequestGetAreaBloodMessageList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_max_type_1()) {
      set_max_type_1(from.max_type_1());
    }
    if (from.has_max_type_2()) {
      set_max_type_2(from.max_type_2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetAreaBloodMessageList::CopyFrom(const RequestGetAreaBloodMessageList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetAreaBloodMessageList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestGetAreaBloodMessageList::Swap(RequestGetAreaBloodMessageList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(count_, other->count_);
    std::swap(max_type_1_, other->max_type_1_);
    std::swap(max_type_2_, other->max_type_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetAreaBloodMessageList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetAreaBloodMessageList";
}


// ===================================================================

#ifndef _MSC_VER
const int BloodstainInfo::kOnlineAreaIdFieldNumber;
const int BloodstainInfo::kCellIdFieldNumber;
const int BloodstainInfo::kBloodstainIdFieldNumber;
const int BloodstainInfo::kDataFieldNumber;
#endif  // !_MSC_VER

BloodstainInfo::BloodstainInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.BloodstainInfo)
}

void BloodstainInfo::InitAsDefaultInstance() {
}

BloodstainInfo::BloodstainInfo(const BloodstainInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.BloodstainInfo)
}

void BloodstainInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  bloodstain_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloodstainInfo::~BloodstainInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.BloodstainInfo)
  SharedDtor();
}

void BloodstainInfo::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BloodstainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BloodstainInfo& BloodstainInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

BloodstainInfo* BloodstainInfo::default_instance_ = NULL;

BloodstainInfo* BloodstainInfo::New() const {
  return new BloodstainInfo;
}

void BloodstainInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BloodstainInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(online_area_id_, cell_id_);
    bloodstain_id_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BloodstainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.BloodstainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bloodstain_id;
        break;
      }

      // required uint32 bloodstain_id = 3;
      case 3: {
        if (tag == 24) {
         parse_bloodstain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bloodstain_id_)));
          set_has_bloodstain_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.BloodstainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.BloodstainInfo)
  return false;
#undef DO_
}

void BloodstainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.BloodstainInfo)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 bloodstain_id = 3;
  if (has_bloodstain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bloodstain_id(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.BloodstainInfo)
}

int BloodstainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 bloodstain_id = 3;
    if (has_bloodstain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bloodstain_id());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloodstainInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BloodstainInfo*>(&from));
}

void BloodstainInfo::MergeFrom(const BloodstainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_bloodstain_id()) {
      set_bloodstain_id(from.bloodstain_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BloodstainInfo::CopyFrom(const BloodstainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloodstainInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BloodstainInfo::Swap(BloodstainInfo* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(bloodstain_id_, other->bloodstain_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BloodstainInfo::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.BloodstainInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateBloodstain::kOnlineAreaIdFieldNumber;
const int RequestCreateBloodstain::kCellIdFieldNumber;
const int RequestCreateBloodstain::kDataFieldNumber;
const int RequestCreateBloodstain::kGhostDataFieldNumber;
#endif  // !_MSC_VER

RequestCreateBloodstain::RequestCreateBloodstain()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
}

void RequestCreateBloodstain::InitAsDefaultInstance() {
}

RequestCreateBloodstain::RequestCreateBloodstain(const RequestCreateBloodstain& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
}

void RequestCreateBloodstain::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ghost_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateBloodstain::~RequestCreateBloodstain() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
  SharedDtor();
}

void RequestCreateBloodstain::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (ghost_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ghost_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateBloodstain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateBloodstain& RequestCreateBloodstain::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateBloodstain* RequestCreateBloodstain::default_instance_ = NULL;

RequestCreateBloodstain* RequestCreateBloodstain::New() const {
  return new RequestCreateBloodstain;
}

void RequestCreateBloodstain::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestCreateBloodstain*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(online_area_id_, cell_id_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_ghost_data()) {
      if (ghost_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ghost_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateBloodstain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ghost_data;
        break;
      }

      // required bytes ghost_data = 4;
      case 4: {
        if (tag == 34) {
         parse_ghost_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ghost_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
  return false;
#undef DO_
}

void RequestCreateBloodstain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // required bytes ghost_data = 4;
  if (has_ghost_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ghost_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateBloodstain)
}

int RequestCreateBloodstain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required bytes ghost_data = 4;
    if (has_ghost_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ghost_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateBloodstain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateBloodstain*>(&from));
}

void RequestCreateBloodstain::MergeFrom(const RequestCreateBloodstain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_ghost_data()) {
      set_ghost_data(from.ghost_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateBloodstain::CopyFrom(const RequestCreateBloodstain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateBloodstain::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestCreateBloodstain::Swap(RequestCreateBloodstain* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(data_, other->data_);
    std::swap(ghost_data_, other->ghost_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateBloodstain::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateBloodstain";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBloodstainList::kOnlineAreaIdFieldNumber;
const int RequestGetBloodstainList::kMaxStainsFieldNumber;
const int RequestGetBloodstainList::kSearchAreasFieldNumber;
#endif  // !_MSC_VER

RequestGetBloodstainList::RequestGetBloodstainList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
}

void RequestGetBloodstainList::InitAsDefaultInstance() {
}

RequestGetBloodstainList::RequestGetBloodstainList(const RequestGetBloodstainList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
}

void RequestGetBloodstainList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  max_stains_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBloodstainList::~RequestGetBloodstainList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
  SharedDtor();
}

void RequestGetBloodstainList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetBloodstainList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBloodstainList& RequestGetBloodstainList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBloodstainList* RequestGetBloodstainList::default_instance_ = NULL;

RequestGetBloodstainList* RequestGetBloodstainList::New() const {
  return new RequestGetBloodstainList;
}

void RequestGetBloodstainList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetBloodstainList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, max_stains_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  search_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBloodstainList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_stains;
        break;
      }

      // required uint32 max_stains = 2;
      case 2: {
        if (tag == 16) {
         parse_max_stains:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_stains_)));
          set_has_max_stains();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_areas;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.CellLimitData search_areas = 3;
      case 3: {
        if (tag == 26) {
         parse_search_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_areas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
  return false;
#undef DO_
}

void RequestGetBloodstainList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 max_stains = 2;
  if (has_max_stains()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_stains(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.CellLimitData search_areas = 3;
  for (int i = 0; i < this->search_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->search_areas(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBloodstainList)
}

int RequestGetBloodstainList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 max_stains = 2;
    if (has_max_stains()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_stains());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.CellLimitData search_areas = 3;
  total_size += 1 * this->search_areas_size();
  for (int i = 0; i < this->search_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_areas(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBloodstainList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBloodstainList*>(&from));
}

void RequestGetBloodstainList::MergeFrom(const RequestGetBloodstainList& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_areas_.MergeFrom(from.search_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_max_stains()) {
      set_max_stains(from.max_stains());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBloodstainList::CopyFrom(const RequestGetBloodstainList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBloodstainList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->search_areas())) return false;
  return true;
}

void RequestGetBloodstainList::Swap(RequestGetBloodstainList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(max_stains_, other->max_stains_);
    search_areas_.Swap(&other->search_areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBloodstainList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBloodstainList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetAreaBloodstainList::kOnlineAreaIdFieldNumber;
const int RequestGetAreaBloodstainList::kCountFieldNumber;
const int RequestGetAreaBloodstainList::kMaxType1FieldNumber;
const int RequestGetAreaBloodstainList::kMaxType2FieldNumber;
#endif  // !_MSC_VER

RequestGetAreaBloodstainList::RequestGetAreaBloodstainList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
}

void RequestGetAreaBloodstainList::InitAsDefaultInstance() {
}

RequestGetAreaBloodstainList::RequestGetAreaBloodstainList(const RequestGetAreaBloodstainList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
}

void RequestGetAreaBloodstainList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  count_ = 0u;
  max_type_1_ = 0u;
  max_type_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetAreaBloodstainList::~RequestGetAreaBloodstainList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
  SharedDtor();
}

void RequestGetAreaBloodstainList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetAreaBloodstainList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetAreaBloodstainList& RequestGetAreaBloodstainList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetAreaBloodstainList* RequestGetAreaBloodstainList::default_instance_ = NULL;

RequestGetAreaBloodstainList* RequestGetAreaBloodstainList::New() const {
  return new RequestGetAreaBloodstainList;
}

void RequestGetAreaBloodstainList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetAreaBloodstainList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, max_type_2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetAreaBloodstainList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_type_1;
        break;
      }

      // required uint32 max_type_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_max_type_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_type_1_)));
          set_has_max_type_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_type_2;
        break;
      }

      // required uint32 max_type_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_max_type_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_type_2_)));
          set_has_max_type_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
  return false;
#undef DO_
}

void RequestGetAreaBloodstainList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 max_type_1 = 3;
  if (has_max_type_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_type_1(), output);
  }

  // required uint32 max_type_2 = 4;
  if (has_max_type_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_type_2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList)
}

int RequestGetAreaBloodstainList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 max_type_1 = 3;
    if (has_max_type_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_type_1());
    }

    // required uint32 max_type_2 = 4;
    if (has_max_type_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_type_2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetAreaBloodstainList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetAreaBloodstainList*>(&from));
}

void RequestGetAreaBloodstainList::MergeFrom(const RequestGetAreaBloodstainList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_max_type_1()) {
      set_max_type_1(from.max_type_1());
    }
    if (from.has_max_type_2()) {
      set_max_type_2(from.max_type_2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetAreaBloodstainList::CopyFrom(const RequestGetAreaBloodstainList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetAreaBloodstainList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestGetAreaBloodstainList::Swap(RequestGetAreaBloodstainList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(count_, other->count_);
    std::swap(max_type_1_, other->max_type_1_);
    std::swap(max_type_2_, other->max_type_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetAreaBloodstainList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetAreaBloodstainList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBloodstainListResponse::kBloodstainsFieldNumber;
#endif  // !_MSC_VER

RequestGetBloodstainListResponse::RequestGetBloodstainListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
}

void RequestGetBloodstainListResponse::InitAsDefaultInstance() {
}

RequestGetBloodstainListResponse::RequestGetBloodstainListResponse(const RequestGetBloodstainListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
}

void RequestGetBloodstainListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBloodstainListResponse::~RequestGetBloodstainListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
  SharedDtor();
}

void RequestGetBloodstainListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetBloodstainListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBloodstainListResponse& RequestGetBloodstainListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBloodstainListResponse* RequestGetBloodstainListResponse::default_instance_ = NULL;

RequestGetBloodstainListResponse* RequestGetBloodstainListResponse::New() const {
  return new RequestGetBloodstainListResponse;
}

void RequestGetBloodstainListResponse::Clear() {
  bloodstains_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBloodstainListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DS2_Frpg2RequestMessage.BloodstainInfo bloodstains = 1;
      case 1: {
        if (tag == 10) {
         parse_bloodstains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bloodstains()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bloodstains;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
  return false;
#undef DO_
}

void RequestGetBloodstainListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
  // repeated .DS2_Frpg2RequestMessage.BloodstainInfo bloodstains = 1;
  for (int i = 0; i < this->bloodstains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bloodstains(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse)
}

int RequestGetBloodstainListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .DS2_Frpg2RequestMessage.BloodstainInfo bloodstains = 1;
  total_size += 1 * this->bloodstains_size();
  for (int i = 0; i < this->bloodstains_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bloodstains(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBloodstainListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBloodstainListResponse*>(&from));
}

void RequestGetBloodstainListResponse::MergeFrom(const RequestGetBloodstainListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bloodstains_.MergeFrom(from.bloodstains_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBloodstainListResponse::CopyFrom(const RequestGetBloodstainListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBloodstainListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bloodstains())) return false;
  return true;
}

void RequestGetBloodstainListResponse::Swap(RequestGetBloodstainListResponse* other) {
  if (other != this) {
    bloodstains_.Swap(&other->bloodstains_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBloodstainListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBloodstainListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetDeadingGhost::kOnlineAreaIdFieldNumber;
const int RequestGetDeadingGhost::kCellIdFieldNumber;
const int RequestGetDeadingGhost::kBloodstainIdFieldNumber;
#endif  // !_MSC_VER

RequestGetDeadingGhost::RequestGetDeadingGhost()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
}

void RequestGetDeadingGhost::InitAsDefaultInstance() {
}

RequestGetDeadingGhost::RequestGetDeadingGhost(const RequestGetDeadingGhost& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
}

void RequestGetDeadingGhost::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  bloodstain_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetDeadingGhost::~RequestGetDeadingGhost() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
  SharedDtor();
}

void RequestGetDeadingGhost::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetDeadingGhost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetDeadingGhost& RequestGetDeadingGhost::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetDeadingGhost* RequestGetDeadingGhost::default_instance_ = NULL;

RequestGetDeadingGhost* RequestGetDeadingGhost::New() const {
  return new RequestGetDeadingGhost;
}

void RequestGetDeadingGhost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetDeadingGhost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, bloodstain_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetDeadingGhost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bloodstain_id;
        break;
      }

      // required uint32 bloodstain_id = 3;
      case 3: {
        if (tag == 24) {
         parse_bloodstain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bloodstain_id_)));
          set_has_bloodstain_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
  return false;
#undef DO_
}

void RequestGetDeadingGhost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 bloodstain_id = 3;
  if (has_bloodstain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bloodstain_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetDeadingGhost)
}

int RequestGetDeadingGhost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 bloodstain_id = 3;
    if (has_bloodstain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bloodstain_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetDeadingGhost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetDeadingGhost*>(&from));
}

void RequestGetDeadingGhost::MergeFrom(const RequestGetDeadingGhost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_bloodstain_id()) {
      set_bloodstain_id(from.bloodstain_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetDeadingGhost::CopyFrom(const RequestGetDeadingGhost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetDeadingGhost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestGetDeadingGhost::Swap(RequestGetDeadingGhost* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(bloodstain_id_, other->bloodstain_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetDeadingGhost::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetDeadingGhost";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetDeadingGhostResponse::kOnlineAreaIdFieldNumber;
const int RequestGetDeadingGhostResponse::kCellIdFieldNumber;
const int RequestGetDeadingGhostResponse::kBloodstainIdFieldNumber;
const int RequestGetDeadingGhostResponse::kDataFieldNumber;
#endif  // !_MSC_VER

RequestGetDeadingGhostResponse::RequestGetDeadingGhostResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
}

void RequestGetDeadingGhostResponse::InitAsDefaultInstance() {
}

RequestGetDeadingGhostResponse::RequestGetDeadingGhostResponse(const RequestGetDeadingGhostResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
}

void RequestGetDeadingGhostResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  bloodstain_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetDeadingGhostResponse::~RequestGetDeadingGhostResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
  SharedDtor();
}

void RequestGetDeadingGhostResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetDeadingGhostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetDeadingGhostResponse& RequestGetDeadingGhostResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetDeadingGhostResponse* RequestGetDeadingGhostResponse::default_instance_ = NULL;

RequestGetDeadingGhostResponse* RequestGetDeadingGhostResponse::New() const {
  return new RequestGetDeadingGhostResponse;
}

void RequestGetDeadingGhostResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetDeadingGhostResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(online_area_id_, cell_id_);
    bloodstain_id_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetDeadingGhostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bloodstain_id;
        break;
      }

      // required uint32 bloodstain_id = 3;
      case 3: {
        if (tag == 24) {
         parse_bloodstain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bloodstain_id_)));
          set_has_bloodstain_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
  return false;
#undef DO_
}

void RequestGetDeadingGhostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 bloodstain_id = 3;
  if (has_bloodstain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bloodstain_id(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse)
}

int RequestGetDeadingGhostResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 bloodstain_id = 3;
    if (has_bloodstain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bloodstain_id());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetDeadingGhostResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetDeadingGhostResponse*>(&from));
}

void RequestGetDeadingGhostResponse::MergeFrom(const RequestGetDeadingGhostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_bloodstain_id()) {
      set_bloodstain_id(from.bloodstain_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetDeadingGhostResponse::CopyFrom(const RequestGetDeadingGhostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetDeadingGhostResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestGetDeadingGhostResponse::Swap(RequestGetDeadingGhostResponse* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(bloodstain_id_, other->bloodstain_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetDeadingGhostResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetDeadingGhostResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyBuyItem::kMerchantIdFieldNumber;
const int RequestNotifyBuyItem::kItemIdFieldNumber;
const int RequestNotifyBuyItem::kSoulsSpentFieldNumber;
const int RequestNotifyBuyItem::kQuantityFieldNumber;
#endif  // !_MSC_VER

RequestNotifyBuyItem::RequestNotifyBuyItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
}

void RequestNotifyBuyItem::InitAsDefaultInstance() {
}

RequestNotifyBuyItem::RequestNotifyBuyItem(const RequestNotifyBuyItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
}

void RequestNotifyBuyItem::SharedCtor() {
  _cached_size_ = 0;
  merchant_id_ = 0u;
  item_id_ = 0u;
  souls_spent_ = 0u;
  quantity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyBuyItem::~RequestNotifyBuyItem() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
  SharedDtor();
}

void RequestNotifyBuyItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyBuyItem& RequestNotifyBuyItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyBuyItem* RequestNotifyBuyItem::default_instance_ = NULL;

RequestNotifyBuyItem* RequestNotifyBuyItem::New() const {
  return new RequestNotifyBuyItem;
}

void RequestNotifyBuyItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyBuyItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(merchant_id_, quantity_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 merchant_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &merchant_id_)));
          set_has_merchant_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_souls_spent;
        break;
      }

      // required uint32 souls_spent = 3;
      case 3: {
        if (tag == 24) {
         parse_souls_spent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &souls_spent_)));
          set_has_souls_spent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quantity;
        break;
      }

      // required uint32 quantity = 4;
      case 4: {
        if (tag == 32) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
  return false;
#undef DO_
}

void RequestNotifyBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
  // required uint32 merchant_id = 1;
  if (has_merchant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->merchant_id(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // required uint32 souls_spent = 3;
  if (has_souls_spent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->souls_spent(), output);
  }

  // required uint32 quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyBuyItem)
}

int RequestNotifyBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 merchant_id = 1;
    if (has_merchant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->merchant_id());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 souls_spent = 3;
    if (has_souls_spent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->souls_spent());
    }

    // required uint32 quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyBuyItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyBuyItem*>(&from));
}

void RequestNotifyBuyItem::MergeFrom(const RequestNotifyBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_merchant_id()) {
      set_merchant_id(from.merchant_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_souls_spent()) {
      set_souls_spent(from.souls_spent());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyBuyItem::CopyFrom(const RequestNotifyBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyBuyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestNotifyBuyItem::Swap(RequestNotifyBuyItem* other) {
  if (other != this) {
    std::swap(merchant_id_, other->merchant_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(souls_spent_, other->souls_spent_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyBuyItem::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyBuyItem";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyBuyItemResponse::RequestNotifyBuyItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
}

void RequestNotifyBuyItemResponse::InitAsDefaultInstance() {
}

RequestNotifyBuyItemResponse::RequestNotifyBuyItemResponse(const RequestNotifyBuyItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
}

void RequestNotifyBuyItemResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyBuyItemResponse::~RequestNotifyBuyItemResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
  SharedDtor();
}

void RequestNotifyBuyItemResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyBuyItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyBuyItemResponse& RequestNotifyBuyItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyBuyItemResponse* RequestNotifyBuyItemResponse::default_instance_ = NULL;

RequestNotifyBuyItemResponse* RequestNotifyBuyItemResponse::New() const {
  return new RequestNotifyBuyItemResponse;
}

void RequestNotifyBuyItemResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyBuyItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
  return false;
#undef DO_
}

void RequestNotifyBuyItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse)
}

int RequestNotifyBuyItemResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyBuyItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyBuyItemResponse*>(&from));
}

void RequestNotifyBuyItemResponse::MergeFrom(const RequestNotifyBuyItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyBuyItemResponse::CopyFrom(const RequestNotifyBuyItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyBuyItemResponse::IsInitialized() const {

  return true;
}

void RequestNotifyBuyItemResponse::Swap(RequestNotifyBuyItemResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyBuyItemResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyBuyItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyDeath::kOnlineAreaIdFieldNumber;
const int RequestNotifyDeath::kCellIdFieldNumber;
const int RequestNotifyDeath::kField3FieldNumber;
const int RequestNotifyDeath::kField4FieldNumber;
const int RequestNotifyDeath::kField5FieldNumber;
const int RequestNotifyDeath::kField6FieldNumber;
const int RequestNotifyDeath::kField7FieldNumber;
const int RequestNotifyDeath::kField8FieldNumber;
#endif  // !_MSC_VER

RequestNotifyDeath::RequestNotifyDeath()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyDeath)
}

void RequestNotifyDeath::InitAsDefaultInstance() {
}

RequestNotifyDeath::RequestNotifyDeath(const RequestNotifyDeath& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyDeath)
}

void RequestNotifyDeath::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  field_3_ = GOOGLE_LONGLONG(0);
  field_4_ = GOOGLE_LONGLONG(0);
  field_5_ = GOOGLE_LONGLONG(0);
  field_6_ = GOOGLE_LONGLONG(0);
  field_7_ = GOOGLE_LONGLONG(0);
  field_8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyDeath::~RequestNotifyDeath() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyDeath)
  SharedDtor();
}

void RequestNotifyDeath::SharedDtor() {
  if (field_8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_8_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyDeath& RequestNotifyDeath::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyDeath* RequestNotifyDeath::default_instance_ = NULL;

RequestNotifyDeath* RequestNotifyDeath::New() const {
  return new RequestNotifyDeath;
}

void RequestNotifyDeath::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyDeath*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(online_area_id_, field_7_);
    if (has_field_8()) {
      if (field_8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field_8_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyDeath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_field_3;
        break;
      }

      // required int64 field_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_field_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_3_)));
          set_has_field_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_field_4;
        break;
      }

      // required int64 field_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_field_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_4_)));
          set_has_field_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_field_5;
        break;
      }

      // required int64 field_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_field_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_5_)));
          set_has_field_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_field_6;
        break;
      }

      // required int64 field_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_field_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_6_)));
          set_has_field_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_field_7;
        break;
      }

      // required int64 field_7 = 7;
      case 7: {
        if (tag == 56) {
         parse_field_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_7_)));
          set_has_field_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_field_8;
        break;
      }

      // required bytes field_8 = 8;
      case 8: {
        if (tag == 66) {
         parse_field_8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_8()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyDeath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyDeath)
  return false;
#undef DO_
}

void RequestNotifyDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyDeath)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required int64 field_3 = 3;
  if (has_field_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->field_3(), output);
  }

  // required int64 field_4 = 4;
  if (has_field_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->field_4(), output);
  }

  // required int64 field_5 = 5;
  if (has_field_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->field_5(), output);
  }

  // required int64 field_6 = 6;
  if (has_field_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->field_6(), output);
  }

  // required int64 field_7 = 7;
  if (has_field_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->field_7(), output);
  }

  // required bytes field_8 = 8;
  if (has_field_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->field_8(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyDeath)
}

int RequestNotifyDeath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required int64 field_3 = 3;
    if (has_field_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_3());
    }

    // required int64 field_4 = 4;
    if (has_field_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_4());
    }

    // required int64 field_5 = 5;
    if (has_field_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_5());
    }

    // required int64 field_6 = 6;
    if (has_field_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_6());
    }

    // required int64 field_7 = 7;
    if (has_field_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_7());
    }

    // required bytes field_8 = 8;
    if (has_field_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_8());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyDeath::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyDeath*>(&from));
}

void RequestNotifyDeath::MergeFrom(const RequestNotifyDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_field_3()) {
      set_field_3(from.field_3());
    }
    if (from.has_field_4()) {
      set_field_4(from.field_4());
    }
    if (from.has_field_5()) {
      set_field_5(from.field_5());
    }
    if (from.has_field_6()) {
      set_field_6(from.field_6());
    }
    if (from.has_field_7()) {
      set_field_7(from.field_7());
    }
    if (from.has_field_8()) {
      set_field_8(from.field_8());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyDeath::CopyFrom(const RequestNotifyDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyDeath::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void RequestNotifyDeath::Swap(RequestNotifyDeath* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(field_3_, other->field_3_);
    std::swap(field_4_, other->field_4_);
    std::swap(field_5_, other->field_5_);
    std::swap(field_6_, other->field_6_);
    std::swap(field_7_, other->field_7_);
    std::swap(field_8_, other->field_8_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyDeath::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyDeath";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyDeathResponse::RequestNotifyDeathResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
}

void RequestNotifyDeathResponse::InitAsDefaultInstance() {
}

RequestNotifyDeathResponse::RequestNotifyDeathResponse(const RequestNotifyDeathResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
}

void RequestNotifyDeathResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyDeathResponse::~RequestNotifyDeathResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
  SharedDtor();
}

void RequestNotifyDeathResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyDeathResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyDeathResponse& RequestNotifyDeathResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyDeathResponse* RequestNotifyDeathResponse::default_instance_ = NULL;

RequestNotifyDeathResponse* RequestNotifyDeathResponse::New() const {
  return new RequestNotifyDeathResponse;
}

void RequestNotifyDeathResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyDeathResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
  return false;
#undef DO_
}

void RequestNotifyDeathResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyDeathResponse)
}

int RequestNotifyDeathResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyDeathResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyDeathResponse*>(&from));
}

void RequestNotifyDeathResponse::MergeFrom(const RequestNotifyDeathResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyDeathResponse::CopyFrom(const RequestNotifyDeathResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyDeathResponse::IsInitialized() const {

  return true;
}

void RequestNotifyDeathResponse::Swap(RequestNotifyDeathResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyDeathResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyDeathResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyDisconnectSession::kField1FieldNumber;
#endif  // !_MSC_VER

RequestNotifyDisconnectSession::RequestNotifyDisconnectSession()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
}

void RequestNotifyDisconnectSession::InitAsDefaultInstance() {
}

RequestNotifyDisconnectSession::RequestNotifyDisconnectSession(const RequestNotifyDisconnectSession& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
}

void RequestNotifyDisconnectSession::SharedCtor() {
  _cached_size_ = 0;
  field_1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyDisconnectSession::~RequestNotifyDisconnectSession() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
  SharedDtor();
}

void RequestNotifyDisconnectSession::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyDisconnectSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyDisconnectSession& RequestNotifyDisconnectSession::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyDisconnectSession* RequestNotifyDisconnectSession::default_instance_ = NULL;

RequestNotifyDisconnectSession* RequestNotifyDisconnectSession::New() const {
  return new RequestNotifyDisconnectSession;
}

void RequestNotifyDisconnectSession::Clear() {
  field_1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyDisconnectSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 field_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_1_)));
          set_has_field_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
  return false;
#undef DO_
}

void RequestNotifyDisconnectSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
  // required int64 field_1 = 1;
  if (has_field_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field_1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession)
}

int RequestNotifyDisconnectSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 field_1 = 1;
    if (has_field_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_1());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyDisconnectSession::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyDisconnectSession*>(&from));
}

void RequestNotifyDisconnectSession::MergeFrom(const RequestNotifyDisconnectSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_1()) {
      set_field_1(from.field_1());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyDisconnectSession::CopyFrom(const RequestNotifyDisconnectSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyDisconnectSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestNotifyDisconnectSession::Swap(RequestNotifyDisconnectSession* other) {
  if (other != this) {
    std::swap(field_1_, other->field_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyDisconnectSession::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyDisconnectSession";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyDisconnectSessionResponse::RequestNotifyDisconnectSessionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
}

void RequestNotifyDisconnectSessionResponse::InitAsDefaultInstance() {
}

RequestNotifyDisconnectSessionResponse::RequestNotifyDisconnectSessionResponse(const RequestNotifyDisconnectSessionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
}

void RequestNotifyDisconnectSessionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyDisconnectSessionResponse::~RequestNotifyDisconnectSessionResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
  SharedDtor();
}

void RequestNotifyDisconnectSessionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyDisconnectSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyDisconnectSessionResponse& RequestNotifyDisconnectSessionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyDisconnectSessionResponse* RequestNotifyDisconnectSessionResponse::default_instance_ = NULL;

RequestNotifyDisconnectSessionResponse* RequestNotifyDisconnectSessionResponse::New() const {
  return new RequestNotifyDisconnectSessionResponse;
}

void RequestNotifyDisconnectSessionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyDisconnectSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
  return false;
#undef DO_
}

void RequestNotifyDisconnectSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse)
}

int RequestNotifyDisconnectSessionResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyDisconnectSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyDisconnectSessionResponse*>(&from));
}

void RequestNotifyDisconnectSessionResponse::MergeFrom(const RequestNotifyDisconnectSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyDisconnectSessionResponse::CopyFrom(const RequestNotifyDisconnectSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyDisconnectSessionResponse::IsInitialized() const {

  return true;
}

void RequestNotifyDisconnectSessionResponse::Swap(RequestNotifyDisconnectSessionResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyDisconnectSessionResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyDisconnectSessionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyJoinGuestPlayer::kField1FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField2FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField3FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField4FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField5FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField6FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField7FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField8FieldNumber;
const int RequestNotifyJoinGuestPlayer::kField9FieldNumber;
#endif  // !_MSC_VER

RequestNotifyJoinGuestPlayer::RequestNotifyJoinGuestPlayer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
}

void RequestNotifyJoinGuestPlayer::InitAsDefaultInstance() {
}

RequestNotifyJoinGuestPlayer::RequestNotifyJoinGuestPlayer(const RequestNotifyJoinGuestPlayer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
}

void RequestNotifyJoinGuestPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_1_ = GOOGLE_LONGLONG(0);
  field_2_ = GOOGLE_LONGLONG(0);
  field_3_ = GOOGLE_LONGLONG(0);
  field_4_ = GOOGLE_LONGLONG(0);
  field_5_ = GOOGLE_LONGLONG(0);
  field_6_ = GOOGLE_LONGLONG(0);
  field_7_ = GOOGLE_LONGLONG(0);
  field_8_ = GOOGLE_LONGLONG(0);
  field_9_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyJoinGuestPlayer::~RequestNotifyJoinGuestPlayer() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
  SharedDtor();
}

void RequestNotifyJoinGuestPlayer::SharedDtor() {
  if (field_9_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_9_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyJoinGuestPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyJoinGuestPlayer& RequestNotifyJoinGuestPlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyJoinGuestPlayer* RequestNotifyJoinGuestPlayer::default_instance_ = NULL;

RequestNotifyJoinGuestPlayer* RequestNotifyJoinGuestPlayer::New() const {
  return new RequestNotifyJoinGuestPlayer;
}

void RequestNotifyJoinGuestPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyJoinGuestPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(field_1_, field_8_);
  }
  if (has_field_9()) {
    if (field_9_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      field_9_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyJoinGuestPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 field_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_1_)));
          set_has_field_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field_2;
        break;
      }

      // required int64 field_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_field_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_2_)));
          set_has_field_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_field_3;
        break;
      }

      // required int64 field_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_field_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_3_)));
          set_has_field_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_field_4;
        break;
      }

      // required int64 field_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_field_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_4_)));
          set_has_field_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_field_5;
        break;
      }

      // required int64 field_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_field_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_5_)));
          set_has_field_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_field_6;
        break;
      }

      // required int64 field_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_field_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_6_)));
          set_has_field_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_field_7;
        break;
      }

      // required int64 field_7 = 7;
      case 7: {
        if (tag == 56) {
         parse_field_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_7_)));
          set_has_field_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_field_8;
        break;
      }

      // required int64 field_8 = 8;
      case 8: {
        if (tag == 64) {
         parse_field_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_8_)));
          set_has_field_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_field_9;
        break;
      }

      // required bytes field_9 = 9;
      case 9: {
        if (tag == 74) {
         parse_field_9:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_9()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
  return false;
#undef DO_
}

void RequestNotifyJoinGuestPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
  // required int64 field_1 = 1;
  if (has_field_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field_1(), output);
  }

  // required int64 field_2 = 2;
  if (has_field_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field_2(), output);
  }

  // required int64 field_3 = 3;
  if (has_field_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->field_3(), output);
  }

  // required int64 field_4 = 4;
  if (has_field_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->field_4(), output);
  }

  // required int64 field_5 = 5;
  if (has_field_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->field_5(), output);
  }

  // required int64 field_6 = 6;
  if (has_field_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->field_6(), output);
  }

  // required int64 field_7 = 7;
  if (has_field_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->field_7(), output);
  }

  // required int64 field_8 = 8;
  if (has_field_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->field_8(), output);
  }

  // required bytes field_9 = 9;
  if (has_field_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->field_9(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer)
}

int RequestNotifyJoinGuestPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 field_1 = 1;
    if (has_field_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_1());
    }

    // required int64 field_2 = 2;
    if (has_field_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_2());
    }

    // required int64 field_3 = 3;
    if (has_field_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_3());
    }

    // required int64 field_4 = 4;
    if (has_field_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_4());
    }

    // required int64 field_5 = 5;
    if (has_field_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_5());
    }

    // required int64 field_6 = 6;
    if (has_field_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_6());
    }

    // required int64 field_7 = 7;
    if (has_field_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_7());
    }

    // required int64 field_8 = 8;
    if (has_field_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_8());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes field_9 = 9;
    if (has_field_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_9());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyJoinGuestPlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyJoinGuestPlayer*>(&from));
}

void RequestNotifyJoinGuestPlayer::MergeFrom(const RequestNotifyJoinGuestPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_1()) {
      set_field_1(from.field_1());
    }
    if (from.has_field_2()) {
      set_field_2(from.field_2());
    }
    if (from.has_field_3()) {
      set_field_3(from.field_3());
    }
    if (from.has_field_4()) {
      set_field_4(from.field_4());
    }
    if (from.has_field_5()) {
      set_field_5(from.field_5());
    }
    if (from.has_field_6()) {
      set_field_6(from.field_6());
    }
    if (from.has_field_7()) {
      set_field_7(from.field_7());
    }
    if (from.has_field_8()) {
      set_field_8(from.field_8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_field_9()) {
      set_field_9(from.field_9());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyJoinGuestPlayer::CopyFrom(const RequestNotifyJoinGuestPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyJoinGuestPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void RequestNotifyJoinGuestPlayer::Swap(RequestNotifyJoinGuestPlayer* other) {
  if (other != this) {
    std::swap(field_1_, other->field_1_);
    std::swap(field_2_, other->field_2_);
    std::swap(field_3_, other->field_3_);
    std::swap(field_4_, other->field_4_);
    std::swap(field_5_, other->field_5_);
    std::swap(field_6_, other->field_6_);
    std::swap(field_7_, other->field_7_);
    std::swap(field_8_, other->field_8_);
    std::swap(field_9_, other->field_9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyJoinGuestPlayer::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyJoinGuestPlayerResponse::RequestNotifyJoinGuestPlayerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
}

void RequestNotifyJoinGuestPlayerResponse::InitAsDefaultInstance() {
}

RequestNotifyJoinGuestPlayerResponse::RequestNotifyJoinGuestPlayerResponse(const RequestNotifyJoinGuestPlayerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
}

void RequestNotifyJoinGuestPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyJoinGuestPlayerResponse::~RequestNotifyJoinGuestPlayerResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
  SharedDtor();
}

void RequestNotifyJoinGuestPlayerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyJoinGuestPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyJoinGuestPlayerResponse& RequestNotifyJoinGuestPlayerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyJoinGuestPlayerResponse* RequestNotifyJoinGuestPlayerResponse::default_instance_ = NULL;

RequestNotifyJoinGuestPlayerResponse* RequestNotifyJoinGuestPlayerResponse::New() const {
  return new RequestNotifyJoinGuestPlayerResponse;
}

void RequestNotifyJoinGuestPlayerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyJoinGuestPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
  return false;
#undef DO_
}

void RequestNotifyJoinGuestPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse)
}

int RequestNotifyJoinGuestPlayerResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyJoinGuestPlayerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyJoinGuestPlayerResponse*>(&from));
}

void RequestNotifyJoinGuestPlayerResponse::MergeFrom(const RequestNotifyJoinGuestPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyJoinGuestPlayerResponse::CopyFrom(const RequestNotifyJoinGuestPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyJoinGuestPlayerResponse::IsInitialized() const {

  return true;
}

void RequestNotifyJoinGuestPlayerResponse::Swap(RequestNotifyJoinGuestPlayerResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyJoinGuestPlayerResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyJoinGuestPlayerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyJoinSession::kField1FieldNumber;
const int RequestNotifyJoinSession::kField2FieldNumber;
const int RequestNotifyJoinSession::kField3FieldNumber;
const int RequestNotifyJoinSession::kField4FieldNumber;
#endif  // !_MSC_VER

RequestNotifyJoinSession::RequestNotifyJoinSession()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
}

void RequestNotifyJoinSession::InitAsDefaultInstance() {
}

RequestNotifyJoinSession::RequestNotifyJoinSession(const RequestNotifyJoinSession& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
}

void RequestNotifyJoinSession::SharedCtor() {
  _cached_size_ = 0;
  field_1_ = GOOGLE_LONGLONG(0);
  field_2_ = GOOGLE_LONGLONG(0);
  field_3_ = GOOGLE_LONGLONG(0);
  field_4_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyJoinSession::~RequestNotifyJoinSession() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
  SharedDtor();
}

void RequestNotifyJoinSession::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyJoinSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyJoinSession& RequestNotifyJoinSession::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyJoinSession* RequestNotifyJoinSession::default_instance_ = NULL;

RequestNotifyJoinSession* RequestNotifyJoinSession::New() const {
  return new RequestNotifyJoinSession;
}

void RequestNotifyJoinSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyJoinSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(field_1_, field_4_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyJoinSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 field_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_1_)));
          set_has_field_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field_2;
        break;
      }

      // required int64 field_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_field_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_2_)));
          set_has_field_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_field_3;
        break;
      }

      // required int64 field_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_field_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_3_)));
          set_has_field_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_field_4;
        break;
      }

      // required int64 field_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_field_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_4_)));
          set_has_field_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
  return false;
#undef DO_
}

void RequestNotifyJoinSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
  // required int64 field_1 = 1;
  if (has_field_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field_1(), output);
  }

  // required int64 field_2 = 2;
  if (has_field_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field_2(), output);
  }

  // required int64 field_3 = 3;
  if (has_field_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->field_3(), output);
  }

  // required int64 field_4 = 4;
  if (has_field_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->field_4(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyJoinSession)
}

int RequestNotifyJoinSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 field_1 = 1;
    if (has_field_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_1());
    }

    // required int64 field_2 = 2;
    if (has_field_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_2());
    }

    // required int64 field_3 = 3;
    if (has_field_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_3());
    }

    // required int64 field_4 = 4;
    if (has_field_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_4());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyJoinSession::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyJoinSession*>(&from));
}

void RequestNotifyJoinSession::MergeFrom(const RequestNotifyJoinSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_1()) {
      set_field_1(from.field_1());
    }
    if (from.has_field_2()) {
      set_field_2(from.field_2());
    }
    if (from.has_field_3()) {
      set_field_3(from.field_3());
    }
    if (from.has_field_4()) {
      set_field_4(from.field_4());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyJoinSession::CopyFrom(const RequestNotifyJoinSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyJoinSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestNotifyJoinSession::Swap(RequestNotifyJoinSession* other) {
  if (other != this) {
    std::swap(field_1_, other->field_1_);
    std::swap(field_2_, other->field_2_);
    std::swap(field_3_, other->field_3_);
    std::swap(field_4_, other->field_4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyJoinSession::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyJoinSession";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyJoinSessionResponse::RequestNotifyJoinSessionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
}

void RequestNotifyJoinSessionResponse::InitAsDefaultInstance() {
}

RequestNotifyJoinSessionResponse::RequestNotifyJoinSessionResponse(const RequestNotifyJoinSessionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
}

void RequestNotifyJoinSessionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyJoinSessionResponse::~RequestNotifyJoinSessionResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
  SharedDtor();
}

void RequestNotifyJoinSessionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyJoinSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyJoinSessionResponse& RequestNotifyJoinSessionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyJoinSessionResponse* RequestNotifyJoinSessionResponse::default_instance_ = NULL;

RequestNotifyJoinSessionResponse* RequestNotifyJoinSessionResponse::New() const {
  return new RequestNotifyJoinSessionResponse;
}

void RequestNotifyJoinSessionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyJoinSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
  return false;
#undef DO_
}

void RequestNotifyJoinSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse)
}

int RequestNotifyJoinSessionResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyJoinSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyJoinSessionResponse*>(&from));
}

void RequestNotifyJoinSessionResponse::MergeFrom(const RequestNotifyJoinSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyJoinSessionResponse::CopyFrom(const RequestNotifyJoinSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyJoinSessionResponse::IsInitialized() const {

  return true;
}

void RequestNotifyJoinSessionResponse::Swap(RequestNotifyJoinSessionResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyJoinSessionResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyJoinSessionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyKillEnemy_Enemy_count::kEnemyIdFieldNumber;
const int RequestNotifyKillEnemy_Enemy_count::kEnemyCountFieldNumber;
#endif  // !_MSC_VER

RequestNotifyKillEnemy_Enemy_count::RequestNotifyKillEnemy_Enemy_count()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
}

void RequestNotifyKillEnemy_Enemy_count::InitAsDefaultInstance() {
}

RequestNotifyKillEnemy_Enemy_count::RequestNotifyKillEnemy_Enemy_count(const RequestNotifyKillEnemy_Enemy_count& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
}

void RequestNotifyKillEnemy_Enemy_count::SharedCtor() {
  _cached_size_ = 0;
  enemy_id_ = GOOGLE_LONGLONG(0);
  enemy_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyKillEnemy_Enemy_count::~RequestNotifyKillEnemy_Enemy_count() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
  SharedDtor();
}

void RequestNotifyKillEnemy_Enemy_count::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyKillEnemy_Enemy_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyKillEnemy_Enemy_count& RequestNotifyKillEnemy_Enemy_count::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyKillEnemy_Enemy_count* RequestNotifyKillEnemy_Enemy_count::default_instance_ = NULL;

RequestNotifyKillEnemy_Enemy_count* RequestNotifyKillEnemy_Enemy_count::New() const {
  return new RequestNotifyKillEnemy_Enemy_count;
}

void RequestNotifyKillEnemy_Enemy_count::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyKillEnemy_Enemy_count*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enemy_id_, enemy_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyKillEnemy_Enemy_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 enemy_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enemy_id_)));
          set_has_enemy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enemy_count;
        break;
      }

      // required int64 enemy_count = 2;
      case 2: {
        if (tag == 16) {
         parse_enemy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enemy_count_)));
          set_has_enemy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
  return false;
#undef DO_
}

void RequestNotifyKillEnemy_Enemy_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
  // required int64 enemy_id = 1;
  if (has_enemy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->enemy_id(), output);
  }

  // required int64 enemy_count = 2;
  if (has_enemy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->enemy_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count)
}

int RequestNotifyKillEnemy_Enemy_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 enemy_id = 1;
    if (has_enemy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enemy_id());
    }

    // required int64 enemy_count = 2;
    if (has_enemy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enemy_count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyKillEnemy_Enemy_count::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyKillEnemy_Enemy_count*>(&from));
}

void RequestNotifyKillEnemy_Enemy_count::MergeFrom(const RequestNotifyKillEnemy_Enemy_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_id()) {
      set_enemy_id(from.enemy_id());
    }
    if (from.has_enemy_count()) {
      set_enemy_count(from.enemy_count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyKillEnemy_Enemy_count::CopyFrom(const RequestNotifyKillEnemy_Enemy_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyKillEnemy_Enemy_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestNotifyKillEnemy_Enemy_count::Swap(RequestNotifyKillEnemy_Enemy_count* other) {
  if (other != this) {
    std::swap(enemy_id_, other->enemy_id_);
    std::swap(enemy_count_, other->enemy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyKillEnemy_Enemy_count::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyKillEnemy.Enemy_count";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestNotifyKillEnemy::kEnemyCountFieldNumber;
#endif  // !_MSC_VER

RequestNotifyKillEnemy::RequestNotifyKillEnemy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
}

void RequestNotifyKillEnemy::InitAsDefaultInstance() {
}

RequestNotifyKillEnemy::RequestNotifyKillEnemy(const RequestNotifyKillEnemy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
}

void RequestNotifyKillEnemy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyKillEnemy::~RequestNotifyKillEnemy() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
  SharedDtor();
}

void RequestNotifyKillEnemy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyKillEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyKillEnemy& RequestNotifyKillEnemy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyKillEnemy* RequestNotifyKillEnemy::default_instance_ = NULL;

RequestNotifyKillEnemy* RequestNotifyKillEnemy::New() const {
  return new RequestNotifyKillEnemy;
}

void RequestNotifyKillEnemy::Clear() {
  enemy_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyKillEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group Enemy_count = 1 {
      case 1: {
        if (tag == 11) {
         parse_enemy_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, add_enemy_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(11)) goto parse_enemy_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
  return false;
#undef DO_
}

void RequestNotifyKillEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
  // repeated group Enemy_count = 1 {
  for (int i = 0; i < this->enemy_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      1, this->enemy_count(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyKillEnemy)
}

int RequestNotifyKillEnemy::ByteSize() const {
  int total_size = 0;

  // repeated group Enemy_count = 1 {
  total_size += 2 * this->enemy_count_size();
  for (int i = 0; i < this->enemy_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->enemy_count(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyKillEnemy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyKillEnemy*>(&from));
}

void RequestNotifyKillEnemy::MergeFrom(const RequestNotifyKillEnemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemy_count_.MergeFrom(from.enemy_count_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyKillEnemy::CopyFrom(const RequestNotifyKillEnemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyKillEnemy::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->enemy_count())) return false;
  return true;
}

void RequestNotifyKillEnemy::Swap(RequestNotifyKillEnemy* other) {
  if (other != this) {
    enemy_count_.Swap(&other->enemy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyKillEnemy::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyKillEnemy";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyKillEnemyResponse::RequestNotifyKillEnemyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
}

void RequestNotifyKillEnemyResponse::InitAsDefaultInstance() {
}

RequestNotifyKillEnemyResponse::RequestNotifyKillEnemyResponse(const RequestNotifyKillEnemyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
}

void RequestNotifyKillEnemyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyKillEnemyResponse::~RequestNotifyKillEnemyResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
  SharedDtor();
}

void RequestNotifyKillEnemyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyKillEnemyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyKillEnemyResponse& RequestNotifyKillEnemyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyKillEnemyResponse* RequestNotifyKillEnemyResponse::default_instance_ = NULL;

RequestNotifyKillEnemyResponse* RequestNotifyKillEnemyResponse::New() const {
  return new RequestNotifyKillEnemyResponse;
}

void RequestNotifyKillEnemyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyKillEnemyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
  return false;
#undef DO_
}

void RequestNotifyKillEnemyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse)
}

int RequestNotifyKillEnemyResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyKillEnemyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyKillEnemyResponse*>(&from));
}

void RequestNotifyKillEnemyResponse::MergeFrom(const RequestNotifyKillEnemyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyKillEnemyResponse::CopyFrom(const RequestNotifyKillEnemyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyKillEnemyResponse::IsInitialized() const {

  return true;
}

void RequestNotifyKillEnemyResponse::Swap(RequestNotifyKillEnemyResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyKillEnemyResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyKillEnemyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyKillPlayer::kField1FieldNumber;
const int RequestNotifyKillPlayer::kField2FieldNumber;
const int RequestNotifyKillPlayer::kField3FieldNumber;
const int RequestNotifyKillPlayer::kField4FieldNumber;
const int RequestNotifyKillPlayer::kField5FieldNumber;
#endif  // !_MSC_VER

RequestNotifyKillPlayer::RequestNotifyKillPlayer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
}

void RequestNotifyKillPlayer::InitAsDefaultInstance() {
}

RequestNotifyKillPlayer::RequestNotifyKillPlayer(const RequestNotifyKillPlayer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
}

void RequestNotifyKillPlayer::SharedCtor() {
  _cached_size_ = 0;
  field_1_ = GOOGLE_LONGLONG(0);
  field_2_ = GOOGLE_LONGLONG(0);
  field_3_ = GOOGLE_LONGLONG(0);
  field_4_ = GOOGLE_LONGLONG(0);
  field_5_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyKillPlayer::~RequestNotifyKillPlayer() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
  SharedDtor();
}

void RequestNotifyKillPlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyKillPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyKillPlayer& RequestNotifyKillPlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyKillPlayer* RequestNotifyKillPlayer::default_instance_ = NULL;

RequestNotifyKillPlayer* RequestNotifyKillPlayer::New() const {
  return new RequestNotifyKillPlayer;
}

void RequestNotifyKillPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyKillPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(field_1_, field_5_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyKillPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 field_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_1_)));
          set_has_field_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field_2;
        break;
      }

      // required int64 field_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_field_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_2_)));
          set_has_field_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_field_3;
        break;
      }

      // required int64 field_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_field_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_3_)));
          set_has_field_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_field_4;
        break;
      }

      // required int64 field_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_field_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_4_)));
          set_has_field_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_field_5;
        break;
      }

      // required int64 field_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_field_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_5_)));
          set_has_field_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
  return false;
#undef DO_
}

void RequestNotifyKillPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
  // required int64 field_1 = 1;
  if (has_field_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field_1(), output);
  }

  // required int64 field_2 = 2;
  if (has_field_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field_2(), output);
  }

  // required int64 field_3 = 3;
  if (has_field_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->field_3(), output);
  }

  // required int64 field_4 = 4;
  if (has_field_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->field_4(), output);
  }

  // required int64 field_5 = 5;
  if (has_field_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->field_5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyKillPlayer)
}

int RequestNotifyKillPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 field_1 = 1;
    if (has_field_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_1());
    }

    // required int64 field_2 = 2;
    if (has_field_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_2());
    }

    // required int64 field_3 = 3;
    if (has_field_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_3());
    }

    // required int64 field_4 = 4;
    if (has_field_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_4());
    }

    // required int64 field_5 = 5;
    if (has_field_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_5());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyKillPlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyKillPlayer*>(&from));
}

void RequestNotifyKillPlayer::MergeFrom(const RequestNotifyKillPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_1()) {
      set_field_1(from.field_1());
    }
    if (from.has_field_2()) {
      set_field_2(from.field_2());
    }
    if (from.has_field_3()) {
      set_field_3(from.field_3());
    }
    if (from.has_field_4()) {
      set_field_4(from.field_4());
    }
    if (from.has_field_5()) {
      set_field_5(from.field_5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyKillPlayer::CopyFrom(const RequestNotifyKillPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyKillPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestNotifyKillPlayer::Swap(RequestNotifyKillPlayer* other) {
  if (other != this) {
    std::swap(field_1_, other->field_1_);
    std::swap(field_2_, other->field_2_);
    std::swap(field_3_, other->field_3_);
    std::swap(field_4_, other->field_4_);
    std::swap(field_5_, other->field_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyKillPlayer::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyKillPlayer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyKillPlayerResponse::RequestNotifyKillPlayerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
}

void RequestNotifyKillPlayerResponse::InitAsDefaultInstance() {
}

RequestNotifyKillPlayerResponse::RequestNotifyKillPlayerResponse(const RequestNotifyKillPlayerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
}

void RequestNotifyKillPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyKillPlayerResponse::~RequestNotifyKillPlayerResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
  SharedDtor();
}

void RequestNotifyKillPlayerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyKillPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyKillPlayerResponse& RequestNotifyKillPlayerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyKillPlayerResponse* RequestNotifyKillPlayerResponse::default_instance_ = NULL;

RequestNotifyKillPlayerResponse* RequestNotifyKillPlayerResponse::New() const {
  return new RequestNotifyKillPlayerResponse;
}

void RequestNotifyKillPlayerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyKillPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
  return false;
#undef DO_
}

void RequestNotifyKillPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse)
}

int RequestNotifyKillPlayerResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyKillPlayerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyKillPlayerResponse*>(&from));
}

void RequestNotifyKillPlayerResponse::MergeFrom(const RequestNotifyKillPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyKillPlayerResponse::CopyFrom(const RequestNotifyKillPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyKillPlayerResponse::IsInitialized() const {

  return true;
}

void RequestNotifyKillPlayerResponse::Swap(RequestNotifyKillPlayerResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyKillPlayerResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyKillPlayerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyLeaveGuestPlayer::kField1FieldNumber;
const int RequestNotifyLeaveGuestPlayer::kField2FieldNumber;
const int RequestNotifyLeaveGuestPlayer::kField3FieldNumber;
const int RequestNotifyLeaveGuestPlayer::kField4FieldNumber;
#endif  // !_MSC_VER

RequestNotifyLeaveGuestPlayer::RequestNotifyLeaveGuestPlayer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
}

void RequestNotifyLeaveGuestPlayer::InitAsDefaultInstance() {
}

RequestNotifyLeaveGuestPlayer::RequestNotifyLeaveGuestPlayer(const RequestNotifyLeaveGuestPlayer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
}

void RequestNotifyLeaveGuestPlayer::SharedCtor() {
  _cached_size_ = 0;
  field_1_ = GOOGLE_LONGLONG(0);
  field_2_ = GOOGLE_LONGLONG(0);
  field_3_ = GOOGLE_LONGLONG(0);
  field_4_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyLeaveGuestPlayer::~RequestNotifyLeaveGuestPlayer() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
  SharedDtor();
}

void RequestNotifyLeaveGuestPlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyLeaveGuestPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyLeaveGuestPlayer& RequestNotifyLeaveGuestPlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyLeaveGuestPlayer* RequestNotifyLeaveGuestPlayer::default_instance_ = NULL;

RequestNotifyLeaveGuestPlayer* RequestNotifyLeaveGuestPlayer::New() const {
  return new RequestNotifyLeaveGuestPlayer;
}

void RequestNotifyLeaveGuestPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyLeaveGuestPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(field_1_, field_4_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyLeaveGuestPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 field_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_1_)));
          set_has_field_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field_2;
        break;
      }

      // required int64 field_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_field_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_2_)));
          set_has_field_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_field_3;
        break;
      }

      // required int64 field_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_field_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_3_)));
          set_has_field_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_field_4;
        break;
      }

      // required int64 field_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_field_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_4_)));
          set_has_field_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
  return false;
#undef DO_
}

void RequestNotifyLeaveGuestPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
  // required int64 field_1 = 1;
  if (has_field_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field_1(), output);
  }

  // required int64 field_2 = 2;
  if (has_field_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field_2(), output);
  }

  // required int64 field_3 = 3;
  if (has_field_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->field_3(), output);
  }

  // required int64 field_4 = 4;
  if (has_field_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->field_4(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer)
}

int RequestNotifyLeaveGuestPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 field_1 = 1;
    if (has_field_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_1());
    }

    // required int64 field_2 = 2;
    if (has_field_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_2());
    }

    // required int64 field_3 = 3;
    if (has_field_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_3());
    }

    // required int64 field_4 = 4;
    if (has_field_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_4());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyLeaveGuestPlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyLeaveGuestPlayer*>(&from));
}

void RequestNotifyLeaveGuestPlayer::MergeFrom(const RequestNotifyLeaveGuestPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_1()) {
      set_field_1(from.field_1());
    }
    if (from.has_field_2()) {
      set_field_2(from.field_2());
    }
    if (from.has_field_3()) {
      set_field_3(from.field_3());
    }
    if (from.has_field_4()) {
      set_field_4(from.field_4());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyLeaveGuestPlayer::CopyFrom(const RequestNotifyLeaveGuestPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyLeaveGuestPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestNotifyLeaveGuestPlayer::Swap(RequestNotifyLeaveGuestPlayer* other) {
  if (other != this) {
    std::swap(field_1_, other->field_1_);
    std::swap(field_2_, other->field_2_);
    std::swap(field_3_, other->field_3_);
    std::swap(field_4_, other->field_4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyLeaveGuestPlayer::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyLeaveGuestPlayerResponse::RequestNotifyLeaveGuestPlayerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
}

void RequestNotifyLeaveGuestPlayerResponse::InitAsDefaultInstance() {
}

RequestNotifyLeaveGuestPlayerResponse::RequestNotifyLeaveGuestPlayerResponse(const RequestNotifyLeaveGuestPlayerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
}

void RequestNotifyLeaveGuestPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyLeaveGuestPlayerResponse::~RequestNotifyLeaveGuestPlayerResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
  SharedDtor();
}

void RequestNotifyLeaveGuestPlayerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyLeaveGuestPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyLeaveGuestPlayerResponse& RequestNotifyLeaveGuestPlayerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyLeaveGuestPlayerResponse* RequestNotifyLeaveGuestPlayerResponse::default_instance_ = NULL;

RequestNotifyLeaveGuestPlayerResponse* RequestNotifyLeaveGuestPlayerResponse::New() const {
  return new RequestNotifyLeaveGuestPlayerResponse;
}

void RequestNotifyLeaveGuestPlayerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyLeaveGuestPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
  return false;
#undef DO_
}

void RequestNotifyLeaveGuestPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse)
}

int RequestNotifyLeaveGuestPlayerResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyLeaveGuestPlayerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyLeaveGuestPlayerResponse*>(&from));
}

void RequestNotifyLeaveGuestPlayerResponse::MergeFrom(const RequestNotifyLeaveGuestPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyLeaveGuestPlayerResponse::CopyFrom(const RequestNotifyLeaveGuestPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyLeaveGuestPlayerResponse::IsInitialized() const {

  return true;
}

void RequestNotifyLeaveGuestPlayerResponse::Swap(RequestNotifyLeaveGuestPlayerResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyLeaveGuestPlayerResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyLeaveGuestPlayerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyLeaveSession::kField1FieldNumber;
const int RequestNotifyLeaveSession::kField2FieldNumber;
const int RequestNotifyLeaveSession::kField3FieldNumber;
const int RequestNotifyLeaveSession::kField4FieldNumber;
#endif  // !_MSC_VER

RequestNotifyLeaveSession::RequestNotifyLeaveSession()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
}

void RequestNotifyLeaveSession::InitAsDefaultInstance() {
}

RequestNotifyLeaveSession::RequestNotifyLeaveSession(const RequestNotifyLeaveSession& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
}

void RequestNotifyLeaveSession::SharedCtor() {
  _cached_size_ = 0;
  field_1_ = GOOGLE_LONGLONG(0);
  field_2_ = GOOGLE_LONGLONG(0);
  field_3_ = GOOGLE_LONGLONG(0);
  field_4_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyLeaveSession::~RequestNotifyLeaveSession() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
  SharedDtor();
}

void RequestNotifyLeaveSession::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyLeaveSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyLeaveSession& RequestNotifyLeaveSession::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyLeaveSession* RequestNotifyLeaveSession::default_instance_ = NULL;

RequestNotifyLeaveSession* RequestNotifyLeaveSession::New() const {
  return new RequestNotifyLeaveSession;
}

void RequestNotifyLeaveSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestNotifyLeaveSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(field_1_, field_4_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyLeaveSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 field_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_1_)));
          set_has_field_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field_2;
        break;
      }

      // required int64 field_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_field_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_2_)));
          set_has_field_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_field_3;
        break;
      }

      // required int64 field_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_field_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_3_)));
          set_has_field_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_field_4;
        break;
      }

      // required int64 field_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_field_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_4_)));
          set_has_field_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
  return false;
#undef DO_
}

void RequestNotifyLeaveSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
  // required int64 field_1 = 1;
  if (has_field_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field_1(), output);
  }

  // required int64 field_2 = 2;
  if (has_field_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field_2(), output);
  }

  // required int64 field_3 = 3;
  if (has_field_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->field_3(), output);
  }

  // required int64 field_4 = 4;
  if (has_field_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->field_4(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyLeaveSession)
}

int RequestNotifyLeaveSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 field_1 = 1;
    if (has_field_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_1());
    }

    // required int64 field_2 = 2;
    if (has_field_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_2());
    }

    // required int64 field_3 = 3;
    if (has_field_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_3());
    }

    // required int64 field_4 = 4;
    if (has_field_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_4());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyLeaveSession::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyLeaveSession*>(&from));
}

void RequestNotifyLeaveSession::MergeFrom(const RequestNotifyLeaveSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_1()) {
      set_field_1(from.field_1());
    }
    if (from.has_field_2()) {
      set_field_2(from.field_2());
    }
    if (from.has_field_3()) {
      set_field_3(from.field_3());
    }
    if (from.has_field_4()) {
      set_field_4(from.field_4());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyLeaveSession::CopyFrom(const RequestNotifyLeaveSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyLeaveSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestNotifyLeaveSession::Swap(RequestNotifyLeaveSession* other) {
  if (other != this) {
    std::swap(field_1_, other->field_1_);
    std::swap(field_2_, other->field_2_);
    std::swap(field_3_, other->field_3_);
    std::swap(field_4_, other->field_4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyLeaveSession::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyLeaveSession";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyLeaveSessionResponse::RequestNotifyLeaveSessionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
}

void RequestNotifyLeaveSessionResponse::InitAsDefaultInstance() {
}

RequestNotifyLeaveSessionResponse::RequestNotifyLeaveSessionResponse(const RequestNotifyLeaveSessionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
}

void RequestNotifyLeaveSessionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyLeaveSessionResponse::~RequestNotifyLeaveSessionResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
  SharedDtor();
}

void RequestNotifyLeaveSessionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyLeaveSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyLeaveSessionResponse& RequestNotifyLeaveSessionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyLeaveSessionResponse* RequestNotifyLeaveSessionResponse::default_instance_ = NULL;

RequestNotifyLeaveSessionResponse* RequestNotifyLeaveSessionResponse::New() const {
  return new RequestNotifyLeaveSessionResponse;
}

void RequestNotifyLeaveSessionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyLeaveSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
  return false;
#undef DO_
}

void RequestNotifyLeaveSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse)
}

int RequestNotifyLeaveSessionResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyLeaveSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyLeaveSessionResponse*>(&from));
}

void RequestNotifyLeaveSessionResponse::MergeFrom(const RequestNotifyLeaveSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyLeaveSessionResponse::CopyFrom(const RequestNotifyLeaveSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyLeaveSessionResponse::IsInitialized() const {

  return true;
}

void RequestNotifyLeaveSessionResponse::Swap(RequestNotifyLeaveSessionResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyLeaveSessionResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyLeaveSessionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyMirrorKnight::kField1FieldNumber;
#endif  // !_MSC_VER

RequestNotifyMirrorKnight::RequestNotifyMirrorKnight()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
}

void RequestNotifyMirrorKnight::InitAsDefaultInstance() {
}

RequestNotifyMirrorKnight::RequestNotifyMirrorKnight(const RequestNotifyMirrorKnight& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
}

void RequestNotifyMirrorKnight::SharedCtor() {
  _cached_size_ = 0;
  field_1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyMirrorKnight::~RequestNotifyMirrorKnight() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
  SharedDtor();
}

void RequestNotifyMirrorKnight::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyMirrorKnight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyMirrorKnight& RequestNotifyMirrorKnight::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyMirrorKnight* RequestNotifyMirrorKnight::default_instance_ = NULL;

RequestNotifyMirrorKnight* RequestNotifyMirrorKnight::New() const {
  return new RequestNotifyMirrorKnight;
}

void RequestNotifyMirrorKnight::Clear() {
  field_1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyMirrorKnight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 field_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_1_)));
          set_has_field_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
  return false;
#undef DO_
}

void RequestNotifyMirrorKnight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
  // required int64 field_1 = 1;
  if (has_field_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field_1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight)
}

int RequestNotifyMirrorKnight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 field_1 = 1;
    if (has_field_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_1());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyMirrorKnight::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyMirrorKnight*>(&from));
}

void RequestNotifyMirrorKnight::MergeFrom(const RequestNotifyMirrorKnight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_1()) {
      set_field_1(from.field_1());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyMirrorKnight::CopyFrom(const RequestNotifyMirrorKnight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyMirrorKnight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestNotifyMirrorKnight::Swap(RequestNotifyMirrorKnight* other) {
  if (other != this) {
    std::swap(field_1_, other->field_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyMirrorKnight::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyMirrorKnight";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyMirrorKnightResponse::RequestNotifyMirrorKnightResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
}

void RequestNotifyMirrorKnightResponse::InitAsDefaultInstance() {
}

RequestNotifyMirrorKnightResponse::RequestNotifyMirrorKnightResponse(const RequestNotifyMirrorKnightResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
}

void RequestNotifyMirrorKnightResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyMirrorKnightResponse::~RequestNotifyMirrorKnightResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
  SharedDtor();
}

void RequestNotifyMirrorKnightResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyMirrorKnightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyMirrorKnightResponse& RequestNotifyMirrorKnightResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyMirrorKnightResponse* RequestNotifyMirrorKnightResponse::default_instance_ = NULL;

RequestNotifyMirrorKnightResponse* RequestNotifyMirrorKnightResponse::New() const {
  return new RequestNotifyMirrorKnightResponse;
}

void RequestNotifyMirrorKnightResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyMirrorKnightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
  return false;
#undef DO_
}

void RequestNotifyMirrorKnightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse)
}

int RequestNotifyMirrorKnightResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyMirrorKnightResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyMirrorKnightResponse*>(&from));
}

void RequestNotifyMirrorKnightResponse::MergeFrom(const RequestNotifyMirrorKnightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyMirrorKnightResponse::CopyFrom(const RequestNotifyMirrorKnightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyMirrorKnightResponse::IsInitialized() const {

  return true;
}

void RequestNotifyMirrorKnightResponse::Swap(RequestNotifyMirrorKnightResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyMirrorKnightResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyMirrorKnightResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNotifyOfflineDeathCount::kCountFieldNumber;
#endif  // !_MSC_VER

RequestNotifyOfflineDeathCount::RequestNotifyOfflineDeathCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
}

void RequestNotifyOfflineDeathCount::InitAsDefaultInstance() {
}

RequestNotifyOfflineDeathCount::RequestNotifyOfflineDeathCount(const RequestNotifyOfflineDeathCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
}

void RequestNotifyOfflineDeathCount::SharedCtor() {
  _cached_size_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyOfflineDeathCount::~RequestNotifyOfflineDeathCount() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
  SharedDtor();
}

void RequestNotifyOfflineDeathCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyOfflineDeathCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyOfflineDeathCount& RequestNotifyOfflineDeathCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyOfflineDeathCount* RequestNotifyOfflineDeathCount::default_instance_ = NULL;

RequestNotifyOfflineDeathCount* RequestNotifyOfflineDeathCount::New() const {
  return new RequestNotifyOfflineDeathCount;
}

void RequestNotifyOfflineDeathCount::Clear() {
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyOfflineDeathCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
  return false;
#undef DO_
}

void RequestNotifyOfflineDeathCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
  // required int64 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount)
}

int RequestNotifyOfflineDeathCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyOfflineDeathCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyOfflineDeathCount*>(&from));
}

void RequestNotifyOfflineDeathCount::MergeFrom(const RequestNotifyOfflineDeathCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyOfflineDeathCount::CopyFrom(const RequestNotifyOfflineDeathCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyOfflineDeathCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestNotifyOfflineDeathCount::Swap(RequestNotifyOfflineDeathCount* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyOfflineDeathCount::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCount";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyOfflineDeathCountResponse::RequestNotifyOfflineDeathCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
}

void RequestNotifyOfflineDeathCountResponse::InitAsDefaultInstance() {
}

RequestNotifyOfflineDeathCountResponse::RequestNotifyOfflineDeathCountResponse(const RequestNotifyOfflineDeathCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
}

void RequestNotifyOfflineDeathCountResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyOfflineDeathCountResponse::~RequestNotifyOfflineDeathCountResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
  SharedDtor();
}

void RequestNotifyOfflineDeathCountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyOfflineDeathCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyOfflineDeathCountResponse& RequestNotifyOfflineDeathCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyOfflineDeathCountResponse* RequestNotifyOfflineDeathCountResponse::default_instance_ = NULL;

RequestNotifyOfflineDeathCountResponse* RequestNotifyOfflineDeathCountResponse::New() const {
  return new RequestNotifyOfflineDeathCountResponse;
}

void RequestNotifyOfflineDeathCountResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyOfflineDeathCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
  return false;
#undef DO_
}

void RequestNotifyOfflineDeathCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse)
}

int RequestNotifyOfflineDeathCountResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyOfflineDeathCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyOfflineDeathCountResponse*>(&from));
}

void RequestNotifyOfflineDeathCountResponse::MergeFrom(const RequestNotifyOfflineDeathCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyOfflineDeathCountResponse::CopyFrom(const RequestNotifyOfflineDeathCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyOfflineDeathCountResponse::IsInitialized() const {

  return true;
}

void RequestNotifyOfflineDeathCountResponse::Swap(RequestNotifyOfflineDeathCountResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyOfflineDeathCountResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyOfflineDeathCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingParameter::kCalibrationVersionFieldNumber;
const int MatchingParameter::kSoulLevelFieldNumber;
const int MatchingParameter::kClearCountFieldNumber;
const int MatchingParameter::kUnknown4FieldNumber;
const int MatchingParameter::kCovenantFieldNumber;
const int MatchingParameter::kUnknown7FieldNumber;
const int MatchingParameter::kDisableCrossRegionPlayFieldNumber;
const int MatchingParameter::kUnknown9FieldNumber;
const int MatchingParameter::kUnknown10FieldNumber;
const int MatchingParameter::kNameEngravedRingFieldNumber;
const int MatchingParameter::kSoulMemoryFieldNumber;
#endif  // !_MSC_VER

MatchingParameter::MatchingParameter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.MatchingParameter)
}

void MatchingParameter::InitAsDefaultInstance() {
}

MatchingParameter::MatchingParameter(const MatchingParameter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.MatchingParameter)
}

void MatchingParameter::SharedCtor() {
  _cached_size_ = 0;
  calibration_version_ = 0u;
  soul_level_ = 0u;
  clear_count_ = 0u;
  unknown_4_ = 0u;
  covenant_ = 0u;
  unknown_7_ = 0u;
  disable_cross_region_play_ = 0u;
  unknown_9_ = 0u;
  unknown_10_ = 0u;
  name_engraved_ring_ = 0u;
  soul_memory_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingParameter::~MatchingParameter() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.MatchingParameter)
  SharedDtor();
}

void MatchingParameter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MatchingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MatchingParameter& MatchingParameter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

MatchingParameter* MatchingParameter::default_instance_ = NULL;

MatchingParameter* MatchingParameter::New() const {
  return new MatchingParameter;
}

void MatchingParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchingParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(calibration_version_, unknown_9_);
  }
  ZR_(unknown_10_, soul_memory_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MatchingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.MatchingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 calibration_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_version_)));
          set_has_calibration_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_soul_level;
        break;
      }

      // required uint32 soul_level = 2;
      case 2: {
        if (tag == 16) {
         parse_soul_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_level_)));
          set_has_soul_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clear_count;
        break;
      }

      // required uint32 clear_count = 3;
      case 3: {
        if (tag == 24) {
         parse_clear_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_count_)));
          set_has_clear_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // required uint32 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_covenant;
        break;
      }

      // required uint32 covenant = 6;
      case 6: {
        if (tag == 48) {
         parse_covenant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &covenant_)));
          set_has_covenant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unknown_7;
        break;
      }

      // required uint32 unknown_7 = 7;
      case 7: {
        if (tag == 56) {
         parse_unknown_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_7_)));
          set_has_unknown_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_disable_cross_region_play;
        break;
      }

      // required uint32 disable_cross_region_play = 8;
      case 8: {
        if (tag == 64) {
         parse_disable_cross_region_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disable_cross_region_play_)));
          set_has_disable_cross_region_play();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_unknown_9;
        break;
      }

      // required uint32 unknown_9 = 9;
      case 9: {
        if (tag == 72) {
         parse_unknown_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_9_)));
          set_has_unknown_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_unknown_10;
        break;
      }

      // required uint32 unknown_10 = 10;
      case 10: {
        if (tag == 80) {
         parse_unknown_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_10_)));
          set_has_unknown_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_name_engraved_ring;
        break;
      }

      // required uint32 name_engraved_ring = 11;
      case 11: {
        if (tag == 88) {
         parse_name_engraved_ring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_engraved_ring_)));
          set_has_name_engraved_ring();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_soul_memory;
        break;
      }

      // required uint32 soul_memory = 12;
      case 12: {
        if (tag == 96) {
         parse_soul_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_memory_)));
          set_has_soul_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.MatchingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.MatchingParameter)
  return false;
#undef DO_
}

void MatchingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.MatchingParameter)
  // required uint32 calibration_version = 1;
  if (has_calibration_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->calibration_version(), output);
  }

  // required uint32 soul_level = 2;
  if (has_soul_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->soul_level(), output);
  }

  // required uint32 clear_count = 3;
  if (has_clear_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clear_count(), output);
  }

  // required uint32 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unknown_4(), output);
  }

  // required uint32 covenant = 6;
  if (has_covenant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->covenant(), output);
  }

  // required uint32 unknown_7 = 7;
  if (has_unknown_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unknown_7(), output);
  }

  // required uint32 disable_cross_region_play = 8;
  if (has_disable_cross_region_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->disable_cross_region_play(), output);
  }

  // required uint32 unknown_9 = 9;
  if (has_unknown_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->unknown_9(), output);
  }

  // required uint32 unknown_10 = 10;
  if (has_unknown_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->unknown_10(), output);
  }

  // required uint32 name_engraved_ring = 11;
  if (has_name_engraved_ring()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->name_engraved_ring(), output);
  }

  // required uint32 soul_memory = 12;
  if (has_soul_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->soul_memory(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.MatchingParameter)
}

int MatchingParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 calibration_version = 1;
    if (has_calibration_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_version());
    }

    // required uint32 soul_level = 2;
    if (has_soul_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_level());
    }

    // required uint32 clear_count = 3;
    if (has_clear_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clear_count());
    }

    // required uint32 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

    // required uint32 covenant = 6;
    if (has_covenant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->covenant());
    }

    // required uint32 unknown_7 = 7;
    if (has_unknown_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_7());
    }

    // required uint32 disable_cross_region_play = 8;
    if (has_disable_cross_region_play()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disable_cross_region_play());
    }

    // required uint32 unknown_9 = 9;
    if (has_unknown_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_9());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 unknown_10 = 10;
    if (has_unknown_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_10());
    }

    // required uint32 name_engraved_ring = 11;
    if (has_name_engraved_ring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_engraved_ring());
    }

    // required uint32 soul_memory = 12;
    if (has_soul_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_memory());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingParameter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MatchingParameter*>(&from));
}

void MatchingParameter::MergeFrom(const MatchingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_calibration_version()) {
      set_calibration_version(from.calibration_version());
    }
    if (from.has_soul_level()) {
      set_soul_level(from.soul_level());
    }
    if (from.has_clear_count()) {
      set_clear_count(from.clear_count());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_covenant()) {
      set_covenant(from.covenant());
    }
    if (from.has_unknown_7()) {
      set_unknown_7(from.unknown_7());
    }
    if (from.has_disable_cross_region_play()) {
      set_disable_cross_region_play(from.disable_cross_region_play());
    }
    if (from.has_unknown_9()) {
      set_unknown_9(from.unknown_9());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unknown_10()) {
      set_unknown_10(from.unknown_10());
    }
    if (from.has_name_engraved_ring()) {
      set_name_engraved_ring(from.name_engraved_ring());
    }
    if (from.has_soul_memory()) {
      set_soul_memory(from.soul_memory());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MatchingParameter::CopyFrom(const MatchingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void MatchingParameter::Swap(MatchingParameter* other) {
  if (other != this) {
    std::swap(calibration_version_, other->calibration_version_);
    std::swap(soul_level_, other->soul_level_);
    std::swap(clear_count_, other->clear_count_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(covenant_, other->covenant_);
    std::swap(unknown_7_, other->unknown_7_);
    std::swap(disable_cross_region_play_, other->disable_cross_region_play_);
    std::swap(unknown_9_, other->unknown_9_);
    std::swap(unknown_10_, other->unknown_10_);
    std::swap(name_engraved_ring_, other->name_engraved_ring_);
    std::swap(soul_memory_, other->soul_memory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MatchingParameter::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.MatchingParameter";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestSummonSign::kPushMessageIdFieldNumber;
const int PushRequestSummonSign::kPlayerIdFieldNumber;
const int PushRequestSummonSign::kSignIdFieldNumber;
const int PushRequestSummonSign::kPlayerStructFieldNumber;
const int PushRequestSummonSign::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

PushRequestSummonSign::PushRequestSummonSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestSummonSign)
}

void PushRequestSummonSign::InitAsDefaultInstance() {
}

PushRequestSummonSign::PushRequestSummonSign(const PushRequestSummonSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestSummonSign)
}

void PushRequestSummonSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  sign_id_ = GOOGLE_LONGLONG(0);
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestSummonSign::~PushRequestSummonSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestSummonSign)
  SharedDtor();
}

void PushRequestSummonSign::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestSummonSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestSummonSign& PushRequestSummonSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestSummonSign* PushRequestSummonSign::default_instance_ = NULL;

PushRequestSummonSign* PushRequestSummonSign::New() const {
  return new PushRequestSummonSign;
}

void PushRequestSummonSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestSummonSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, sign_id_);
    push_message_id_ = 925;
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestSummonSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestSummonSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sign_id;
        break;
      }

      // required int64 sign_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 4;
      case 4: {
        if (tag == 34) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 5;
      case 5: {
        if (tag == 42) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestSummonSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestSummonSign)
  return false;
#undef DO_
}

void PushRequestSummonSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestSummonSign)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 sign_id = 3;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sign_id(), output);
  }

  // required bytes player_struct = 4;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->player_struct(), output);
  }

  // required string player_steam_id = 5;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestSummonSign)
}

int PushRequestSummonSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 sign_id = 3;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

    // required bytes player_struct = 4;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

    // required string player_steam_id = 5;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestSummonSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestSummonSign*>(&from));
}

void PushRequestSummonSign::MergeFrom(const PushRequestSummonSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestSummonSign::CopyFrom(const PushRequestSummonSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestSummonSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PushRequestSummonSign::Swap(PushRequestSummonSign* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestSummonSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestSummonSign";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSummonSign::kOnlineAreaIdFieldNumber;
const int RequestSummonSign::kSignInfoFieldNumber;
const int RequestSummonSign::kPlayerStructFieldNumber;
const int RequestSummonSign::kCellIdFieldNumber;
#endif  // !_MSC_VER

RequestSummonSign::RequestSummonSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSummonSign)
}

void RequestSummonSign::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(
      ::DS2_Frpg2RequestMessage::SignInfo::internal_default_instance());
#else
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(&::DS2_Frpg2RequestMessage::SignInfo::default_instance());
#endif
}

RequestSummonSign::RequestSummonSign(const RequestSummonSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSummonSign)
}

void RequestSummonSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  sign_info_ = NULL;
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSummonSign::~RequestSummonSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSummonSign)
  SharedDtor();
}

void RequestSummonSign::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sign_info_;
  }
}

void RequestSummonSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSummonSign& RequestSummonSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSummonSign* RequestSummonSign::default_instance_ = NULL;

RequestSummonSign* RequestSummonSign::New() const {
  return new RequestSummonSign;
}

void RequestSummonSign::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    online_area_id_ = GOOGLE_LONGLONG(0);
    if (has_sign_info()) {
      if (sign_info_ != NULL) sign_info_->::DS2_Frpg2RequestMessage::SignInfo::Clear();
    }
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
    cell_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSummonSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSummonSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_info;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 3;
      case 3: {
        if (tag == 26) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSummonSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSummonSign)
  return false;
#undef DO_
}

void RequestSummonSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSummonSign)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->sign_info(), output);
  }

  // required bytes player_struct = 3;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->player_struct(), output);
  }

  // required int64 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cell_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSummonSign)
}

int RequestSummonSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_info());
    }

    // required bytes player_struct = 3;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

    // required int64 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSummonSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSummonSign*>(&from));
}

void RequestSummonSign::MergeFrom(const RequestSummonSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_sign_info()) {
      mutable_sign_info()->::DS2_Frpg2RequestMessage::SignInfo::MergeFrom(from.sign_info());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSummonSign::CopyFrom(const RequestSummonSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSummonSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_sign_info()) {
    if (!this->sign_info().IsInitialized()) return false;
  }
  return true;
}

void RequestSummonSign::Swap(RequestSummonSign* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSummonSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSummonSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSummonSignResponse::RequestSummonSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
}

void RequestSummonSignResponse::InitAsDefaultInstance() {
}

RequestSummonSignResponse::RequestSummonSignResponse(const RequestSummonSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
}

void RequestSummonSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSummonSignResponse::~RequestSummonSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
  SharedDtor();
}

void RequestSummonSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSummonSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSummonSignResponse& RequestSummonSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSummonSignResponse* RequestSummonSignResponse::default_instance_ = NULL;

RequestSummonSignResponse* RequestSummonSignResponse::New() const {
  return new RequestSummonSignResponse;
}

void RequestSummonSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSummonSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
  return false;
#undef DO_
}

void RequestSummonSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSummonSignResponse)
}

int RequestSummonSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSummonSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSummonSignResponse*>(&from));
}

void RequestSummonSignResponse::MergeFrom(const RequestSummonSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSummonSignResponse::CopyFrom(const RequestSummonSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSummonSignResponse::IsInitialized() const {

  return true;
}

void RequestSummonSignResponse::Swap(RequestSummonSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSummonSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSummonSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRejectSign::kPushMessageIdFieldNumber;
const int PushRequestRejectSign::kSignInfoFieldNumber;
const int PushRequestRejectSign::kErrorFieldNumber;
const int PushRequestRejectSign::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

PushRequestRejectSign::PushRequestRejectSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRejectSign)
}

void PushRequestRejectSign::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(
      ::DS2_Frpg2RequestMessage::SignInfo::internal_default_instance());
#else
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(&::DS2_Frpg2RequestMessage::SignInfo::default_instance());
#endif
}

PushRequestRejectSign::PushRequestRejectSign(const PushRequestRejectSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRejectSign)
}

void PushRequestRejectSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  sign_info_ = NULL;
  error_ = 0;
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRejectSign::~PushRequestRejectSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRejectSign)
  SharedDtor();
}

void PushRequestRejectSign::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sign_info_;
  }
}

void PushRequestRejectSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRejectSign& PushRequestRejectSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRejectSign* PushRequestRejectSign::default_instance_ = NULL;

PushRequestRejectSign* PushRequestRejectSign::New() const {
  return new PushRequestRejectSign;
}

void PushRequestRejectSign::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    push_message_id_ = 925;
    if (has_sign_info()) {
      if (sign_info_ != NULL) sign_info_->::DS2_Frpg2RequestMessage::SignInfo::Clear();
    }
    error_ = 0;
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRejectSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRejectSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_info;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::SummonErrorId_IsValid(value)) {
            set_error(static_cast< ::DS2_Frpg2RequestMessage::SummonErrorId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 4;
      case 4: {
        if (tag == 34) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRejectSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRejectSign)
  return false;
#undef DO_
}

void PushRequestRejectSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRejectSign)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->sign_info(), output);
  }

  // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  // required string player_steam_id = 4;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRejectSign)
}

int PushRequestRejectSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_info());
    }

    // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // required string player_steam_id = 4;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRejectSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRejectSign*>(&from));
}

void PushRequestRejectSign::MergeFrom(const PushRequestRejectSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_sign_info()) {
      mutable_sign_info()->::DS2_Frpg2RequestMessage::SignInfo::MergeFrom(from.sign_info());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRejectSign::CopyFrom(const PushRequestRejectSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRejectSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_sign_info()) {
    if (!this->sign_info().IsInitialized()) return false;
  }
  return true;
}

void PushRequestRejectSign::Swap(PushRequestRejectSign* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(error_, other->error_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRejectSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRejectSign";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRemoveSign::kPushMessageIdFieldNumber;
const int PushRequestRemoveSign::kPlayerIdFieldNumber;
const int PushRequestRemoveSign::kSignIdFieldNumber;
const int PushRequestRemoveSign::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

PushRequestRemoveSign::PushRequestRemoveSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
}

void PushRequestRemoveSign::InitAsDefaultInstance() {
}

PushRequestRemoveSign::PushRequestRemoveSign(const PushRequestRemoveSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
}

void PushRequestRemoveSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  sign_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRemoveSign::~PushRequestRemoveSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
  SharedDtor();
}

void PushRequestRemoveSign::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRemoveSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRemoveSign& PushRequestRemoveSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRemoveSign* PushRequestRemoveSign::default_instance_ = NULL;

PushRequestRemoveSign* PushRequestRemoveSign::New() const {
  return new PushRequestRemoveSign;
}

void PushRequestRemoveSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestRemoveSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(player_id_, sign_id_);
    push_message_id_ = 925;
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRemoveSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sign_id;
        break;
      }

      // required int64 sign_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 4;
      case 4: {
        if (tag == 34) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
  return false;
#undef DO_
}

void PushRequestRemoveSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 sign_id = 3;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sign_id(), output);
  }

  // required string player_steam_id = 4;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRemoveSign)
}

int PushRequestRemoveSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 sign_id = 3;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

    // required string player_steam_id = 4;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRemoveSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRemoveSign*>(&from));
}

void PushRequestRemoveSign::MergeFrom(const PushRequestRemoveSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRemoveSign::CopyFrom(const PushRequestRemoveSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRemoveSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PushRequestRemoveSign::Swap(PushRequestRemoveSign* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRemoveSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRemoveSign";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateSign::kOnlineAreaIdFieldNumber;
const int RequestCreateSign::kMatchingParameterFieldNumber;
const int RequestCreateSign::kPlayerStructFieldNumber;
const int RequestCreateSign::kCellIdFieldNumber;
const int RequestCreateSign::kSignTypeFieldNumber;
#endif  // !_MSC_VER

RequestCreateSign::RequestCreateSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateSign)
}

void RequestCreateSign::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestCreateSign::RequestCreateSign(const RequestCreateSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateSign)
}

void RequestCreateSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = 0u;
  matching_parameter_ = NULL;
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_id_ = 0u;
  sign_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateSign::~RequestCreateSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateSign)
  SharedDtor();
}

void RequestCreateSign::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestCreateSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateSign& RequestCreateSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateSign* RequestCreateSign::default_instance_ = NULL;

RequestCreateSign* RequestCreateSign::New() const {
  return new RequestCreateSign;
}

void RequestCreateSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestCreateSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(online_area_id_, cell_id_);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
    sign_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 2;
      case 2: {
        if (tag == 18) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 3;
      case 3: {
        if (tag == 26) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sign_type;
        break;
      }

      // required uint32 sign_type = 5;
      case 5: {
        if (tag == 40) {
         parse_sign_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_type_)));
          set_has_sign_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateSign)
  return false;
#undef DO_
}

void RequestCreateSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateSign)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 2;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->matching_parameter(), output);
  }

  // required bytes player_struct = 3;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->player_struct(), output);
  }

  // required uint32 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // required uint32 sign_type = 5;
  if (has_sign_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sign_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateSign)
}

int RequestCreateSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 2;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required bytes player_struct = 3;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

    // required uint32 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 sign_type = 5;
    if (has_sign_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateSign*>(&from));
}

void RequestCreateSign::MergeFrom(const RequestCreateSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_sign_type()) {
      set_sign_type(from.sign_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateSign::CopyFrom(const RequestCreateSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestCreateSign::Swap(RequestCreateSign* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(sign_type_, other->sign_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateSign";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateSignResponse::kSignIdFieldNumber;
#endif  // !_MSC_VER

RequestCreateSignResponse::RequestCreateSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
}

void RequestCreateSignResponse::InitAsDefaultInstance() {
}

RequestCreateSignResponse::RequestCreateSignResponse(const RequestCreateSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
}

void RequestCreateSignResponse::SharedCtor() {
  _cached_size_ = 0;
  sign_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateSignResponse::~RequestCreateSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
  SharedDtor();
}

void RequestCreateSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateSignResponse& RequestCreateSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateSignResponse* RequestCreateSignResponse::default_instance_ = NULL;

RequestCreateSignResponse* RequestCreateSignResponse::New() const {
  return new RequestCreateSignResponse;
}

void RequestCreateSignResponse::Clear() {
  sign_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sign_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
  return false;
#undef DO_
}

void RequestCreateSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
  // required uint32 sign_id = 1;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sign_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateSignResponse)
}

int RequestCreateSignResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sign_id = 1;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateSignResponse*>(&from));
}

void RequestCreateSignResponse::MergeFrom(const RequestCreateSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateSignResponse::CopyFrom(const RequestCreateSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateSignResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCreateSignResponse::Swap(RequestCreateSignResponse* other) {
  if (other != this) {
    std::swap(sign_id_, other->sign_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetSignList::kOnlineAreaIdFieldNumber;
const int RequestGetSignList::kSearchAreasFieldNumber;
const int RequestGetSignList::kMaxSignsFieldNumber;
const int RequestGetSignList::kMatchingParameterFieldNumber;
const int RequestGetSignList::kUnknown5FieldNumber;
const int RequestGetSignList::kUnknown6FieldNumber;
const int RequestGetSignList::kUnknown7FieldNumber;
#endif  // !_MSC_VER

RequestGetSignList::RequestGetSignList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetSignList)
}

void RequestGetSignList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestGetSignList::RequestGetSignList(const RequestGetSignList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetSignList)
}

void RequestGetSignList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  max_signs_ = 0u;
  matching_parameter_ = NULL;
  unknown_5_ = 0u;
  unknown_6_ = 0u;
  unknown_7_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetSignList::~RequestGetSignList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetSignList)
  SharedDtor();
}

void RequestGetSignList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestGetSignList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetSignList& RequestGetSignList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetSignList* RequestGetSignList::default_instance_ = NULL;

RequestGetSignList* RequestGetSignList::New() const {
  return new RequestGetSignList;
}

void RequestGetSignList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetSignList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(online_area_id_, max_signs_);
    ZR_(unknown_5_, unknown_7_);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  search_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetSignList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetSignList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_search_areas;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.SignCellInfo search_areas = 2;
      case 2: {
        if (tag == 18) {
         parse_search_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_search_areas;
        if (input->ExpectTag(24)) goto parse_max_signs;
        break;
      }

      // required uint32 max_signs = 3;
      case 3: {
        if (tag == 24) {
         parse_max_signs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_signs_)));
          set_has_max_signs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // required uint32 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unknown_6;
        break;
      }

      // required uint32 unknown_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_unknown_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_6_)));
          set_has_unknown_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unknown_7;
        break;
      }

      // required uint32 unknown_7 = 7;
      case 7: {
        if (tag == 56) {
         parse_unknown_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_7_)));
          set_has_unknown_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetSignList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetSignList)
  return false;
#undef DO_
}

void RequestGetSignList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetSignList)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.SignCellInfo search_areas = 2;
  for (int i = 0; i < this->search_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->search_areas(i), output);
  }

  // required uint32 max_signs = 3;
  if (has_max_signs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_signs(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->matching_parameter(), output);
  }

  // required uint32 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unknown_5(), output);
  }

  // required uint32 unknown_6 = 6;
  if (has_unknown_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unknown_6(), output);
  }

  // required uint32 unknown_7 = 7;
  if (has_unknown_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unknown_7(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetSignList)
}

int RequestGetSignList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 max_signs = 3;
    if (has_max_signs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_signs());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required uint32 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_5());
    }

    // required uint32 unknown_6 = 6;
    if (has_unknown_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_6());
    }

    // required uint32 unknown_7 = 7;
    if (has_unknown_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_7());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.SignCellInfo search_areas = 2;
  total_size += 1 * this->search_areas_size();
  for (int i = 0; i < this->search_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_areas(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetSignList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetSignList*>(&from));
}

void RequestGetSignList::MergeFrom(const RequestGetSignList& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_areas_.MergeFrom(from.search_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_max_signs()) {
      set_max_signs(from.max_signs());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
    if (from.has_unknown_6()) {
      set_unknown_6(from.unknown_6());
    }
    if (from.has_unknown_7()) {
      set_unknown_7(from.unknown_7());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetSignList::CopyFrom(const RequestGetSignList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetSignList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->search_areas())) return false;
  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestGetSignList::Swap(RequestGetSignList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    search_areas_.Swap(&other->search_areas_);
    std::swap(max_signs_, other->max_signs_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(unknown_6_, other->unknown_6_);
    std::swap(unknown_7_, other->unknown_7_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetSignList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetSignList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetSignListResponse::kSignInfoFieldNumber;
const int RequestGetSignListResponse::kSignDataFieldNumber;
#endif  // !_MSC_VER

RequestGetSignListResponse::RequestGetSignListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
}

void RequestGetSignListResponse::InitAsDefaultInstance() {
}

RequestGetSignListResponse::RequestGetSignListResponse(const RequestGetSignListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
}

void RequestGetSignListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetSignListResponse::~RequestGetSignListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
  SharedDtor();
}

void RequestGetSignListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetSignListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetSignListResponse& RequestGetSignListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetSignListResponse* RequestGetSignListResponse::default_instance_ = NULL;

RequestGetSignListResponse* RequestGetSignListResponse::New() const {
  return new RequestGetSignListResponse;
}

void RequestGetSignListResponse::Clear() {
  sign_info_.Clear();
  sign_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetSignListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
      case 1: {
        if (tag == 10) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sign_info;
        if (input->ExpectTag(18)) goto parse_sign_data;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.SignData sign_data = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
  return false;
#undef DO_
}

void RequestGetSignListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
  // repeated .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
  for (int i = 0; i < this->sign_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sign_info(i), output);
  }

  // repeated .DS2_Frpg2RequestMessage.SignData sign_data = 2;
  for (int i = 0; i < this->sign_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->sign_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetSignListResponse)
}

int RequestGetSignListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
  total_size += 1 * this->sign_info_size();
  for (int i = 0; i < this->sign_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_info(i));
  }

  // repeated .DS2_Frpg2RequestMessage.SignData sign_data = 2;
  total_size += 1 * this->sign_data_size();
  for (int i = 0; i < this->sign_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetSignListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetSignListResponse*>(&from));
}

void RequestGetSignListResponse::MergeFrom(const RequestGetSignListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_info_.MergeFrom(from.sign_info_);
  sign_data_.MergeFrom(from.sign_data_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetSignListResponse::CopyFrom(const RequestGetSignListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetSignListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->sign_info())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sign_data())) return false;
  return true;
}

void RequestGetSignListResponse::Swap(RequestGetSignListResponse* other) {
  if (other != this) {
    sign_info_.Swap(&other->sign_info_);
    sign_data_.Swap(&other->sign_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetSignListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetSignListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRejectSign::kOnlineAreaIdFieldNumber;
const int RequestRejectSign::kSignIdFieldNumber;
const int RequestRejectSign::kErrorFieldNumber;
const int RequestRejectSign::kUnknown4FieldNumber;
const int RequestRejectSign::kCellIdFieldNumber;
#endif  // !_MSC_VER

RequestRejectSign::RequestRejectSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectSign)
}

void RequestRejectSign::InitAsDefaultInstance() {
}

RequestRejectSign::RequestRejectSign(const RequestRejectSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectSign)
}

void RequestRejectSign::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  sign_id_ = GOOGLE_LONGLONG(0);
  error_ = 0;
  unknown_4_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectSign::~RequestRejectSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectSign)
  SharedDtor();
}

void RequestRejectSign::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectSign& RequestRejectSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectSign* RequestRejectSign::default_instance_ = NULL;

RequestRejectSign* RequestRejectSign::New() const {
  return new RequestRejectSign;
}

void RequestRejectSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRejectSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(online_area_id_, error_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign_id;
        break;
      }

      // required int64 sign_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::SummonErrorId_IsValid(value)) {
            set_error(static_cast< ::DS2_Frpg2RequestMessage::SummonErrorId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // required int64 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 5;
      case 5: {
        if (tag == 40) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectSign)
  return false;
#undef DO_
}

void RequestRejectSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectSign)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 sign_id = 2;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sign_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  // required int64 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->unknown_4(), output);
  }

  // required int64 cell_id = 5;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cell_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectSign)
}

int RequestRejectSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 sign_id = 2;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

    // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // required int64 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_4());
    }

    // required int64 cell_id = 5;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectSign*>(&from));
}

void RequestRejectSign::MergeFrom(const RequestRejectSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectSign::CopyFrom(const RequestRejectSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestRejectSign::Swap(RequestRejectSign* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(error_, other->error_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRejectSignResponse::RequestRejectSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
}

void RequestRejectSignResponse::InitAsDefaultInstance() {
}

RequestRejectSignResponse::RequestRejectSignResponse(const RequestRejectSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
}

void RequestRejectSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectSignResponse::~RequestRejectSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
  SharedDtor();
}

void RequestRejectSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectSignResponse& RequestRejectSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectSignResponse* RequestRejectSignResponse::default_instance_ = NULL;

RequestRejectSignResponse* RequestRejectSignResponse::New() const {
  return new RequestRejectSignResponse;
}

void RequestRejectSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
  return false;
#undef DO_
}

void RequestRejectSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectSignResponse)
}

int RequestRejectSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectSignResponse*>(&from));
}

void RequestRejectSignResponse::MergeFrom(const RequestRejectSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectSignResponse::CopyFrom(const RequestRejectSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectSignResponse::IsInitialized() const {

  return true;
}

void RequestRejectSignResponse::Swap(RequestRejectSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRemoveSign::kOnlineAreaIdFieldNumber;
const int RequestRemoveSign::kSignIdFieldNumber;
const int RequestRemoveSign::kCellIdFieldNumber;
#endif  // !_MSC_VER

RequestRemoveSign::RequestRemoveSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRemoveSign)
}

void RequestRemoveSign::InitAsDefaultInstance() {
}

RequestRemoveSign::RequestRemoveSign(const RequestRemoveSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRemoveSign)
}

void RequestRemoveSign::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  sign_id_ = 0u;
  cell_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveSign::~RequestRemoveSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRemoveSign)
  SharedDtor();
}

void RequestRemoveSign::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRemoveSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRemoveSign& RequestRemoveSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRemoveSign* RequestRemoveSign::default_instance_ = NULL;

RequestRemoveSign* RequestRemoveSign::New() const {
  return new RequestRemoveSign;
}

void RequestRemoveSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRemoveSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, cell_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRemoveSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRemoveSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign_id;
        break;
      }

      // required uint32 sign_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRemoveSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRemoveSign)
  return false;
#undef DO_
}

void RequestRemoveSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRemoveSign)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 sign_id = 2;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sign_id(), output);
  }

  // required uint32 cell_id = 3;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRemoveSign)
}

int RequestRemoveSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 sign_id = 2;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_id());
    }

    // required uint32 cell_id = 3;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRemoveSign*>(&from));
}

void RequestRemoveSign::MergeFrom(const RequestRemoveSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRemoveSign::CopyFrom(const RequestRemoveSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestRemoveSign::Swap(RequestRemoveSign* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRemoveSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRemoveSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRemoveSignResponse::RequestRemoveSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
}

void RequestRemoveSignResponse::InitAsDefaultInstance() {
}

RequestRemoveSignResponse::RequestRemoveSignResponse(const RequestRemoveSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
}

void RequestRemoveSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveSignResponse::~RequestRemoveSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
  SharedDtor();
}

void RequestRemoveSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRemoveSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRemoveSignResponse& RequestRemoveSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRemoveSignResponse* RequestRemoveSignResponse::default_instance_ = NULL;

RequestRemoveSignResponse* RequestRemoveSignResponse::New() const {
  return new RequestRemoveSignResponse;
}

void RequestRemoveSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRemoveSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
  return false;
#undef DO_
}

void RequestRemoveSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRemoveSignResponse)
}

int RequestRemoveSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRemoveSignResponse*>(&from));
}

void RequestRemoveSignResponse::MergeFrom(const RequestRemoveSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRemoveSignResponse::CopyFrom(const RequestRemoveSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveSignResponse::IsInitialized() const {

  return true;
}

void RequestRemoveSignResponse::Swap(RequestRemoveSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRemoveSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRemoveSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateSign::kOnlineAreaIdFieldNumber;
const int RequestUpdateSign::kSignIdFieldNumber;
const int RequestUpdateSign::kCellIdFieldNumber;
#endif  // !_MSC_VER

RequestUpdateSign::RequestUpdateSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateSign)
}

void RequestUpdateSign::InitAsDefaultInstance() {
}

RequestUpdateSign::RequestUpdateSign(const RequestUpdateSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateSign)
}

void RequestUpdateSign::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  sign_id_ = 0u;
  cell_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateSign::~RequestUpdateSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateSign)
  SharedDtor();
}

void RequestUpdateSign::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateSign& RequestUpdateSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateSign* RequestUpdateSign::default_instance_ = NULL;

RequestUpdateSign* RequestUpdateSign::New() const {
  return new RequestUpdateSign;
}

void RequestUpdateSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUpdateSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, cell_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign_id;
        break;
      }

      // required uint32 sign_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateSign)
  return false;
#undef DO_
}

void RequestUpdateSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateSign)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 sign_id = 2;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sign_id(), output);
  }

  // required uint32 cell_id = 3;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateSign)
}

int RequestUpdateSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 sign_id = 2;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_id());
    }

    // required uint32 cell_id = 3;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateSign*>(&from));
}

void RequestUpdateSign::MergeFrom(const RequestUpdateSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateSign::CopyFrom(const RequestUpdateSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestUpdateSign::Swap(RequestUpdateSign* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestUpdateSignResponse::RequestUpdateSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
}

void RequestUpdateSignResponse::InitAsDefaultInstance() {
}

RequestUpdateSignResponse::RequestUpdateSignResponse(const RequestUpdateSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
}

void RequestUpdateSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateSignResponse::~RequestUpdateSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
  SharedDtor();
}

void RequestUpdateSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateSignResponse& RequestUpdateSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateSignResponse* RequestUpdateSignResponse::default_instance_ = NULL;

RequestUpdateSignResponse* RequestUpdateSignResponse::New() const {
  return new RequestUpdateSignResponse;
}

void RequestUpdateSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
  return false;
#undef DO_
}

void RequestUpdateSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateSignResponse)
}

int RequestUpdateSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateSignResponse*>(&from));
}

void RequestUpdateSignResponse::MergeFrom(const RequestUpdateSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateSignResponse::CopyFrom(const RequestUpdateSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateSignResponse::IsInitialized() const {

  return true;
}

void RequestUpdateSignResponse::Swap(RequestUpdateSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SignCellInfo::kCellIdFieldNumber;
const int SignCellInfo::kLocalSignsFieldNumber;
const int SignCellInfo::kMaxSignsFieldNumber;
#endif  // !_MSC_VER

SignCellInfo::SignCellInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.SignCellInfo)
}

void SignCellInfo::InitAsDefaultInstance() {
}

SignCellInfo::SignCellInfo(const SignCellInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.SignCellInfo)
}

void SignCellInfo::SharedCtor() {
  _cached_size_ = 0;
  cell_id_ = 0u;
  max_signs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignCellInfo::~SignCellInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.SignCellInfo)
  SharedDtor();
}

void SignCellInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SignCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SignCellInfo& SignCellInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

SignCellInfo* SignCellInfo::default_instance_ = NULL;

SignCellInfo* SignCellInfo::New() const {
  return new SignCellInfo;
}

void SignCellInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignCellInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cell_id_, max_signs_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  local_signs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SignCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.SignCellInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cell_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local_signs;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.SignInfo local_signs = 2;
      case 2: {
        if (tag == 18) {
         parse_local_signs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_local_signs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local_signs;
        if (input->ExpectTag(24)) goto parse_max_signs;
        break;
      }

      // optional uint32 max_signs = 3;
      case 3: {
        if (tag == 24) {
         parse_max_signs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_signs_)));
          set_has_max_signs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.SignCellInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.SignCellInfo)
  return false;
#undef DO_
}

void SignCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.SignCellInfo)
  // required uint32 cell_id = 1;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.SignInfo local_signs = 2;
  for (int i = 0; i < this->local_signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->local_signs(i), output);
  }

  // optional uint32 max_signs = 3;
  if (has_max_signs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_signs(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.SignCellInfo)
}

int SignCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cell_id = 1;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 max_signs = 3;
    if (has_max_signs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_signs());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.SignInfo local_signs = 2;
  total_size += 1 * this->local_signs_size();
  for (int i = 0; i < this->local_signs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->local_signs(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignCellInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SignCellInfo*>(&from));
}

void SignCellInfo::MergeFrom(const SignCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  local_signs_.MergeFrom(from.local_signs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_max_signs()) {
      set_max_signs(from.max_signs());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SignCellInfo::CopyFrom(const SignCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignCellInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->local_signs())) return false;
  return true;
}

void SignCellInfo::Swap(SignCellInfo* other) {
  if (other != this) {
    std::swap(cell_id_, other->cell_id_);
    local_signs_.Swap(&other->local_signs_);
    std::swap(max_signs_, other->max_signs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SignCellInfo::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.SignCellInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SignInfo::kPlayerIdFieldNumber;
const int SignInfo::kSignIdFieldNumber;
#endif  // !_MSC_VER

SignInfo::SignInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.SignInfo)
}

void SignInfo::InitAsDefaultInstance() {
}

SignInfo::SignInfo(const SignInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.SignInfo)
}

void SignInfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  sign_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInfo::~SignInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.SignInfo)
  SharedDtor();
}

void SignInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SignInfo& SignInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

SignInfo* SignInfo::default_instance_ = NULL;

SignInfo* SignInfo::New() const {
  return new SignInfo;
}

void SignInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, sign_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.SignInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign_id;
        break;
      }

      // required uint32 sign_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.SignInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.SignInfo)
  return false;
#undef DO_
}

void SignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.SignInfo)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 sign_id = 2;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sign_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.SignInfo)
}

int SignInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 sign_id = 2;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SignInfo*>(&from));
}

void SignInfo::MergeFrom(const SignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SignInfo::CopyFrom(const SignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignInfo::Swap(SignInfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SignInfo::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.SignInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SignData::kSignInfoFieldNumber;
const int SignData::kOnlineAreaIdFieldNumber;
const int SignData::kMatchingParameterFieldNumber;
const int SignData::kPlayerStructFieldNumber;
const int SignData::kPlayerSteamIdFieldNumber;
const int SignData::kCellIdFieldNumber;
const int SignData::kSignTypeFieldNumber;
#endif  // !_MSC_VER

SignData::SignData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.SignData)
}

void SignData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(
      ::DS2_Frpg2RequestMessage::SignInfo::internal_default_instance());
#else
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(&::DS2_Frpg2RequestMessage::SignInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

SignData::SignData(const SignData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.SignData)
}

void SignData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sign_info_ = NULL;
  online_area_id_ = GOOGLE_LONGLONG(0);
  matching_parameter_ = NULL;
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_id_ = GOOGLE_LONGLONG(0);
  sign_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignData::~SignData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.SignData)
  SharedDtor();
}

void SignData::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sign_info_;
    delete matching_parameter_;
  }
}

void SignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SignData& SignData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

SignData* SignData::default_instance_ = NULL;

SignData* SignData::New() const {
  return new SignData;
}

void SignData::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_sign_info()) {
      if (sign_info_ != NULL) sign_info_->::DS2_Frpg2RequestMessage::SignInfo::Clear();
    }
    online_area_id_ = GOOGLE_LONGLONG(0);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
    cell_id_ = GOOGLE_LONGLONG(0);
    sign_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.SignData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 2;
      case 2: {
        if (tag == 16) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
      case 3: {
        if (tag == 26) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 4;
      case 4: {
        if (tag == 34) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 5;
      case 5: {
        if (tag == 42) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 6;
      case 6: {
        if (tag == 48) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sign_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SignType sign_type = 7;
      case 7: {
        if (tag == 56) {
         parse_sign_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::SignType_IsValid(value)) {
            set_sign_type(static_cast< ::DS2_Frpg2RequestMessage::SignType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.SignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.SignData)
  return false;
#undef DO_
}

void SignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.SignData)
  // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sign_info(), output);
  }

  // required int64 online_area_id = 2;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->online_area_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->matching_parameter(), output);
  }

  // required bytes player_struct = 4;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->player_struct(), output);
  }

  // required string player_steam_id = 5;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player_steam_id(), output);
  }

  // required int64 cell_id = 6;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.SignType sign_type = 7;
  if (has_sign_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sign_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.SignData)
}

int SignData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_info());
    }

    // required int64 online_area_id = 2;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required bytes player_struct = 4;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

    // required string player_steam_id = 5;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // required int64 cell_id = 6;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.SignType sign_type = 7;
    if (has_sign_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SignData*>(&from));
}

void SignData::MergeFrom(const SignData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_info()) {
      mutable_sign_info()->::DS2_Frpg2RequestMessage::SignInfo::MergeFrom(from.sign_info());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_sign_type()) {
      set_sign_type(from.sign_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SignData::CopyFrom(const SignData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_sign_info()) {
    if (!this->sign_info().IsInitialized()) return false;
  }
  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void SignData::Swap(SignData* other) {
  if (other != this) {
    std::swap(sign_info_, other->sign_info_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(sign_type_, other->sign_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SignData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.SignData";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetRightMatchingArea::kMatchingParameterFieldNumber;
#endif  // !_MSC_VER

RequestGetRightMatchingArea::RequestGetRightMatchingArea()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
}

void RequestGetRightMatchingArea::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestGetRightMatchingArea::RequestGetRightMatchingArea(const RequestGetRightMatchingArea& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
}

void RequestGetRightMatchingArea::SharedCtor() {
  _cached_size_ = 0;
  matching_parameter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetRightMatchingArea::~RequestGetRightMatchingArea() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
  SharedDtor();
}

void RequestGetRightMatchingArea::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestGetRightMatchingArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetRightMatchingArea& RequestGetRightMatchingArea::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetRightMatchingArea* RequestGetRightMatchingArea::default_instance_ = NULL;

RequestGetRightMatchingArea* RequestGetRightMatchingArea::New() const {
  return new RequestGetRightMatchingArea;
}

void RequestGetRightMatchingArea::Clear() {
  if (has_matching_parameter()) {
    if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetRightMatchingArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
  return false;
#undef DO_
}

void RequestGetRightMatchingArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 1;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->matching_parameter(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetRightMatchingArea)
}

int RequestGetRightMatchingArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 1;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetRightMatchingArea::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetRightMatchingArea*>(&from));
}

void RequestGetRightMatchingArea::MergeFrom(const RequestGetRightMatchingArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetRightMatchingArea::CopyFrom(const RequestGetRightMatchingArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetRightMatchingArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestGetRightMatchingArea::Swap(RequestGetRightMatchingArea* other) {
  if (other != this) {
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetRightMatchingArea::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetRightMatchingArea";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetRightMatchingAreaResponse_Area_info::kOnlineAreaIdFieldNumber;
const int RequestGetRightMatchingAreaResponse_Area_info::kPopulationFieldNumber;
#endif  // !_MSC_VER

RequestGetRightMatchingAreaResponse_Area_info::RequestGetRightMatchingAreaResponse_Area_info()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
}

void RequestGetRightMatchingAreaResponse_Area_info::InitAsDefaultInstance() {
}

RequestGetRightMatchingAreaResponse_Area_info::RequestGetRightMatchingAreaResponse_Area_info(const RequestGetRightMatchingAreaResponse_Area_info& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
}

void RequestGetRightMatchingAreaResponse_Area_info::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  population_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetRightMatchingAreaResponse_Area_info::~RequestGetRightMatchingAreaResponse_Area_info() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
  SharedDtor();
}

void RequestGetRightMatchingAreaResponse_Area_info::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetRightMatchingAreaResponse_Area_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetRightMatchingAreaResponse_Area_info& RequestGetRightMatchingAreaResponse_Area_info::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetRightMatchingAreaResponse_Area_info* RequestGetRightMatchingAreaResponse_Area_info::default_instance_ = NULL;

RequestGetRightMatchingAreaResponse_Area_info* RequestGetRightMatchingAreaResponse_Area_info::New() const {
  return new RequestGetRightMatchingAreaResponse_Area_info;
}

void RequestGetRightMatchingAreaResponse_Area_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetRightMatchingAreaResponse_Area_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, population_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetRightMatchingAreaResponse_Area_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_population;
        break;
      }

      // required uint32 population = 2;
      case 2: {
        if (tag == 16) {
         parse_population:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &population_)));
          set_has_population();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
  return false;
#undef DO_
}

void RequestGetRightMatchingAreaResponse_Area_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 population = 2;
  if (has_population()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->population(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info)
}

int RequestGetRightMatchingAreaResponse_Area_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 population = 2;
    if (has_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->population());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetRightMatchingAreaResponse_Area_info::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetRightMatchingAreaResponse_Area_info*>(&from));
}

void RequestGetRightMatchingAreaResponse_Area_info::MergeFrom(const RequestGetRightMatchingAreaResponse_Area_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_population()) {
      set_population(from.population());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetRightMatchingAreaResponse_Area_info::CopyFrom(const RequestGetRightMatchingAreaResponse_Area_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetRightMatchingAreaResponse_Area_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestGetRightMatchingAreaResponse_Area_info::Swap(RequestGetRightMatchingAreaResponse_Area_info* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(population_, other->population_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetRightMatchingAreaResponse_Area_info::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse.Area_info";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestGetRightMatchingAreaResponse::kAreaInfoFieldNumber;
#endif  // !_MSC_VER

RequestGetRightMatchingAreaResponse::RequestGetRightMatchingAreaResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
}

void RequestGetRightMatchingAreaResponse::InitAsDefaultInstance() {
}

RequestGetRightMatchingAreaResponse::RequestGetRightMatchingAreaResponse(const RequestGetRightMatchingAreaResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
}

void RequestGetRightMatchingAreaResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetRightMatchingAreaResponse::~RequestGetRightMatchingAreaResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
  SharedDtor();
}

void RequestGetRightMatchingAreaResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetRightMatchingAreaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetRightMatchingAreaResponse& RequestGetRightMatchingAreaResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetRightMatchingAreaResponse* RequestGetRightMatchingAreaResponse::default_instance_ = NULL;

RequestGetRightMatchingAreaResponse* RequestGetRightMatchingAreaResponse::New() const {
  return new RequestGetRightMatchingAreaResponse;
}

void RequestGetRightMatchingAreaResponse::Clear() {
  area_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetRightMatchingAreaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group Area_info = 1 {
      case 1: {
        if (tag == 11) {
         parse_area_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, add_area_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(11)) goto parse_area_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
  return false;
#undef DO_
}

void RequestGetRightMatchingAreaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
  // repeated group Area_info = 1 {
  for (int i = 0; i < this->area_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      1, this->area_info(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse)
}

int RequestGetRightMatchingAreaResponse::ByteSize() const {
  int total_size = 0;

  // repeated group Area_info = 1 {
  total_size += 2 * this->area_info_size();
  for (int i = 0; i < this->area_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->area_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetRightMatchingAreaResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetRightMatchingAreaResponse*>(&from));
}

void RequestGetRightMatchingAreaResponse::MergeFrom(const RequestGetRightMatchingAreaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_info_.MergeFrom(from.area_info_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetRightMatchingAreaResponse::CopyFrom(const RequestGetRightMatchingAreaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetRightMatchingAreaResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->area_info())) return false;
  return true;
}

void RequestGetRightMatchingAreaResponse::Swap(RequestGetRightMatchingAreaResponse* other) {
  if (other != this) {
    area_info_.Swap(&other->area_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetRightMatchingAreaResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetRightMatchingAreaResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRejectMirrorKnightSign::kPushMessageIdFieldNumber;
const int PushRequestRejectMirrorKnightSign::kSignInfoFieldNumber;
const int PushRequestRejectMirrorKnightSign::kErrorFieldNumber;
const int PushRequestRejectMirrorKnightSign::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

PushRequestRejectMirrorKnightSign::PushRequestRejectMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
}

void PushRequestRejectMirrorKnightSign::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(
      ::DS2_Frpg2RequestMessage::SignInfo::internal_default_instance());
#else
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(&::DS2_Frpg2RequestMessage::SignInfo::default_instance());
#endif
}

PushRequestRejectMirrorKnightSign::PushRequestRejectMirrorKnightSign(const PushRequestRejectMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
}

void PushRequestRejectMirrorKnightSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  sign_info_ = NULL;
  error_ = 0;
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRejectMirrorKnightSign::~PushRequestRejectMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
  SharedDtor();
}

void PushRequestRejectMirrorKnightSign::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sign_info_;
  }
}

void PushRequestRejectMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRejectMirrorKnightSign& PushRequestRejectMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRejectMirrorKnightSign* PushRequestRejectMirrorKnightSign::default_instance_ = NULL;

PushRequestRejectMirrorKnightSign* PushRequestRejectMirrorKnightSign::New() const {
  return new PushRequestRejectMirrorKnightSign;
}

void PushRequestRejectMirrorKnightSign::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    push_message_id_ = 925;
    if (has_sign_info()) {
      if (sign_info_ != NULL) sign_info_->::DS2_Frpg2RequestMessage::SignInfo::Clear();
    }
    error_ = 0;
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRejectMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_info;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::SummonErrorId_IsValid(value)) {
            set_error(static_cast< ::DS2_Frpg2RequestMessage::SummonErrorId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 4;
      case 4: {
        if (tag == 34) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
  return false;
#undef DO_
}

void PushRequestRejectMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->sign_info(), output);
  }

  // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  // required string player_steam_id = 4;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign)
}

int PushRequestRejectMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 2;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_info());
    }

    // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // required string player_steam_id = 4;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRejectMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRejectMirrorKnightSign*>(&from));
}

void PushRequestRejectMirrorKnightSign::MergeFrom(const PushRequestRejectMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_sign_info()) {
      mutable_sign_info()->::DS2_Frpg2RequestMessage::SignInfo::MergeFrom(from.sign_info());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRejectMirrorKnightSign::CopyFrom(const PushRequestRejectMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRejectMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_sign_info()) {
    if (!this->sign_info().IsInitialized()) return false;
  }
  return true;
}

void PushRequestRejectMirrorKnightSign::Swap(PushRequestRejectMirrorKnightSign* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(error_, other->error_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRejectMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRejectMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRemoveMirrorKnightSign::kPushMessageIdFieldNumber;
const int PushRequestRemoveMirrorKnightSign::kPlayerIdFieldNumber;
const int PushRequestRemoveMirrorKnightSign::kSignIdFieldNumber;
const int PushRequestRemoveMirrorKnightSign::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

PushRequestRemoveMirrorKnightSign::PushRequestRemoveMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
}

void PushRequestRemoveMirrorKnightSign::InitAsDefaultInstance() {
}

PushRequestRemoveMirrorKnightSign::PushRequestRemoveMirrorKnightSign(const PushRequestRemoveMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
}

void PushRequestRemoveMirrorKnightSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  sign_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRemoveMirrorKnightSign::~PushRequestRemoveMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
  SharedDtor();
}

void PushRequestRemoveMirrorKnightSign::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRemoveMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRemoveMirrorKnightSign& PushRequestRemoveMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRemoveMirrorKnightSign* PushRequestRemoveMirrorKnightSign::default_instance_ = NULL;

PushRequestRemoveMirrorKnightSign* PushRequestRemoveMirrorKnightSign::New() const {
  return new PushRequestRemoveMirrorKnightSign;
}

void PushRequestRemoveMirrorKnightSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestRemoveMirrorKnightSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(player_id_, sign_id_);
    push_message_id_ = 925;
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRemoveMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sign_id;
        break;
      }

      // required int64 sign_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 4;
      case 4: {
        if (tag == 34) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
  return false;
#undef DO_
}

void PushRequestRemoveMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 sign_id = 3;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sign_id(), output);
  }

  // required string player_steam_id = 4;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign)
}

int PushRequestRemoveMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 sign_id = 3;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

    // required string player_steam_id = 4;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRemoveMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRemoveMirrorKnightSign*>(&from));
}

void PushRequestRemoveMirrorKnightSign::MergeFrom(const PushRequestRemoveMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRemoveMirrorKnightSign::CopyFrom(const PushRequestRemoveMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRemoveMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PushRequestRemoveMirrorKnightSign::Swap(PushRequestRemoveMirrorKnightSign* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRemoveMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRemoveMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestSummonMirrorKnightSign::kPushMessageIdFieldNumber;
const int PushRequestSummonMirrorKnightSign::kPlayerIdFieldNumber;
const int PushRequestSummonMirrorKnightSign::kSignIdFieldNumber;
const int PushRequestSummonMirrorKnightSign::kPlayerStructFieldNumber;
const int PushRequestSummonMirrorKnightSign::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

PushRequestSummonMirrorKnightSign::PushRequestSummonMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
}

void PushRequestSummonMirrorKnightSign::InitAsDefaultInstance() {
}

PushRequestSummonMirrorKnightSign::PushRequestSummonMirrorKnightSign(const PushRequestSummonMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
}

void PushRequestSummonMirrorKnightSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  sign_id_ = GOOGLE_LONGLONG(0);
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestSummonMirrorKnightSign::~PushRequestSummonMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
  SharedDtor();
}

void PushRequestSummonMirrorKnightSign::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestSummonMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestSummonMirrorKnightSign& PushRequestSummonMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestSummonMirrorKnightSign* PushRequestSummonMirrorKnightSign::default_instance_ = NULL;

PushRequestSummonMirrorKnightSign* PushRequestSummonMirrorKnightSign::New() const {
  return new PushRequestSummonMirrorKnightSign;
}

void PushRequestSummonMirrorKnightSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestSummonMirrorKnightSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, sign_id_);
    push_message_id_ = 925;
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestSummonMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sign_id;
        break;
      }

      // required int64 sign_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 4;
      case 4: {
        if (tag == 34) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 5;
      case 5: {
        if (tag == 42) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
  return false;
#undef DO_
}

void PushRequestSummonMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 sign_id = 3;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sign_id(), output);
  }

  // required bytes player_struct = 4;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->player_struct(), output);
  }

  // required string player_steam_id = 5;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign)
}

int PushRequestSummonMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 sign_id = 3;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

    // required bytes player_struct = 4;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

    // required string player_steam_id = 5;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestSummonMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestSummonMirrorKnightSign*>(&from));
}

void PushRequestSummonMirrorKnightSign::MergeFrom(const PushRequestSummonMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestSummonMirrorKnightSign::CopyFrom(const PushRequestSummonMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestSummonMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PushRequestSummonMirrorKnightSign::Swap(PushRequestSummonMirrorKnightSign* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestSummonMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestSummonMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateMirrorKnightSign::kMatchingParameterFieldNumber;
const int RequestCreateMirrorKnightSign::kDataFieldNumber;
#endif  // !_MSC_VER

RequestCreateMirrorKnightSign::RequestCreateMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
}

void RequestCreateMirrorKnightSign::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestCreateMirrorKnightSign::RequestCreateMirrorKnightSign(const RequestCreateMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
}

void RequestCreateMirrorKnightSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  matching_parameter_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateMirrorKnightSign::~RequestCreateMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
  SharedDtor();
}

void RequestCreateMirrorKnightSign::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestCreateMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateMirrorKnightSign& RequestCreateMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateMirrorKnightSign* RequestCreateMirrorKnightSign::default_instance_ = NULL;

RequestCreateMirrorKnightSign* RequestCreateMirrorKnightSign::New() const {
  return new RequestCreateMirrorKnightSign;
}

void RequestCreateMirrorKnightSign::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
  return false;
#undef DO_
}

void RequestCreateMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 1;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->matching_parameter(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign)
}

int RequestCreateMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 1;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateMirrorKnightSign*>(&from));
}

void RequestCreateMirrorKnightSign::MergeFrom(const RequestCreateMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateMirrorKnightSign::CopyFrom(const RequestCreateMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestCreateMirrorKnightSign::Swap(RequestCreateMirrorKnightSign* other) {
  if (other != this) {
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateMirrorKnightSignResponse::kSignIdFieldNumber;
#endif  // !_MSC_VER

RequestCreateMirrorKnightSignResponse::RequestCreateMirrorKnightSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
}

void RequestCreateMirrorKnightSignResponse::InitAsDefaultInstance() {
}

RequestCreateMirrorKnightSignResponse::RequestCreateMirrorKnightSignResponse(const RequestCreateMirrorKnightSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
}

void RequestCreateMirrorKnightSignResponse::SharedCtor() {
  _cached_size_ = 0;
  sign_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateMirrorKnightSignResponse::~RequestCreateMirrorKnightSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
  SharedDtor();
}

void RequestCreateMirrorKnightSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateMirrorKnightSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateMirrorKnightSignResponse& RequestCreateMirrorKnightSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateMirrorKnightSignResponse* RequestCreateMirrorKnightSignResponse::default_instance_ = NULL;

RequestCreateMirrorKnightSignResponse* RequestCreateMirrorKnightSignResponse::New() const {
  return new RequestCreateMirrorKnightSignResponse;
}

void RequestCreateMirrorKnightSignResponse::Clear() {
  sign_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateMirrorKnightSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sign_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
  return false;
#undef DO_
}

void RequestCreateMirrorKnightSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
  // required int64 sign_id = 1;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sign_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse)
}

int RequestCreateMirrorKnightSignResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sign_id = 1;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateMirrorKnightSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateMirrorKnightSignResponse*>(&from));
}

void RequestCreateMirrorKnightSignResponse::MergeFrom(const RequestCreateMirrorKnightSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateMirrorKnightSignResponse::CopyFrom(const RequestCreateMirrorKnightSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateMirrorKnightSignResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCreateMirrorKnightSignResponse::Swap(RequestCreateMirrorKnightSignResponse* other) {
  if (other != this) {
    std::swap(sign_id_, other->sign_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateMirrorKnightSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateMirrorKnightSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetMirrorKnightSignList::kMaxSignsFieldNumber;
const int RequestGetMirrorKnightSignList::kMatchingParameterFieldNumber;
#endif  // !_MSC_VER

RequestGetMirrorKnightSignList::RequestGetMirrorKnightSignList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
}

void RequestGetMirrorKnightSignList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestGetMirrorKnightSignList::RequestGetMirrorKnightSignList(const RequestGetMirrorKnightSignList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
}

void RequestGetMirrorKnightSignList::SharedCtor() {
  _cached_size_ = 0;
  max_signs_ = GOOGLE_LONGLONG(0);
  matching_parameter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetMirrorKnightSignList::~RequestGetMirrorKnightSignList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
  SharedDtor();
}

void RequestGetMirrorKnightSignList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestGetMirrorKnightSignList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetMirrorKnightSignList& RequestGetMirrorKnightSignList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetMirrorKnightSignList* RequestGetMirrorKnightSignList::default_instance_ = NULL;

RequestGetMirrorKnightSignList* RequestGetMirrorKnightSignList::New() const {
  return new RequestGetMirrorKnightSignList;
}

void RequestGetMirrorKnightSignList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    max_signs_ = GOOGLE_LONGLONG(0);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetMirrorKnightSignList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 max_signs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_signs_)));
          set_has_max_signs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 2;
      case 2: {
        if (tag == 18) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
  return false;
#undef DO_
}

void RequestGetMirrorKnightSignList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
  // required int64 max_signs = 1;
  if (has_max_signs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_signs(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 2;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->matching_parameter(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList)
}

int RequestGetMirrorKnightSignList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 max_signs = 1;
    if (has_max_signs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_signs());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 2;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetMirrorKnightSignList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetMirrorKnightSignList*>(&from));
}

void RequestGetMirrorKnightSignList::MergeFrom(const RequestGetMirrorKnightSignList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_signs()) {
      set_max_signs(from.max_signs());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetMirrorKnightSignList::CopyFrom(const RequestGetMirrorKnightSignList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetMirrorKnightSignList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestGetMirrorKnightSignList::Swap(RequestGetMirrorKnightSignList* other) {
  if (other != this) {
    std::swap(max_signs_, other->max_signs_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetMirrorKnightSignList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetMirrorKnightSignListResponse::kSignDataFieldNumber;
#endif  // !_MSC_VER

RequestGetMirrorKnightSignListResponse::RequestGetMirrorKnightSignListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
}

void RequestGetMirrorKnightSignListResponse::InitAsDefaultInstance() {
}

RequestGetMirrorKnightSignListResponse::RequestGetMirrorKnightSignListResponse(const RequestGetMirrorKnightSignListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
}

void RequestGetMirrorKnightSignListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetMirrorKnightSignListResponse::~RequestGetMirrorKnightSignListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
  SharedDtor();
}

void RequestGetMirrorKnightSignListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetMirrorKnightSignListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetMirrorKnightSignListResponse& RequestGetMirrorKnightSignListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetMirrorKnightSignListResponse* RequestGetMirrorKnightSignListResponse::default_instance_ = NULL;

RequestGetMirrorKnightSignListResponse* RequestGetMirrorKnightSignListResponse::New() const {
  return new RequestGetMirrorKnightSignListResponse;
}

void RequestGetMirrorKnightSignListResponse::Clear() {
  sign_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetMirrorKnightSignListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DS2_Frpg2RequestMessage.SignData sign_data = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
  return false;
#undef DO_
}

void RequestGetMirrorKnightSignListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
  // repeated .DS2_Frpg2RequestMessage.SignData sign_data = 2;
  for (int i = 0; i < this->sign_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->sign_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse)
}

int RequestGetMirrorKnightSignListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .DS2_Frpg2RequestMessage.SignData sign_data = 2;
  total_size += 1 * this->sign_data_size();
  for (int i = 0; i < this->sign_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetMirrorKnightSignListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetMirrorKnightSignListResponse*>(&from));
}

void RequestGetMirrorKnightSignListResponse::MergeFrom(const RequestGetMirrorKnightSignListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_data_.MergeFrom(from.sign_data_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetMirrorKnightSignListResponse::CopyFrom(const RequestGetMirrorKnightSignListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetMirrorKnightSignListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->sign_data())) return false;
  return true;
}

void RequestGetMirrorKnightSignListResponse::Swap(RequestGetMirrorKnightSignListResponse* other) {
  if (other != this) {
    sign_data_.Swap(&other->sign_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetMirrorKnightSignListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetMirrorKnightSignListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRejectMirrorKnightSign::kOnlineAreaIdFieldNumber;
const int RequestRejectMirrorKnightSign::kSignIdFieldNumber;
const int RequestRejectMirrorKnightSign::kErrorFieldNumber;
const int RequestRejectMirrorKnightSign::kUnknown4FieldNumber;
const int RequestRejectMirrorKnightSign::kCellIdFieldNumber;
#endif  // !_MSC_VER

RequestRejectMirrorKnightSign::RequestRejectMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
}

void RequestRejectMirrorKnightSign::InitAsDefaultInstance() {
}

RequestRejectMirrorKnightSign::RequestRejectMirrorKnightSign(const RequestRejectMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
}

void RequestRejectMirrorKnightSign::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  sign_id_ = GOOGLE_LONGLONG(0);
  error_ = 0;
  unknown_4_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectMirrorKnightSign::~RequestRejectMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
  SharedDtor();
}

void RequestRejectMirrorKnightSign::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectMirrorKnightSign& RequestRejectMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectMirrorKnightSign* RequestRejectMirrorKnightSign::default_instance_ = NULL;

RequestRejectMirrorKnightSign* RequestRejectMirrorKnightSign::New() const {
  return new RequestRejectMirrorKnightSign;
}

void RequestRejectMirrorKnightSign::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRejectMirrorKnightSign*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(online_area_id_, error_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign_id;
        break;
      }

      // required int64 sign_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::SummonErrorId_IsValid(value)) {
            set_error(static_cast< ::DS2_Frpg2RequestMessage::SummonErrorId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // required int64 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 5;
      case 5: {
        if (tag == 40) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
  return false;
#undef DO_
}

void RequestRejectMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 sign_id = 2;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sign_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  // required int64 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->unknown_4(), output);
  }

  // required int64 cell_id = 5;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cell_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign)
}

int RequestRejectMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 sign_id = 2;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

    // required .DS2_Frpg2RequestMessage.SummonErrorId error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // required int64 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_4());
    }

    // required int64 cell_id = 5;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectMirrorKnightSign*>(&from));
}

void RequestRejectMirrorKnightSign::MergeFrom(const RequestRejectMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectMirrorKnightSign::CopyFrom(const RequestRejectMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestRejectMirrorKnightSign::Swap(RequestRejectMirrorKnightSign* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(sign_id_, other->sign_id_);
    std::swap(error_, other->error_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRejectMirrorKnightSignResponse::RequestRejectMirrorKnightSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
}

void RequestRejectMirrorKnightSignResponse::InitAsDefaultInstance() {
}

RequestRejectMirrorKnightSignResponse::RequestRejectMirrorKnightSignResponse(const RequestRejectMirrorKnightSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
}

void RequestRejectMirrorKnightSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectMirrorKnightSignResponse::~RequestRejectMirrorKnightSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
  SharedDtor();
}

void RequestRejectMirrorKnightSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectMirrorKnightSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectMirrorKnightSignResponse& RequestRejectMirrorKnightSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectMirrorKnightSignResponse* RequestRejectMirrorKnightSignResponse::default_instance_ = NULL;

RequestRejectMirrorKnightSignResponse* RequestRejectMirrorKnightSignResponse::New() const {
  return new RequestRejectMirrorKnightSignResponse;
}

void RequestRejectMirrorKnightSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectMirrorKnightSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
  return false;
#undef DO_
}

void RequestRejectMirrorKnightSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse)
}

int RequestRejectMirrorKnightSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectMirrorKnightSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectMirrorKnightSignResponse*>(&from));
}

void RequestRejectMirrorKnightSignResponse::MergeFrom(const RequestRejectMirrorKnightSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectMirrorKnightSignResponse::CopyFrom(const RequestRejectMirrorKnightSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectMirrorKnightSignResponse::IsInitialized() const {

  return true;
}

void RequestRejectMirrorKnightSignResponse::Swap(RequestRejectMirrorKnightSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectMirrorKnightSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectMirrorKnightSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRemoveMirrorKnightSign::kSignIdFieldNumber;
#endif  // !_MSC_VER

RequestRemoveMirrorKnightSign::RequestRemoveMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
}

void RequestRemoveMirrorKnightSign::InitAsDefaultInstance() {
}

RequestRemoveMirrorKnightSign::RequestRemoveMirrorKnightSign(const RequestRemoveMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
}

void RequestRemoveMirrorKnightSign::SharedCtor() {
  _cached_size_ = 0;
  sign_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveMirrorKnightSign::~RequestRemoveMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
  SharedDtor();
}

void RequestRemoveMirrorKnightSign::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRemoveMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRemoveMirrorKnightSign& RequestRemoveMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRemoveMirrorKnightSign* RequestRemoveMirrorKnightSign::default_instance_ = NULL;

RequestRemoveMirrorKnightSign* RequestRemoveMirrorKnightSign::New() const {
  return new RequestRemoveMirrorKnightSign;
}

void RequestRemoveMirrorKnightSign::Clear() {
  sign_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRemoveMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sign_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
  return false;
#undef DO_
}

void RequestRemoveMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
  // required int64 sign_id = 1;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sign_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign)
}

int RequestRemoveMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sign_id = 1;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRemoveMirrorKnightSign*>(&from));
}

void RequestRemoveMirrorKnightSign::MergeFrom(const RequestRemoveMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRemoveMirrorKnightSign::CopyFrom(const RequestRemoveMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestRemoveMirrorKnightSign::Swap(RequestRemoveMirrorKnightSign* other) {
  if (other != this) {
    std::swap(sign_id_, other->sign_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRemoveMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRemoveMirrorKnightSignResponse::RequestRemoveMirrorKnightSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
}

void RequestRemoveMirrorKnightSignResponse::InitAsDefaultInstance() {
}

RequestRemoveMirrorKnightSignResponse::RequestRemoveMirrorKnightSignResponse(const RequestRemoveMirrorKnightSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
}

void RequestRemoveMirrorKnightSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveMirrorKnightSignResponse::~RequestRemoveMirrorKnightSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
  SharedDtor();
}

void RequestRemoveMirrorKnightSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRemoveMirrorKnightSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRemoveMirrorKnightSignResponse& RequestRemoveMirrorKnightSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRemoveMirrorKnightSignResponse* RequestRemoveMirrorKnightSignResponse::default_instance_ = NULL;

RequestRemoveMirrorKnightSignResponse* RequestRemoveMirrorKnightSignResponse::New() const {
  return new RequestRemoveMirrorKnightSignResponse;
}

void RequestRemoveMirrorKnightSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRemoveMirrorKnightSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
  return false;
#undef DO_
}

void RequestRemoveMirrorKnightSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse)
}

int RequestRemoveMirrorKnightSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveMirrorKnightSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRemoveMirrorKnightSignResponse*>(&from));
}

void RequestRemoveMirrorKnightSignResponse::MergeFrom(const RequestRemoveMirrorKnightSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRemoveMirrorKnightSignResponse::CopyFrom(const RequestRemoveMirrorKnightSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveMirrorKnightSignResponse::IsInitialized() const {

  return true;
}

void RequestRemoveMirrorKnightSignResponse::Swap(RequestRemoveMirrorKnightSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRemoveMirrorKnightSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRemoveMirrorKnightSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSummonMirrorKnightSign::kSignInfoFieldNumber;
const int RequestSummonMirrorKnightSign::kPlayerStructFieldNumber;
#endif  // !_MSC_VER

RequestSummonMirrorKnightSign::RequestSummonMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
}

void RequestSummonMirrorKnightSign::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(
      ::DS2_Frpg2RequestMessage::SignInfo::internal_default_instance());
#else
  sign_info_ = const_cast< ::DS2_Frpg2RequestMessage::SignInfo*>(&::DS2_Frpg2RequestMessage::SignInfo::default_instance());
#endif
}

RequestSummonMirrorKnightSign::RequestSummonMirrorKnightSign(const RequestSummonMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
}

void RequestSummonMirrorKnightSign::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sign_info_ = NULL;
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSummonMirrorKnightSign::~RequestSummonMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
  SharedDtor();
}

void RequestSummonMirrorKnightSign::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sign_info_;
  }
}

void RequestSummonMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSummonMirrorKnightSign& RequestSummonMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSummonMirrorKnightSign* RequestSummonMirrorKnightSign::default_instance_ = NULL;

RequestSummonMirrorKnightSign* RequestSummonMirrorKnightSign::New() const {
  return new RequestSummonMirrorKnightSign;
}

void RequestSummonMirrorKnightSign::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sign_info()) {
      if (sign_info_ != NULL) sign_info_->::DS2_Frpg2RequestMessage::SignInfo::Clear();
    }
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSummonMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 2;
      case 2: {
        if (tag == 18) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
  return false;
#undef DO_
}

void RequestSummonMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
  // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sign_info(), output);
  }

  // required bytes player_struct = 2;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->player_struct(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign)
}

int RequestSummonMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.SignInfo sign_info = 1;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_info());
    }

    // required bytes player_struct = 2;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSummonMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSummonMirrorKnightSign*>(&from));
}

void RequestSummonMirrorKnightSign::MergeFrom(const RequestSummonMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_info()) {
      mutable_sign_info()->::DS2_Frpg2RequestMessage::SignInfo::MergeFrom(from.sign_info());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSummonMirrorKnightSign::CopyFrom(const RequestSummonMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSummonMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sign_info()) {
    if (!this->sign_info().IsInitialized()) return false;
  }
  return true;
}

void RequestSummonMirrorKnightSign::Swap(RequestSummonMirrorKnightSign* other) {
  if (other != this) {
    std::swap(sign_info_, other->sign_info_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSummonMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSummonMirrorKnightSignResponse::RequestSummonMirrorKnightSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
}

void RequestSummonMirrorKnightSignResponse::InitAsDefaultInstance() {
}

RequestSummonMirrorKnightSignResponse::RequestSummonMirrorKnightSignResponse(const RequestSummonMirrorKnightSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
}

void RequestSummonMirrorKnightSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSummonMirrorKnightSignResponse::~RequestSummonMirrorKnightSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
  SharedDtor();
}

void RequestSummonMirrorKnightSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSummonMirrorKnightSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSummonMirrorKnightSignResponse& RequestSummonMirrorKnightSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSummonMirrorKnightSignResponse* RequestSummonMirrorKnightSignResponse::default_instance_ = NULL;

RequestSummonMirrorKnightSignResponse* RequestSummonMirrorKnightSignResponse::New() const {
  return new RequestSummonMirrorKnightSignResponse;
}

void RequestSummonMirrorKnightSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSummonMirrorKnightSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
  return false;
#undef DO_
}

void RequestSummonMirrorKnightSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse)
}

int RequestSummonMirrorKnightSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSummonMirrorKnightSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSummonMirrorKnightSignResponse*>(&from));
}

void RequestSummonMirrorKnightSignResponse::MergeFrom(const RequestSummonMirrorKnightSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSummonMirrorKnightSignResponse::CopyFrom(const RequestSummonMirrorKnightSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSummonMirrorKnightSignResponse::IsInitialized() const {

  return true;
}

void RequestSummonMirrorKnightSignResponse::Swap(RequestSummonMirrorKnightSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSummonMirrorKnightSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSummonMirrorKnightSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateMirrorKnightSign::kSignIdFieldNumber;
#endif  // !_MSC_VER

RequestUpdateMirrorKnightSign::RequestUpdateMirrorKnightSign()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
}

void RequestUpdateMirrorKnightSign::InitAsDefaultInstance() {
}

RequestUpdateMirrorKnightSign::RequestUpdateMirrorKnightSign(const RequestUpdateMirrorKnightSign& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
}

void RequestUpdateMirrorKnightSign::SharedCtor() {
  _cached_size_ = 0;
  sign_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateMirrorKnightSign::~RequestUpdateMirrorKnightSign() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
  SharedDtor();
}

void RequestUpdateMirrorKnightSign::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateMirrorKnightSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateMirrorKnightSign& RequestUpdateMirrorKnightSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateMirrorKnightSign* RequestUpdateMirrorKnightSign::default_instance_ = NULL;

RequestUpdateMirrorKnightSign* RequestUpdateMirrorKnightSign::New() const {
  return new RequestUpdateMirrorKnightSign;
}

void RequestUpdateMirrorKnightSign::Clear() {
  sign_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateMirrorKnightSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sign_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_id_)));
          set_has_sign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
  return false;
#undef DO_
}

void RequestUpdateMirrorKnightSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
  // required int64 sign_id = 1;
  if (has_sign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sign_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign)
}

int RequestUpdateMirrorKnightSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sign_id = 1;
    if (has_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateMirrorKnightSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateMirrorKnightSign*>(&from));
}

void RequestUpdateMirrorKnightSign::MergeFrom(const RequestUpdateMirrorKnightSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_id()) {
      set_sign_id(from.sign_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateMirrorKnightSign::CopyFrom(const RequestUpdateMirrorKnightSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateMirrorKnightSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestUpdateMirrorKnightSign::Swap(RequestUpdateMirrorKnightSign* other) {
  if (other != this) {
    std::swap(sign_id_, other->sign_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateMirrorKnightSign::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSign";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestUpdateMirrorKnightSignResponse::RequestUpdateMirrorKnightSignResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
}

void RequestUpdateMirrorKnightSignResponse::InitAsDefaultInstance() {
}

RequestUpdateMirrorKnightSignResponse::RequestUpdateMirrorKnightSignResponse(const RequestUpdateMirrorKnightSignResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
}

void RequestUpdateMirrorKnightSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateMirrorKnightSignResponse::~RequestUpdateMirrorKnightSignResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
  SharedDtor();
}

void RequestUpdateMirrorKnightSignResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateMirrorKnightSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateMirrorKnightSignResponse& RequestUpdateMirrorKnightSignResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateMirrorKnightSignResponse* RequestUpdateMirrorKnightSignResponse::default_instance_ = NULL;

RequestUpdateMirrorKnightSignResponse* RequestUpdateMirrorKnightSignResponse::New() const {
  return new RequestUpdateMirrorKnightSignResponse;
}

void RequestUpdateMirrorKnightSignResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateMirrorKnightSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
  return false;
#undef DO_
}

void RequestUpdateMirrorKnightSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse)
}

int RequestUpdateMirrorKnightSignResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateMirrorKnightSignResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateMirrorKnightSignResponse*>(&from));
}

void RequestUpdateMirrorKnightSignResponse::MergeFrom(const RequestUpdateMirrorKnightSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateMirrorKnightSignResponse::CopyFrom(const RequestUpdateMirrorKnightSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateMirrorKnightSignResponse::IsInitialized() const {

  return true;
}

void RequestUpdateMirrorKnightSignResponse::Swap(RequestUpdateMirrorKnightSignResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateMirrorKnightSignResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateMirrorKnightSignResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BreakInTargetData::kPlayerIdFieldNumber;
const int BreakInTargetData::kSteamIdFieldNumber;
#endif  // !_MSC_VER

BreakInTargetData::BreakInTargetData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.BreakInTargetData)
}

void BreakInTargetData::InitAsDefaultInstance() {
}

BreakInTargetData::BreakInTargetData(const BreakInTargetData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.BreakInTargetData)
}

void BreakInTargetData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BreakInTargetData::~BreakInTargetData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.BreakInTargetData)
  SharedDtor();
}

void BreakInTargetData::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BreakInTargetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BreakInTargetData& BreakInTargetData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

BreakInTargetData* BreakInTargetData::default_instance_ = NULL;

BreakInTargetData* BreakInTargetData::New() const {
  return new BreakInTargetData;
}

void BreakInTargetData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = 0u;
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BreakInTargetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.BreakInTargetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_steam_id;
        break;
      }

      // required string steam_id = 2;
      case 2: {
        if (tag == 18) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.BreakInTargetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.BreakInTargetData)
  return false;
#undef DO_
}

void BreakInTargetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.BreakInTargetData)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required string steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.BreakInTargetData)
}

int BreakInTargetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required string steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakInTargetData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BreakInTargetData*>(&from));
}

void BreakInTargetData::MergeFrom(const BreakInTargetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BreakInTargetData::CopyFrom(const BreakInTargetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakInTargetData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BreakInTargetData::Swap(BreakInTargetData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BreakInTargetData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.BreakInTargetData";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestAllowBreakInTarget::kPushMessageIdFieldNumber;
const int PushRequestAllowBreakInTarget::kPlayerIdFieldNumber;
const int PushRequestAllowBreakInTarget::kPlayerStructFieldNumber;
const int PushRequestAllowBreakInTarget::kUnknown4FieldNumber;
#endif  // !_MSC_VER

PushRequestAllowBreakInTarget::PushRequestAllowBreakInTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
}

void PushRequestAllowBreakInTarget::InitAsDefaultInstance() {
}

PushRequestAllowBreakInTarget::PushRequestAllowBreakInTarget(const PushRequestAllowBreakInTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
}

void PushRequestAllowBreakInTarget::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = 0u;
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestAllowBreakInTarget::~PushRequestAllowBreakInTarget() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
  SharedDtor();
}

void PushRequestAllowBreakInTarget::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestAllowBreakInTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestAllowBreakInTarget& PushRequestAllowBreakInTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestAllowBreakInTarget* PushRequestAllowBreakInTarget::default_instance_ = NULL;

PushRequestAllowBreakInTarget* PushRequestAllowBreakInTarget::New() const {
  return new PushRequestAllowBreakInTarget;
}

void PushRequestAllowBreakInTarget::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    push_message_id_ = 925;
    player_id_ = 0u;
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
    unknown_4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestAllowBreakInTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 3;
      case 3: {
        if (tag == 26) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // required uint32 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
  return false;
#undef DO_
}

void PushRequestAllowBreakInTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // required bytes player_struct = 3;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->player_struct(), output);
  }

  // required uint32 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unknown_4(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget)
}

int PushRequestAllowBreakInTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required bytes player_struct = 3;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

    // required uint32 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestAllowBreakInTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestAllowBreakInTarget*>(&from));
}

void PushRequestAllowBreakInTarget::MergeFrom(const PushRequestAllowBreakInTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestAllowBreakInTarget::CopyFrom(const PushRequestAllowBreakInTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestAllowBreakInTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PushRequestAllowBreakInTarget::Swap(PushRequestAllowBreakInTarget* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestAllowBreakInTarget::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestAllowBreakInTarget";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestBreakInTarget::kPushMessageIdFieldNumber;
const int PushRequestBreakInTarget::kPlayerIdFieldNumber;
const int PushRequestBreakInTarget::kSteamIdFieldNumber;
const int PushRequestBreakInTarget::kTypeFieldNumber;
const int PushRequestBreakInTarget::kOnlineAreaIdFieldNumber;
const int PushRequestBreakInTarget::kCellIdFieldNumber;
#endif  // !_MSC_VER

PushRequestBreakInTarget::PushRequestBreakInTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
}

void PushRequestBreakInTarget::InitAsDefaultInstance() {
}

PushRequestBreakInTarget::PushRequestBreakInTarget(const PushRequestBreakInTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
}

void PushRequestBreakInTarget::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = 0u;
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestBreakInTarget::~PushRequestBreakInTarget() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
  SharedDtor();
}

void PushRequestBreakInTarget::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestBreakInTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestBreakInTarget& PushRequestBreakInTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestBreakInTarget* PushRequestBreakInTarget::default_instance_ = NULL;

PushRequestBreakInTarget* PushRequestBreakInTarget::New() const {
  return new PushRequestBreakInTarget;
}

void PushRequestBreakInTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestBreakInTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, cell_id_);
    push_message_id_ = 925;
    player_id_ = 0u;
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestBreakInTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_steam_id;
        break;
      }

      // required string steam_id = 3;
      case 3: {
        if (tag == 26) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.BreakInType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::BreakInType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::BreakInType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_online_area_id;
        break;
      }

      // required uint32 online_area_id = 5;
      case 5: {
        if (tag == 40) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 6;
      case 6: {
        if (tag == 48) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
  return false;
#undef DO_
}

void PushRequestBreakInTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // required string steam_id = 3;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->steam_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.BreakInType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required uint32 online_area_id = 5;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->online_area_id(), output);
  }

  // required uint32 cell_id = 6;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cell_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestBreakInTarget)
}

int PushRequestBreakInTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required string steam_id = 3;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // required .DS2_Frpg2RequestMessage.BreakInType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 online_area_id = 5;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 6;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestBreakInTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestBreakInTarget*>(&from));
}

void PushRequestBreakInTarget::MergeFrom(const PushRequestBreakInTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestBreakInTarget::CopyFrom(const PushRequestBreakInTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestBreakInTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PushRequestBreakInTarget::Swap(PushRequestBreakInTarget* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(type_, other->type_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestBreakInTarget::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestBreakInTarget";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRejectBreakInTarget::kPushMessageIdFieldNumber;
const int PushRequestRejectBreakInTarget::kPlayerIdFieldNumber;
const int PushRequestRejectBreakInTarget::kUnknown3FieldNumber;
const int PushRequestRejectBreakInTarget::kSteamIdFieldNumber;
const int PushRequestRejectBreakInTarget::kUnknown5FieldNumber;
#endif  // !_MSC_VER

PushRequestRejectBreakInTarget::PushRequestRejectBreakInTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
}

void PushRequestRejectBreakInTarget::InitAsDefaultInstance() {
}

PushRequestRejectBreakInTarget::PushRequestRejectBreakInTarget(const PushRequestRejectBreakInTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
}

void PushRequestRejectBreakInTarget::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  unknown_3_ = GOOGLE_LONGLONG(0);
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_5_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRejectBreakInTarget::~PushRequestRejectBreakInTarget() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
  SharedDtor();
}

void PushRequestRejectBreakInTarget::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRejectBreakInTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRejectBreakInTarget& PushRequestRejectBreakInTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRejectBreakInTarget* PushRequestRejectBreakInTarget::default_instance_ = NULL;

PushRequestRejectBreakInTarget* PushRequestRejectBreakInTarget::New() const {
  return new PushRequestRejectBreakInTarget;
}

void PushRequestRejectBreakInTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestRejectBreakInTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, unknown_3_);
    push_message_id_ = 925;
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
    unknown_5_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRejectBreakInTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_3;
        break;
      }

      // required int64 unknown_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_3_)));
          set_has_unknown_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_steam_id;
        break;
      }

      // required string steam_id = 4;
      case 4: {
        if (tag == 34) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // required int64 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
  return false;
#undef DO_
}

void PushRequestRejectBreakInTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 unknown_3 = 3;
  if (has_unknown_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->unknown_3(), output);
  }

  // required string steam_id = 4;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->steam_id(), output);
  }

  // required int64 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->unknown_5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget)
}

int PushRequestRejectBreakInTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 unknown_3 = 3;
    if (has_unknown_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_3());
    }

    // required string steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // required int64 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_5());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRejectBreakInTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRejectBreakInTarget*>(&from));
}

void PushRequestRejectBreakInTarget::MergeFrom(const PushRequestRejectBreakInTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_unknown_3()) {
      set_unknown_3(from.unknown_3());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRejectBreakInTarget::CopyFrom(const PushRequestRejectBreakInTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRejectBreakInTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PushRequestRejectBreakInTarget::Swap(PushRequestRejectBreakInTarget* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(unknown_3_, other->unknown_3_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRejectBreakInTarget::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRejectBreakInTarget";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PushRequestRemoveBreakInTarget::PushRequestRemoveBreakInTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
}

void PushRequestRemoveBreakInTarget::InitAsDefaultInstance() {
}

PushRequestRemoveBreakInTarget::PushRequestRemoveBreakInTarget(const PushRequestRemoveBreakInTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
}

void PushRequestRemoveBreakInTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRemoveBreakInTarget::~PushRequestRemoveBreakInTarget() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
  SharedDtor();
}

void PushRequestRemoveBreakInTarget::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRemoveBreakInTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRemoveBreakInTarget& PushRequestRemoveBreakInTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRemoveBreakInTarget* PushRequestRemoveBreakInTarget::default_instance_ = NULL;

PushRequestRemoveBreakInTarget* PushRequestRemoveBreakInTarget::New() const {
  return new PushRequestRemoveBreakInTarget;
}

void PushRequestRemoveBreakInTarget::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRemoveBreakInTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
  return false;
#undef DO_
}

void PushRequestRemoveBreakInTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget)
}

int PushRequestRemoveBreakInTarget::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRemoveBreakInTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRemoveBreakInTarget*>(&from));
}

void PushRequestRemoveBreakInTarget::MergeFrom(const PushRequestRemoveBreakInTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRemoveBreakInTarget::CopyFrom(const PushRequestRemoveBreakInTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRemoveBreakInTarget::IsInitialized() const {

  return true;
}

void PushRequestRemoveBreakInTarget::Swap(PushRequestRemoveBreakInTarget* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRemoveBreakInTarget::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRemoveBreakInTarget";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBreakInTarget::kOnlineAreaIdFieldNumber;
const int RequestBreakInTarget::kCellIdFieldNumber;
const int RequestBreakInTarget::kPlayerIdFieldNumber;
const int RequestBreakInTarget::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestBreakInTarget::RequestBreakInTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestBreakInTarget)
}

void RequestBreakInTarget::InitAsDefaultInstance() {
}

RequestBreakInTarget::RequestBreakInTarget(const RequestBreakInTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestBreakInTarget)
}

void RequestBreakInTarget::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  player_id_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBreakInTarget::~RequestBreakInTarget() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestBreakInTarget)
  SharedDtor();
}

void RequestBreakInTarget::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestBreakInTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestBreakInTarget& RequestBreakInTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestBreakInTarget* RequestBreakInTarget::default_instance_ = NULL;

RequestBreakInTarget* RequestBreakInTarget::New() const {
  return new RequestBreakInTarget;
}

void RequestBreakInTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestBreakInTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestBreakInTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestBreakInTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 3;
      case 3: {
        if (tag == 24) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.BreakInType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::BreakInType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::BreakInType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestBreakInTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestBreakInTarget)
  return false;
#undef DO_
}

void RequestBreakInTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestBreakInTarget)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.BreakInType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestBreakInTarget)
}

int RequestBreakInTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required .DS2_Frpg2RequestMessage.BreakInType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBreakInTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestBreakInTarget*>(&from));
}

void RequestBreakInTarget::MergeFrom(const RequestBreakInTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestBreakInTarget::CopyFrom(const RequestBreakInTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBreakInTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestBreakInTarget::Swap(RequestBreakInTarget* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestBreakInTarget::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestBreakInTarget";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestBreakInTargetResponse::RequestBreakInTargetResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
}

void RequestBreakInTargetResponse::InitAsDefaultInstance() {
}

RequestBreakInTargetResponse::RequestBreakInTargetResponse(const RequestBreakInTargetResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
}

void RequestBreakInTargetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBreakInTargetResponse::~RequestBreakInTargetResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
  SharedDtor();
}

void RequestBreakInTargetResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestBreakInTargetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestBreakInTargetResponse& RequestBreakInTargetResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestBreakInTargetResponse* RequestBreakInTargetResponse::default_instance_ = NULL;

RequestBreakInTargetResponse* RequestBreakInTargetResponse::New() const {
  return new RequestBreakInTargetResponse;
}

void RequestBreakInTargetResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestBreakInTargetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
  return false;
#undef DO_
}

void RequestBreakInTargetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestBreakInTargetResponse)
}

int RequestBreakInTargetResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBreakInTargetResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestBreakInTargetResponse*>(&from));
}

void RequestBreakInTargetResponse::MergeFrom(const RequestBreakInTargetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestBreakInTargetResponse::CopyFrom(const RequestBreakInTargetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBreakInTargetResponse::IsInitialized() const {

  return true;
}

void RequestBreakInTargetResponse::Swap(RequestBreakInTargetResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestBreakInTargetResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestBreakInTargetResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBreakInTargetList::kOnlineAreaIdFieldNumber;
const int RequestGetBreakInTargetList::kCellIdFieldNumber;
const int RequestGetBreakInTargetList::kMaxTargetsFieldNumber;
const int RequestGetBreakInTargetList::kMatchingParameterFieldNumber;
const int RequestGetBreakInTargetList::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestGetBreakInTargetList::RequestGetBreakInTargetList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
}

void RequestGetBreakInTargetList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestGetBreakInTargetList::RequestGetBreakInTargetList(const RequestGetBreakInTargetList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
}

void RequestGetBreakInTargetList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  max_targets_ = 0u;
  matching_parameter_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBreakInTargetList::~RequestGetBreakInTargetList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
  SharedDtor();
}

void RequestGetBreakInTargetList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestGetBreakInTargetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBreakInTargetList& RequestGetBreakInTargetList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBreakInTargetList* RequestGetBreakInTargetList::default_instance_ = NULL;

RequestGetBreakInTargetList* RequestGetBreakInTargetList::New() const {
  return new RequestGetBreakInTargetList;
}

void RequestGetBreakInTargetList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetBreakInTargetList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(online_area_id_, cell_id_);
    ZR_(max_targets_, type_);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBreakInTargetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_targets;
        break;
      }

      // required uint32 max_targets = 3;
      case 3: {
        if (tag == 24) {
         parse_max_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_targets_)));
          set_has_max_targets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.BreakInType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::BreakInType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::BreakInType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
  return false;
#undef DO_
}

void RequestGetBreakInTargetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required uint32 max_targets = 3;
  if (has_max_targets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_targets(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->matching_parameter(), output);
  }

  // required .DS2_Frpg2RequestMessage.BreakInType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBreakInTargetList)
}

int RequestGetBreakInTargetList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 max_targets = 3;
    if (has_max_targets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_targets());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required .DS2_Frpg2RequestMessage.BreakInType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBreakInTargetList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBreakInTargetList*>(&from));
}

void RequestGetBreakInTargetList::MergeFrom(const RequestGetBreakInTargetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_max_targets()) {
      set_max_targets(from.max_targets());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBreakInTargetList::CopyFrom(const RequestGetBreakInTargetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBreakInTargetList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestGetBreakInTargetList::Swap(RequestGetBreakInTargetList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(max_targets_, other->max_targets_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBreakInTargetList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBreakInTargetList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetBreakInTargetListResponse::kOnlineAreaIdFieldNumber;
const int RequestGetBreakInTargetListResponse::kCellIdFieldNumber;
const int RequestGetBreakInTargetListResponse::kTargetDataFieldNumber;
#endif  // !_MSC_VER

RequestGetBreakInTargetListResponse::RequestGetBreakInTargetListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
}

void RequestGetBreakInTargetListResponse::InitAsDefaultInstance() {
}

RequestGetBreakInTargetListResponse::RequestGetBreakInTargetListResponse(const RequestGetBreakInTargetListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
}

void RequestGetBreakInTargetListResponse::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetBreakInTargetListResponse::~RequestGetBreakInTargetListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
  SharedDtor();
}

void RequestGetBreakInTargetListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetBreakInTargetListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetBreakInTargetListResponse& RequestGetBreakInTargetListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetBreakInTargetListResponse* RequestGetBreakInTargetListResponse::default_instance_ = NULL;

RequestGetBreakInTargetListResponse* RequestGetBreakInTargetListResponse::New() const {
  return new RequestGetBreakInTargetListResponse;
}

void RequestGetBreakInTargetListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetBreakInTargetListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, cell_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  target_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetBreakInTargetListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_data;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.BreakInTargetData target_data = 3;
      case 3: {
        if (tag == 26) {
         parse_target_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
  return false;
#undef DO_
}

void RequestGetBreakInTargetListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
  // optional uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // optional uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.BreakInTargetData target_data = 3;
  for (int i = 0; i < this->target_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->target_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse)
}

int RequestGetBreakInTargetListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // optional uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.BreakInTargetData target_data = 3;
  total_size += 1 * this->target_data_size();
  for (int i = 0; i < this->target_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetBreakInTargetListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetBreakInTargetListResponse*>(&from));
}

void RequestGetBreakInTargetListResponse::MergeFrom(const RequestGetBreakInTargetListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_data_.MergeFrom(from.target_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetBreakInTargetListResponse::CopyFrom(const RequestGetBreakInTargetListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetBreakInTargetListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->target_data())) return false;
  return true;
}

void RequestGetBreakInTargetListResponse::Swap(RequestGetBreakInTargetListResponse* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    target_data_.Swap(&other->target_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetBreakInTargetListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetBreakInTargetListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRejectBreakInTarget::kPlayerIdFieldNumber;
const int RequestRejectBreakInTarget::kUnknown2FieldNumber;
const int RequestRejectBreakInTarget::kOnlineAreaIdFieldNumber;
const int RequestRejectBreakInTarget::kCellIdFieldNumber;
const int RequestRejectBreakInTarget::kUnknown5FieldNumber;
#endif  // !_MSC_VER

RequestRejectBreakInTarget::RequestRejectBreakInTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
}

void RequestRejectBreakInTarget::InitAsDefaultInstance() {
}

RequestRejectBreakInTarget::RequestRejectBreakInTarget(const RequestRejectBreakInTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
}

void RequestRejectBreakInTarget::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  unknown_2_ = GOOGLE_LONGLONG(0);
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  unknown_5_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectBreakInTarget::~RequestRejectBreakInTarget() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
  SharedDtor();
}

void RequestRejectBreakInTarget::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectBreakInTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectBreakInTarget& RequestRejectBreakInTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectBreakInTarget* RequestRejectBreakInTarget::default_instance_ = NULL;

RequestRejectBreakInTarget* RequestRejectBreakInTarget::New() const {
  return new RequestRejectBreakInTarget;
}

void RequestRejectBreakInTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRejectBreakInTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, unknown_5_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectBreakInTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_2;
        break;
      }

      // required int64 unknown_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 3;
      case 3: {
        if (tag == 24) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // required int64 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
  return false;
#undef DO_
}

void RequestRejectBreakInTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
  // required int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  // required int64 unknown_2 = 2;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->unknown_2(), output);
  }

  // required int64 online_area_id = 3;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->online_area_id(), output);
  }

  // required int64 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cell_id(), output);
  }

  // required int64 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->unknown_5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectBreakInTarget)
}

int RequestRejectBreakInTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 unknown_2 = 2;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_2());
    }

    // required int64 online_area_id = 3;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required int64 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_5());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectBreakInTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectBreakInTarget*>(&from));
}

void RequestRejectBreakInTarget::MergeFrom(const RequestRejectBreakInTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectBreakInTarget::CopyFrom(const RequestRejectBreakInTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectBreakInTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestRejectBreakInTarget::Swap(RequestRejectBreakInTarget* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectBreakInTarget::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectBreakInTarget";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRejectBreakInTargetResponse::RequestRejectBreakInTargetResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
}

void RequestRejectBreakInTargetResponse::InitAsDefaultInstance() {
}

RequestRejectBreakInTargetResponse::RequestRejectBreakInTargetResponse(const RequestRejectBreakInTargetResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
}

void RequestRejectBreakInTargetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectBreakInTargetResponse::~RequestRejectBreakInTargetResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
  SharedDtor();
}

void RequestRejectBreakInTargetResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectBreakInTargetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectBreakInTargetResponse& RequestRejectBreakInTargetResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectBreakInTargetResponse* RequestRejectBreakInTargetResponse::default_instance_ = NULL;

RequestRejectBreakInTargetResponse* RequestRejectBreakInTargetResponse::New() const {
  return new RequestRejectBreakInTargetResponse;
}

void RequestRejectBreakInTargetResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectBreakInTargetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
  return false;
#undef DO_
}

void RequestRejectBreakInTargetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse)
}

int RequestRejectBreakInTargetResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectBreakInTargetResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectBreakInTargetResponse*>(&from));
}

void RequestRejectBreakInTargetResponse::MergeFrom(const RequestRejectBreakInTargetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectBreakInTargetResponse::CopyFrom(const RequestRejectBreakInTargetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectBreakInTargetResponse::IsInitialized() const {

  return true;
}

void RequestRejectBreakInTargetResponse::Swap(RequestRejectBreakInTargetResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectBreakInTargetResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectBreakInTargetResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GhostData::kCellIdFieldNumber;
const int GhostData::kGhostIdFieldNumber;
const int GhostData::kDataFieldNumber;
#endif  // !_MSC_VER

GhostData::GhostData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.GhostData)
}

void GhostData::InitAsDefaultInstance() {
}

GhostData::GhostData(const GhostData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.GhostData)
}

void GhostData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cell_id_ = 0u;
  ghost_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostData::~GhostData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.GhostData)
  SharedDtor();
}

void GhostData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GhostData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GhostData& GhostData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

GhostData* GhostData::default_instance_ = NULL;

GhostData* GhostData::New() const {
  return new GhostData;
}

void GhostData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GhostData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(cell_id_, ghost_id_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GhostData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.GhostData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cell_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ghost_id;
        break;
      }

      // required uint32 ghost_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ghost_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ghost_id_)));
          set_has_ghost_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.GhostData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.GhostData)
  return false;
#undef DO_
}

void GhostData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.GhostData)
  // required uint32 cell_id = 1;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // required uint32 ghost_id = 2;
  if (has_ghost_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ghost_id(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.GhostData)
}

int GhostData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cell_id = 1;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 ghost_id = 2;
    if (has_ghost_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ghost_id());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GhostData*>(&from));
}

void GhostData::MergeFrom(const GhostData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_ghost_id()) {
      set_ghost_id(from.ghost_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GhostData::CopyFrom(const GhostData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GhostData::Swap(GhostData* other) {
  if (other != this) {
    std::swap(cell_id_, other->cell_id_);
    std::swap(ghost_id_, other->ghost_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GhostData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.GhostData";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetGhostDataList::kOnlineAreaIdFieldNumber;
const int RequestGetGhostDataList::kMaxGhostsFieldNumber;
const int RequestGetGhostDataList::kSearchAreasFieldNumber;
#endif  // !_MSC_VER

RequestGetGhostDataList::RequestGetGhostDataList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
}

void RequestGetGhostDataList::InitAsDefaultInstance() {
}

RequestGetGhostDataList::RequestGetGhostDataList(const RequestGetGhostDataList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
}

void RequestGetGhostDataList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  max_ghosts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetGhostDataList::~RequestGetGhostDataList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
  SharedDtor();
}

void RequestGetGhostDataList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetGhostDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetGhostDataList& RequestGetGhostDataList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetGhostDataList* RequestGetGhostDataList::default_instance_ = NULL;

RequestGetGhostDataList* RequestGetGhostDataList::New() const {
  return new RequestGetGhostDataList;
}

void RequestGetGhostDataList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetGhostDataList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, max_ghosts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  search_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetGhostDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_ghosts;
        break;
      }

      // required uint32 max_ghosts = 2;
      case 2: {
        if (tag == 16) {
         parse_max_ghosts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ghosts_)));
          set_has_max_ghosts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_areas;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.CellLimitData search_areas = 3;
      case 3: {
        if (tag == 26) {
         parse_search_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_areas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
  return false;
#undef DO_
}

void RequestGetGhostDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 max_ghosts = 2;
  if (has_max_ghosts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_ghosts(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.CellLimitData search_areas = 3;
  for (int i = 0; i < this->search_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->search_areas(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetGhostDataList)
}

int RequestGetGhostDataList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 max_ghosts = 2;
    if (has_max_ghosts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ghosts());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.CellLimitData search_areas = 3;
  total_size += 1 * this->search_areas_size();
  for (int i = 0; i < this->search_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_areas(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetGhostDataList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetGhostDataList*>(&from));
}

void RequestGetGhostDataList::MergeFrom(const RequestGetGhostDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_areas_.MergeFrom(from.search_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_max_ghosts()) {
      set_max_ghosts(from.max_ghosts());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetGhostDataList::CopyFrom(const RequestGetGhostDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetGhostDataList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->search_areas())) return false;
  return true;
}

void RequestGetGhostDataList::Swap(RequestGetGhostDataList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(max_ghosts_, other->max_ghosts_);
    search_areas_.Swap(&other->search_areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetGhostDataList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetGhostDataList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetGhostDataListResponse::kOnlineAreaIdFieldNumber;
const int RequestGetGhostDataListResponse::kGhostsFieldNumber;
#endif  // !_MSC_VER

RequestGetGhostDataListResponse::RequestGetGhostDataListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
}

void RequestGetGhostDataListResponse::InitAsDefaultInstance() {
}

RequestGetGhostDataListResponse::RequestGetGhostDataListResponse(const RequestGetGhostDataListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
}

void RequestGetGhostDataListResponse::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetGhostDataListResponse::~RequestGetGhostDataListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
  SharedDtor();
}

void RequestGetGhostDataListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetGhostDataListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetGhostDataListResponse& RequestGetGhostDataListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetGhostDataListResponse* RequestGetGhostDataListResponse::default_instance_ = NULL;

RequestGetGhostDataListResponse* RequestGetGhostDataListResponse::New() const {
  return new RequestGetGhostDataListResponse;
}

void RequestGetGhostDataListResponse::Clear() {
  online_area_id_ = 0u;
  ghosts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetGhostDataListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ghosts;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.GhostData ghosts = 3;
      case 3: {
        if (tag == 26) {
         parse_ghosts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ghosts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ghosts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
  return false;
#undef DO_
}

void RequestGetGhostDataListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.GhostData ghosts = 3;
  for (int i = 0; i < this->ghosts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ghosts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse)
}

int RequestGetGhostDataListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.GhostData ghosts = 3;
  total_size += 1 * this->ghosts_size();
  for (int i = 0; i < this->ghosts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ghosts(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetGhostDataListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetGhostDataListResponse*>(&from));
}

void RequestGetGhostDataListResponse::MergeFrom(const RequestGetGhostDataListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ghosts_.MergeFrom(from.ghosts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetGhostDataListResponse::CopyFrom(const RequestGetGhostDataListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetGhostDataListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ghosts())) return false;
  return true;
}

void RequestGetGhostDataListResponse::Swap(RequestGetGhostDataListResponse* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    ghosts_.Swap(&other->ghosts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetGhostDataListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetGhostDataListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateGhostData::kOnlineAreaIdFieldNumber;
const int RequestCreateGhostData::kCellIdFieldNumber;
const int RequestCreateGhostData::kDataFieldNumber;
#endif  // !_MSC_VER

RequestCreateGhostData::RequestCreateGhostData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateGhostData)
}

void RequestCreateGhostData::InitAsDefaultInstance() {
}

RequestCreateGhostData::RequestCreateGhostData(const RequestCreateGhostData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateGhostData)
}

void RequestCreateGhostData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = 0u;
  cell_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateGhostData::~RequestCreateGhostData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateGhostData)
  SharedDtor();
}

void RequestCreateGhostData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateGhostData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateGhostData& RequestCreateGhostData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateGhostData* RequestCreateGhostData::default_instance_ = NULL;

RequestCreateGhostData* RequestCreateGhostData::New() const {
  return new RequestCreateGhostData;
}

void RequestCreateGhostData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestCreateGhostData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(online_area_id_, cell_id_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateGhostData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateGhostData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required uint32 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateGhostData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateGhostData)
  return false;
#undef DO_
}

void RequestCreateGhostData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateGhostData)
  // required uint32 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_area_id(), output);
  }

  // required uint32 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateGhostData)
}

int RequestCreateGhostData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

    // required uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateGhostData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateGhostData*>(&from));
}

void RequestCreateGhostData::MergeFrom(const RequestCreateGhostData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateGhostData::CopyFrom(const RequestCreateGhostData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateGhostData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestCreateGhostData::Swap(RequestCreateGhostData* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateGhostData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateGhostData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestCreateGhostDataResponse::RequestCreateGhostDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
}

void RequestCreateGhostDataResponse::InitAsDefaultInstance() {
}

RequestCreateGhostDataResponse::RequestCreateGhostDataResponse(const RequestCreateGhostDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
}

void RequestCreateGhostDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateGhostDataResponse::~RequestCreateGhostDataResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
  SharedDtor();
}

void RequestCreateGhostDataResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateGhostDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateGhostDataResponse& RequestCreateGhostDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCreateGhostDataResponse* RequestCreateGhostDataResponse::default_instance_ = NULL;

RequestCreateGhostDataResponse* RequestCreateGhostDataResponse::New() const {
  return new RequestCreateGhostDataResponse;
}

void RequestCreateGhostDataResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCreateGhostDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
  return false;
#undef DO_
}

void RequestCreateGhostDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse)
}

int RequestCreateGhostDataResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateGhostDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateGhostDataResponse*>(&from));
}

void RequestCreateGhostDataResponse::MergeFrom(const RequestCreateGhostDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCreateGhostDataResponse::CopyFrom(const RequestCreateGhostDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateGhostDataResponse::IsInitialized() const {

  return true;
}

void RequestCreateGhostDataResponse::Swap(RequestCreateGhostDataResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateGhostDataResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCreateGhostDataResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int VisitorData::kPlayerIdFieldNumber;
const int VisitorData::kPlayerSteamIdFieldNumber;
#endif  // !_MSC_VER

VisitorData::VisitorData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.VisitorData)
}

void VisitorData::InitAsDefaultInstance() {
}

VisitorData::VisitorData(const VisitorData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.VisitorData)
}

void VisitorData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisitorData::~VisitorData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.VisitorData)
  SharedDtor();
}

void VisitorData::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VisitorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VisitorData& VisitorData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

VisitorData* VisitorData::default_instance_ = NULL;

VisitorData* VisitorData::New() const {
  return new VisitorData;
}

void VisitorData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VisitorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.VisitorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 2;
      case 2: {
        if (tag == 18) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.VisitorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.VisitorData)
  return false;
#undef DO_
}

void VisitorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.VisitorData)
  // required int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  // required string player_steam_id = 2;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_steam_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.VisitorData)
}

int VisitorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required string player_steam_id = 2;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitorData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VisitorData*>(&from));
}

void VisitorData::MergeFrom(const VisitorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VisitorData::CopyFrom(const VisitorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VisitorData::Swap(VisitorData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VisitorData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.VisitorData";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetVisitorList::kOnlineAreaIdFieldNumber;
const int RequestGetVisitorList::kCellIdFieldNumber;
const int RequestGetVisitorList::kMaxTargetsFieldNumber;
const int RequestGetVisitorList::kMatchingParameterFieldNumber;
const int RequestGetVisitorList::kTypeFieldNumber;
const int RequestGetVisitorList::kField6FieldNumber;
#endif  // !_MSC_VER

RequestGetVisitorList::RequestGetVisitorList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetVisitorList)
}

void RequestGetVisitorList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestGetVisitorList::RequestGetVisitorList(const RequestGetVisitorList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetVisitorList)
}

void RequestGetVisitorList::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  max_targets_ = GOOGLE_LONGLONG(0);
  matching_parameter_ = NULL;
  type_ = -1;
  field_6_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetVisitorList::~RequestGetVisitorList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetVisitorList)
  SharedDtor();
}

void RequestGetVisitorList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestGetVisitorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetVisitorList& RequestGetVisitorList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetVisitorList* RequestGetVisitorList::default_instance_ = NULL;

RequestGetVisitorList* RequestGetVisitorList::New() const {
  return new RequestGetVisitorList;
}

void RequestGetVisitorList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetVisitorList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(online_area_id_, max_targets_);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
    type_ = -1;
    field_6_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetVisitorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetVisitorList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_targets;
        break;
      }

      // required int64 max_targets = 3;
      case 3: {
        if (tag == 24) {
         parse_max_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_targets_)));
          set_has_max_targets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::VisitorType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::VisitorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_field_6;
        break;
      }

      // required int64 field_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_field_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_6_)));
          set_has_field_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetVisitorList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetVisitorList)
  return false;
#undef DO_
}

void RequestGetVisitorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetVisitorList)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // required int64 max_targets = 3;
  if (has_max_targets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_targets(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->matching_parameter(), output);
  }

  // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // required int64 field_6 = 6;
  if (has_field_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->field_6(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetVisitorList)
}

int RequestGetVisitorList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required int64 max_targets = 3;
    if (has_max_targets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_targets());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 field_6 = 6;
    if (has_field_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_6());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetVisitorList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetVisitorList*>(&from));
}

void RequestGetVisitorList::MergeFrom(const RequestGetVisitorList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_max_targets()) {
      set_max_targets(from.max_targets());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_field_6()) {
      set_field_6(from.field_6());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetVisitorList::CopyFrom(const RequestGetVisitorList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetVisitorList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestGetVisitorList::Swap(RequestGetVisitorList* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(max_targets_, other->max_targets_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(type_, other->type_);
    std::swap(field_6_, other->field_6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetVisitorList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetVisitorList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetVisitorListResponse::kOnlineAreaIdFieldNumber;
const int RequestGetVisitorListResponse::kCellIdFieldNumber;
const int RequestGetVisitorListResponse::kTargetDataFieldNumber;
#endif  // !_MSC_VER

RequestGetVisitorListResponse::RequestGetVisitorListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
}

void RequestGetVisitorListResponse::InitAsDefaultInstance() {
}

RequestGetVisitorListResponse::RequestGetVisitorListResponse(const RequestGetVisitorListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
}

void RequestGetVisitorListResponse::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetVisitorListResponse::~RequestGetVisitorListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
  SharedDtor();
}

void RequestGetVisitorListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetVisitorListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetVisitorListResponse& RequestGetVisitorListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetVisitorListResponse* RequestGetVisitorListResponse::default_instance_ = NULL;

RequestGetVisitorListResponse* RequestGetVisitorListResponse::New() const {
  return new RequestGetVisitorListResponse;
}

void RequestGetVisitorListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetVisitorListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, cell_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  target_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetVisitorListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_data;
        break;
      }

      // repeated .DS2_Frpg2RequestMessage.VisitorData target_data = 3;
      case 3: {
        if (tag == 26) {
         parse_target_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
  return false;
#undef DO_
}

void RequestGetVisitorListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // repeated .DS2_Frpg2RequestMessage.VisitorData target_data = 3;
  for (int i = 0; i < this->target_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->target_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetVisitorListResponse)
}

int RequestGetVisitorListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

  }
  // repeated .DS2_Frpg2RequestMessage.VisitorData target_data = 3;
  total_size += 1 * this->target_data_size();
  for (int i = 0; i < this->target_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetVisitorListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetVisitorListResponse*>(&from));
}

void RequestGetVisitorListResponse::MergeFrom(const RequestGetVisitorListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_data_.MergeFrom(from.target_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetVisitorListResponse::CopyFrom(const RequestGetVisitorListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetVisitorListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->target_data())) return false;
  return true;
}

void RequestGetVisitorListResponse::Swap(RequestGetVisitorListResponse* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    target_data_.Swap(&other->target_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetVisitorListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetVisitorListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRemoveVisitor::kPushMessageIdFieldNumber;
const int PushRequestRemoveVisitor::kPlayerIdFieldNumber;
const int PushRequestRemoveVisitor::kPlayerSteamIdFieldNumber;
const int PushRequestRemoveVisitor::kTypeFieldNumber;
#endif  // !_MSC_VER

PushRequestRemoveVisitor::PushRequestRemoveVisitor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
}

void PushRequestRemoveVisitor::InitAsDefaultInstance() {
}

PushRequestRemoveVisitor::PushRequestRemoveVisitor(const PushRequestRemoveVisitor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
}

void PushRequestRemoveVisitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRemoveVisitor::~PushRequestRemoveVisitor() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
  SharedDtor();
}

void PushRequestRemoveVisitor::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRemoveVisitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRemoveVisitor& PushRequestRemoveVisitor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRemoveVisitor* PushRequestRemoveVisitor::default_instance_ = NULL;

PushRequestRemoveVisitor* PushRequestRemoveVisitor::New() const {
  return new PushRequestRemoveVisitor;
}

void PushRequestRemoveVisitor::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    push_message_id_ = 925;
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRemoveVisitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 3;
      case 3: {
        if (tag == 26) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.VisitorType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::VisitorType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::VisitorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
  return false;
#undef DO_
}

void PushRequestRemoveVisitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required string player_steam_id = 3;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->player_steam_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.VisitorType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRemoveVisitor)
}

int PushRequestRemoveVisitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required string player_steam_id = 3;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // required .DS2_Frpg2RequestMessage.VisitorType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRemoveVisitor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRemoveVisitor*>(&from));
}

void PushRequestRemoveVisitor::MergeFrom(const PushRequestRemoveVisitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRemoveVisitor::CopyFrom(const PushRequestRemoveVisitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRemoveVisitor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PushRequestRemoveVisitor::Swap(PushRequestRemoveVisitor* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRemoveVisitor::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRemoveVisitor";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVisit::kOnlineAreaIdFieldNumber;
const int RequestVisit::kCellIdFieldNumber;
const int RequestVisit::kTypeFieldNumber;
const int RequestVisit::kPlayerIdFieldNumber;
const int RequestVisit::kPlayerStructFieldNumber;
#endif  // !_MSC_VER

RequestVisit::RequestVisit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestVisit)
}

void RequestVisit::InitAsDefaultInstance() {
}

RequestVisit::RequestVisit(const RequestVisit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestVisit)
}

void RequestVisit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  type_ = -1;
  player_id_ = GOOGLE_LONGLONG(0);
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVisit::~RequestVisit() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestVisit)
  SharedDtor();
}

void RequestVisit::SharedDtor() {
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestVisit& RequestVisit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestVisit* RequestVisit::default_instance_ = NULL;

RequestVisit* RequestVisit::New() const {
  return new RequestVisit;
}

void RequestVisit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVisit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(online_area_id_, player_id_);
    type_ = -1;
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.VisitorType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::VisitorType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::VisitorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 4;
      case 4: {
        if (tag == 32) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 5;
      case 5: {
        if (tag == 42) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestVisit)
  return false;
#undef DO_
}

void RequestVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestVisit)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.VisitorType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required int64 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->player_id(), output);
  }

  // required bytes player_struct = 5;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->player_struct(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestVisit)
}

int RequestVisit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.VisitorType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required bytes player_struct = 5;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVisit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestVisit*>(&from));
}

void RequestVisit::MergeFrom(const RequestVisit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestVisit::CopyFrom(const RequestVisit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVisit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestVisit::Swap(RequestVisit* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(type_, other->type_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestVisit::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestVisit";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestVisitResponse::RequestVisitResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestVisitResponse)
}

void RequestVisitResponse::InitAsDefaultInstance() {
}

RequestVisitResponse::RequestVisitResponse(const RequestVisitResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestVisitResponse)
}

void RequestVisitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVisitResponse::~RequestVisitResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestVisitResponse)
  SharedDtor();
}

void RequestVisitResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestVisitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestVisitResponse& RequestVisitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestVisitResponse* RequestVisitResponse::default_instance_ = NULL;

RequestVisitResponse* RequestVisitResponse::New() const {
  return new RequestVisitResponse;
}

void RequestVisitResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestVisitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestVisitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestVisitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestVisitResponse)
  return false;
#undef DO_
}

void RequestVisitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestVisitResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestVisitResponse)
}

int RequestVisitResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVisitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestVisitResponse*>(&from));
}

void RequestVisitResponse::MergeFrom(const RequestVisitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestVisitResponse::CopyFrom(const RequestVisitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVisitResponse::IsInitialized() const {

  return true;
}

void RequestVisitResponse::Swap(RequestVisitResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestVisitResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestVisitResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRejectVisit::kPlayerIdFieldNumber;
const int RequestRejectVisit::kUnknown2FieldNumber;
const int RequestRejectVisit::kOnlineAreaIdFieldNumber;
const int RequestRejectVisit::kCellIdFieldNumber;
const int RequestRejectVisit::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestRejectVisit::RequestRejectVisit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectVisit)
}

void RequestRejectVisit::InitAsDefaultInstance() {
}

RequestRejectVisit::RequestRejectVisit(const RequestRejectVisit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectVisit)
}

void RequestRejectVisit::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  unknown_2_ = GOOGLE_LONGLONG(0);
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectVisit::~RequestRejectVisit() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectVisit)
  SharedDtor();
}

void RequestRejectVisit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectVisit& RequestRejectVisit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectVisit* RequestRejectVisit::default_instance_ = NULL;

RequestRejectVisit* RequestRejectVisit::New() const {
  return new RequestRejectVisit;
}

void RequestRejectVisit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRejectVisit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, cell_id_);
    type_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_2;
        break;
      }

      // required int64 unknown_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 3;
      case 3: {
        if (tag == 24) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .DS2_Frpg2RequestMessage.VisitorType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::VisitorType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::VisitorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectVisit)
  return false;
#undef DO_
}

void RequestRejectVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectVisit)
  // required int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  // required int64 unknown_2 = 2;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->unknown_2(), output);
  }

  // required int64 online_area_id = 3;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->online_area_id(), output);
  }

  // required int64 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cell_id(), output);
  }

  // optional .DS2_Frpg2RequestMessage.VisitorType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectVisit)
}

int RequestRejectVisit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 unknown_2 = 2;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_2());
    }

    // required int64 online_area_id = 3;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // optional .DS2_Frpg2RequestMessage.VisitorType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectVisit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectVisit*>(&from));
}

void RequestRejectVisit::MergeFrom(const RequestRejectVisit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectVisit::CopyFrom(const RequestRejectVisit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectVisit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestRejectVisit::Swap(RequestRejectVisit* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectVisit::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectVisit";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRejectVisitResponse::RequestRejectVisitResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
}

void RequestRejectVisitResponse::InitAsDefaultInstance() {
}

RequestRejectVisitResponse::RequestRejectVisitResponse(const RequestRejectVisitResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
}

void RequestRejectVisitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectVisitResponse::~RequestRejectVisitResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
  SharedDtor();
}

void RequestRejectVisitResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectVisitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectVisitResponse& RequestRejectVisitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectVisitResponse* RequestRejectVisitResponse::default_instance_ = NULL;

RequestRejectVisitResponse* RequestRejectVisitResponse::New() const {
  return new RequestRejectVisitResponse;
}

void RequestRejectVisitResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectVisitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
  return false;
#undef DO_
}

void RequestRejectVisitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectVisitResponse)
}

int RequestRejectVisitResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectVisitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectVisitResponse*>(&from));
}

void RequestRejectVisitResponse::MergeFrom(const RequestRejectVisitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectVisitResponse::CopyFrom(const RequestRejectVisitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectVisitResponse::IsInitialized() const {

  return true;
}

void RequestRejectVisitResponse::Swap(RequestRejectVisitResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectVisitResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectVisitResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRejectVisit::kPushMessageIdFieldNumber;
const int PushRequestRejectVisit::kPlayerIdFieldNumber;
const int PushRequestRejectVisit::kUnknown3FieldNumber;
const int PushRequestRejectVisit::kSteamIdFieldNumber;
const int PushRequestRejectVisit::kTypeFieldNumber;
#endif  // !_MSC_VER

PushRequestRejectVisit::PushRequestRejectVisit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
}

void PushRequestRejectVisit::InitAsDefaultInstance() {
}

PushRequestRejectVisit::PushRequestRejectVisit(const PushRequestRejectVisit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
}

void PushRequestRejectVisit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  unknown_3_ = GOOGLE_LONGLONG(0);
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRejectVisit::~PushRequestRejectVisit() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
  SharedDtor();
}

void PushRequestRejectVisit::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRejectVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRejectVisit& PushRequestRejectVisit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRejectVisit* PushRequestRejectVisit::default_instance_ = NULL;

PushRequestRejectVisit* PushRequestRejectVisit::New() const {
  return new PushRequestRejectVisit;
}

void PushRequestRejectVisit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestRejectVisit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, unknown_3_);
    push_message_id_ = 925;
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
    type_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRejectVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_3;
        break;
      }

      // required int64 unknown_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_3_)));
          set_has_unknown_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_steam_id;
        break;
      }

      // required string steam_id = 4;
      case 4: {
        if (tag == 34) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::VisitorType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::VisitorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
  return false;
#undef DO_
}

void PushRequestRejectVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 unknown_3 = 3;
  if (has_unknown_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->unknown_3(), output);
  }

  // required string steam_id = 4;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->steam_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRejectVisit)
}

int PushRequestRejectVisit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 unknown_3 = 3;
    if (has_unknown_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_3());
    }

    // required string steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRejectVisit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRejectVisit*>(&from));
}

void PushRequestRejectVisit::MergeFrom(const PushRequestRejectVisit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_unknown_3()) {
      set_unknown_3(from.unknown_3());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRejectVisit::CopyFrom(const PushRequestRejectVisit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRejectVisit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PushRequestRejectVisit::Swap(PushRequestRejectVisit* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(unknown_3_, other->unknown_3_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRejectVisit::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRejectVisit";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestVisit::kPushMessageIdFieldNumber;
const int PushRequestVisit::kPlayerIdFieldNumber;
const int PushRequestVisit::kPlayerSteamIdFieldNumber;
const int PushRequestVisit::kPlayerStructFieldNumber;
const int PushRequestVisit::kTypeFieldNumber;
const int PushRequestVisit::kOnlineAreaIdFieldNumber;
const int PushRequestVisit::kCellIdFieldNumber;
#endif  // !_MSC_VER

PushRequestVisit::PushRequestVisit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestVisit)
}

void PushRequestVisit::InitAsDefaultInstance() {
}

PushRequestVisit::PushRequestVisit(const PushRequestVisit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestVisit)
}

void PushRequestVisit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = -1;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestVisit::~PushRequestVisit() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestVisit)
  SharedDtor();
}

void PushRequestVisit::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_struct_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestVisit& PushRequestVisit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestVisit* PushRequestVisit::default_instance_ = NULL;

PushRequestVisit* PushRequestVisit::New() const {
  return new PushRequestVisit;
}

void PushRequestVisit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestVisit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(online_area_id_, cell_id_);
    push_message_id_ = 925;
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
    if (has_player_struct()) {
      if (player_struct_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_struct_->clear();
      }
    }
    type_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 3;
      case 3: {
        if (tag == 26) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_struct;
        break;
      }

      // required bytes player_struct = 4;
      case 4: {
        if (tag == 34) {
         parse_player_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_struct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::VisitorType_IsValid(value)) {
            set_type(static_cast< ::DS2_Frpg2RequestMessage::VisitorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 6;
      case 6: {
        if (tag == 48) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 7;
      case 7: {
        if (tag == 56) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestVisit)
  return false;
#undef DO_
}

void PushRequestVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestVisit)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required string player_steam_id = 3;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->player_steam_id(), output);
  }

  // required bytes player_struct = 4;
  if (has_player_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->player_struct(), output);
  }

  // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // required int64 online_area_id = 6;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->online_area_id(), output);
  }

  // required int64 cell_id = 7;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->cell_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestVisit)
}

int PushRequestVisit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required string player_steam_id = 3;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // required bytes player_struct = 4;
    if (has_player_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_struct());
    }

    // required .DS2_Frpg2RequestMessage.VisitorType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 online_area_id = 6;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 7;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestVisit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestVisit*>(&from));
}

void PushRequestVisit::MergeFrom(const PushRequestVisit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_player_struct()) {
      set_player_struct(from.player_struct());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestVisit::CopyFrom(const PushRequestVisit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestVisit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PushRequestVisit::Swap(PushRequestVisit* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(player_struct_, other->player_struct_);
    std::swap(type_, other->type_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestVisit::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestVisit";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestNotifyRingBell::kPushMessageIdFieldNumber;
#endif  // !_MSC_VER

PushRequestNotifyRingBell::PushRequestNotifyRingBell()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
}

void PushRequestNotifyRingBell::InitAsDefaultInstance() {
}

PushRequestNotifyRingBell::PushRequestNotifyRingBell(const PushRequestNotifyRingBell& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
}

void PushRequestNotifyRingBell::SharedCtor() {
  _cached_size_ = 0;
  push_message_id_ = 925;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestNotifyRingBell::~PushRequestNotifyRingBell() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
  SharedDtor();
}

void PushRequestNotifyRingBell::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestNotifyRingBell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestNotifyRingBell& PushRequestNotifyRingBell::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestNotifyRingBell* PushRequestNotifyRingBell::default_instance_ = NULL;

PushRequestNotifyRingBell* PushRequestNotifyRingBell::New() const {
  return new PushRequestNotifyRingBell;
}

void PushRequestNotifyRingBell::Clear() {
  push_message_id_ = 925;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestNotifyRingBell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
  return false;
#undef DO_
}

void PushRequestNotifyRingBell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestNotifyRingBell)
}

int PushRequestNotifyRingBell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestNotifyRingBell::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestNotifyRingBell*>(&from));
}

void PushRequestNotifyRingBell::MergeFrom(const PushRequestNotifyRingBell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestNotifyRingBell::CopyFrom(const PushRequestNotifyRingBell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestNotifyRingBell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PushRequestNotifyRingBell::Swap(PushRequestNotifyRingBell* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestNotifyRingBell::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestNotifyRingBell";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyRingBell::RequestNotifyRingBell()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
}

void RequestNotifyRingBell::InitAsDefaultInstance() {
}

RequestNotifyRingBell::RequestNotifyRingBell(const RequestNotifyRingBell& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
}

void RequestNotifyRingBell::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyRingBell::~RequestNotifyRingBell() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
  SharedDtor();
}

void RequestNotifyRingBell::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyRingBell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyRingBell& RequestNotifyRingBell::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyRingBell* RequestNotifyRingBell::default_instance_ = NULL;

RequestNotifyRingBell* RequestNotifyRingBell::New() const {
  return new RequestNotifyRingBell;
}

void RequestNotifyRingBell::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyRingBell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
  return false;
#undef DO_
}

void RequestNotifyRingBell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyRingBell)
}

int RequestNotifyRingBell::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyRingBell::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyRingBell*>(&from));
}

void RequestNotifyRingBell::MergeFrom(const RequestNotifyRingBell& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyRingBell::CopyFrom(const RequestNotifyRingBell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyRingBell::IsInitialized() const {

  return true;
}

void RequestNotifyRingBell::Swap(RequestNotifyRingBell* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyRingBell::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyRingBell";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNotifyRingBellResponse::RequestNotifyRingBellResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
}

void RequestNotifyRingBellResponse::InitAsDefaultInstance() {
}

RequestNotifyRingBellResponse::RequestNotifyRingBellResponse(const RequestNotifyRingBellResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
}

void RequestNotifyRingBellResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNotifyRingBellResponse::~RequestNotifyRingBellResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
  SharedDtor();
}

void RequestNotifyRingBellResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestNotifyRingBellResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestNotifyRingBellResponse& RequestNotifyRingBellResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestNotifyRingBellResponse* RequestNotifyRingBellResponse::default_instance_ = NULL;

RequestNotifyRingBellResponse* RequestNotifyRingBellResponse::New() const {
  return new RequestNotifyRingBellResponse;
}

void RequestNotifyRingBellResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestNotifyRingBellResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
  return false;
#undef DO_
}

void RequestNotifyRingBellResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse)
}

int RequestNotifyRingBellResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNotifyRingBellResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestNotifyRingBellResponse*>(&from));
}

void RequestNotifyRingBellResponse::MergeFrom(const RequestNotifyRingBellResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestNotifyRingBellResponse::CopyFrom(const RequestNotifyRingBellResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNotifyRingBellResponse::IsInitialized() const {

  return true;
}

void RequestNotifyRingBellResponse::Swap(RequestNotifyRingBellResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestNotifyRingBellResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestNotifyRingBellResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetRegulationFile::RequestGetRegulationFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
}

void RequestGetRegulationFile::InitAsDefaultInstance() {
}

RequestGetRegulationFile::RequestGetRegulationFile(const RequestGetRegulationFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
}

void RequestGetRegulationFile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetRegulationFile::~RequestGetRegulationFile() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
  SharedDtor();
}

void RequestGetRegulationFile::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetRegulationFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetRegulationFile& RequestGetRegulationFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetRegulationFile* RequestGetRegulationFile::default_instance_ = NULL;

RequestGetRegulationFile* RequestGetRegulationFile::New() const {
  return new RequestGetRegulationFile;
}

void RequestGetRegulationFile::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetRegulationFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
  return false;
#undef DO_
}

void RequestGetRegulationFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetRegulationFile)
}

int RequestGetRegulationFile::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetRegulationFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetRegulationFile*>(&from));
}

void RequestGetRegulationFile::MergeFrom(const RequestGetRegulationFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetRegulationFile::CopyFrom(const RequestGetRegulationFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetRegulationFile::IsInitialized() const {

  return true;
}

void RequestGetRegulationFile::Swap(RequestGetRegulationFile* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetRegulationFile::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetRegulationFile";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetRegulationFileResponse::RequestGetRegulationFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
}

void RequestGetRegulationFileResponse::InitAsDefaultInstance() {
}

RequestGetRegulationFileResponse::RequestGetRegulationFileResponse(const RequestGetRegulationFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
}

void RequestGetRegulationFileResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetRegulationFileResponse::~RequestGetRegulationFileResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
  SharedDtor();
}

void RequestGetRegulationFileResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetRegulationFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetRegulationFileResponse& RequestGetRegulationFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetRegulationFileResponse* RequestGetRegulationFileResponse::default_instance_ = NULL;

RequestGetRegulationFileResponse* RequestGetRegulationFileResponse::New() const {
  return new RequestGetRegulationFileResponse;
}

void RequestGetRegulationFileResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetRegulationFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
  return false;
#undef DO_
}

void RequestGetRegulationFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse)
}

int RequestGetRegulationFileResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetRegulationFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetRegulationFileResponse*>(&from));
}

void RequestGetRegulationFileResponse::MergeFrom(const RequestGetRegulationFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetRegulationFileResponse::CopyFrom(const RequestGetRegulationFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetRegulationFileResponse::IsInitialized() const {

  return true;
}

void RequestGetRegulationFileResponse::Swap(RequestGetRegulationFileResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetRegulationFileResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetRegulationFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegulationFileDiffData::RegulationFileDiffData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RegulationFileDiffData)
}

void RegulationFileDiffData::InitAsDefaultInstance() {
}

RegulationFileDiffData::RegulationFileDiffData(const RegulationFileDiffData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RegulationFileDiffData)
}

void RegulationFileDiffData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegulationFileDiffData::~RegulationFileDiffData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RegulationFileDiffData)
  SharedDtor();
}

void RegulationFileDiffData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegulationFileDiffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegulationFileDiffData& RegulationFileDiffData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RegulationFileDiffData* RegulationFileDiffData::default_instance_ = NULL;

RegulationFileDiffData* RegulationFileDiffData::New() const {
  return new RegulationFileDiffData;
}

void RegulationFileDiffData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegulationFileDiffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RegulationFileDiffData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RegulationFileDiffData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RegulationFileDiffData)
  return false;
#undef DO_
}

void RegulationFileDiffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RegulationFileDiffData)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RegulationFileDiffData)
}

int RegulationFileDiffData::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegulationFileDiffData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegulationFileDiffData*>(&from));
}

void RegulationFileDiffData::MergeFrom(const RegulationFileDiffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegulationFileDiffData::CopyFrom(const RegulationFileDiffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulationFileDiffData::IsInitialized() const {

  return true;
}

void RegulationFileDiffData::Swap(RegulationFileDiffData* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegulationFileDiffData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RegulationFileDiffData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegulationFileMessage::RegulationFileMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RegulationFileMessage)
}

void RegulationFileMessage::InitAsDefaultInstance() {
}

RegulationFileMessage::RegulationFileMessage(const RegulationFileMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RegulationFileMessage)
}

void RegulationFileMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegulationFileMessage::~RegulationFileMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RegulationFileMessage)
  SharedDtor();
}

void RegulationFileMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegulationFileMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegulationFileMessage& RegulationFileMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RegulationFileMessage* RegulationFileMessage::default_instance_ = NULL;

RegulationFileMessage* RegulationFileMessage::New() const {
  return new RegulationFileMessage;
}

void RegulationFileMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegulationFileMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RegulationFileMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RegulationFileMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RegulationFileMessage)
  return false;
#undef DO_
}

void RegulationFileMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RegulationFileMessage)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RegulationFileMessage)
}

int RegulationFileMessage::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegulationFileMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegulationFileMessage*>(&from));
}

void RegulationFileMessage::MergeFrom(const RegulationFileMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegulationFileMessage::CopyFrom(const RegulationFileMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulationFileMessage::IsInitialized() const {

  return true;
}

void RegulationFileMessage::Swap(RegulationFileMessage* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegulationFileMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RegulationFileMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegulationFileUpdateMessage::RegulationFileUpdateMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
}

void RegulationFileUpdateMessage::InitAsDefaultInstance() {
}

RegulationFileUpdateMessage::RegulationFileUpdateMessage(const RegulationFileUpdateMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
}

void RegulationFileUpdateMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegulationFileUpdateMessage::~RegulationFileUpdateMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
  SharedDtor();
}

void RegulationFileUpdateMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegulationFileUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegulationFileUpdateMessage& RegulationFileUpdateMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RegulationFileUpdateMessage* RegulationFileUpdateMessage::default_instance_ = NULL;

RegulationFileUpdateMessage* RegulationFileUpdateMessage::New() const {
  return new RegulationFileUpdateMessage;
}

void RegulationFileUpdateMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegulationFileUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
  return false;
#undef DO_
}

void RegulationFileUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RegulationFileUpdateMessage)
}

int RegulationFileUpdateMessage::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegulationFileUpdateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegulationFileUpdateMessage*>(&from));
}

void RegulationFileUpdateMessage::MergeFrom(const RegulationFileUpdateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegulationFileUpdateMessage::CopyFrom(const RegulationFileUpdateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulationFileUpdateMessage::IsInitialized() const {

  return true;
}

void RegulationFileUpdateMessage::Swap(RegulationFileUpdateMessage* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegulationFileUpdateMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RegulationFileUpdateMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegulationFileUpdatePushMessage::RegulationFileUpdatePushMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
}

void RegulationFileUpdatePushMessage::InitAsDefaultInstance() {
}

RegulationFileUpdatePushMessage::RegulationFileUpdatePushMessage(const RegulationFileUpdatePushMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
}

void RegulationFileUpdatePushMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegulationFileUpdatePushMessage::~RegulationFileUpdatePushMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
  SharedDtor();
}

void RegulationFileUpdatePushMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegulationFileUpdatePushMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegulationFileUpdatePushMessage& RegulationFileUpdatePushMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RegulationFileUpdatePushMessage* RegulationFileUpdatePushMessage::default_instance_ = NULL;

RegulationFileUpdatePushMessage* RegulationFileUpdatePushMessage::New() const {
  return new RegulationFileUpdatePushMessage;
}

void RegulationFileUpdatePushMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegulationFileUpdatePushMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
  return false;
#undef DO_
}

void RegulationFileUpdatePushMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage)
}

int RegulationFileUpdatePushMessage::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegulationFileUpdatePushMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegulationFileUpdatePushMessage*>(&from));
}

void RegulationFileUpdatePushMessage::MergeFrom(const RegulationFileUpdatePushMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegulationFileUpdatePushMessage::CopyFrom(const RegulationFileUpdatePushMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulationFileUpdatePushMessage::IsInitialized() const {

  return true;
}

void RegulationFileUpdatePushMessage::Swap(RegulationFileUpdatePushMessage* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegulationFileUpdatePushMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RegulationFileUpdatePushMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RankingRecordCount::RankingRecordCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RankingRecordCount)
}

void RankingRecordCount::InitAsDefaultInstance() {
}

RankingRecordCount::RankingRecordCount(const RankingRecordCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RankingRecordCount)
}

void RankingRecordCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankingRecordCount::~RankingRecordCount() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RankingRecordCount)
  SharedDtor();
}

void RankingRecordCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RankingRecordCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankingRecordCount& RankingRecordCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RankingRecordCount* RankingRecordCount::default_instance_ = NULL;

RankingRecordCount* RankingRecordCount::New() const {
  return new RankingRecordCount;
}

void RankingRecordCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RankingRecordCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RankingRecordCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RankingRecordCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RankingRecordCount)
  return false;
#undef DO_
}

void RankingRecordCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RankingRecordCount)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RankingRecordCount)
}

int RankingRecordCount::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingRecordCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankingRecordCount*>(&from));
}

void RankingRecordCount::MergeFrom(const RankingRecordCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RankingRecordCount::CopyFrom(const RankingRecordCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingRecordCount::IsInitialized() const {

  return true;
}

void RankingRecordCount::Swap(RankingRecordCount* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankingRecordCount::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RankingRecordCount";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RankingRotationID::RankingRotationID()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RankingRotationID)
}

void RankingRotationID::InitAsDefaultInstance() {
}

RankingRotationID::RankingRotationID(const RankingRotationID& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RankingRotationID)
}

void RankingRotationID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankingRotationID::~RankingRotationID() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RankingRotationID)
  SharedDtor();
}

void RankingRotationID::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RankingRotationID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankingRotationID& RankingRotationID::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RankingRotationID* RankingRotationID::default_instance_ = NULL;

RankingRotationID* RankingRotationID::New() const {
  return new RankingRotationID;
}

void RankingRotationID::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RankingRotationID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RankingRotationID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RankingRotationID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RankingRotationID)
  return false;
#undef DO_
}

void RankingRotationID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RankingRotationID)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RankingRotationID)
}

int RankingRotationID::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingRotationID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankingRotationID*>(&from));
}

void RankingRotationID::MergeFrom(const RankingRotationID& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RankingRotationID::CopyFrom(const RankingRotationID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingRotationID::IsInitialized() const {

  return true;
}

void RankingRotationID::Swap(RankingRotationID* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankingRotationID::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RankingRotationID";
}


// ===================================================================

#ifndef _MSC_VER
const int PowerStoneRankingData::kPlayerIdFieldNumber;
const int PowerStoneRankingData::kCharacterIdFieldNumber;
const int PowerStoneRankingData::kSerialRankFieldNumber;
const int PowerStoneRankingData::kRankFieldNumber;
const int PowerStoneRankingData::kScoreFieldNumber;
const int PowerStoneRankingData::kDataFieldNumber;
#endif  // !_MSC_VER

PowerStoneRankingData::PowerStoneRankingData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PowerStoneRankingData)
}

void PowerStoneRankingData::InitAsDefaultInstance() {
}

PowerStoneRankingData::PowerStoneRankingData(const PowerStoneRankingData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PowerStoneRankingData)
}

void PowerStoneRankingData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  character_id_ = 0u;
  serial_rank_ = 0u;
  rank_ = 0u;
  score_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerStoneRankingData::~PowerStoneRankingData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PowerStoneRankingData)
  SharedDtor();
}

void PowerStoneRankingData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PowerStoneRankingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerStoneRankingData& PowerStoneRankingData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PowerStoneRankingData* PowerStoneRankingData::default_instance_ = NULL;

PowerStoneRankingData* PowerStoneRankingData::New() const {
  return new PowerStoneRankingData;
}

void PowerStoneRankingData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PowerStoneRankingData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(player_id_, rank_);
    score_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PowerStoneRankingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PowerStoneRankingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 2;
      case 2: {
        if (tag == 16) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serial_rank;
        break;
      }

      // required uint32 serial_rank = 3;
      case 3: {
        if (tag == 24) {
         parse_serial_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_rank_)));
          set_has_serial_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // required uint32 rank = 4;
      case 4: {
        if (tag == 32) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // required uint32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // required bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PowerStoneRankingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PowerStoneRankingData)
  return false;
#undef DO_
}

void PowerStoneRankingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PowerStoneRankingData)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->character_id(), output);
  }

  // required uint32 serial_rank = 3;
  if (has_serial_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serial_rank(), output);
  }

  // required uint32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // required uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // required bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PowerStoneRankingData)
}

int PowerStoneRankingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 character_id = 2;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required uint32 serial_rank = 3;
    if (has_serial_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_rank());
    }

    // required uint32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerStoneRankingData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerStoneRankingData*>(&from));
}

void PowerStoneRankingData::MergeFrom(const PowerStoneRankingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_serial_rank()) {
      set_serial_rank(from.serial_rank());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PowerStoneRankingData::CopyFrom(const PowerStoneRankingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerStoneRankingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PowerStoneRankingData::Swap(PowerStoneRankingData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(character_id_, other->character_id_);
    std::swap(serial_rank_, other->serial_rank_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PowerStoneRankingData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PowerStoneRankingData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PowerStoneRankingDataPack::PowerStoneRankingDataPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
}

void PowerStoneRankingDataPack::InitAsDefaultInstance() {
}

PowerStoneRankingDataPack::PowerStoneRankingDataPack(const PowerStoneRankingDataPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
}

void PowerStoneRankingDataPack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerStoneRankingDataPack::~PowerStoneRankingDataPack() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
  SharedDtor();
}

void PowerStoneRankingDataPack::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PowerStoneRankingDataPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerStoneRankingDataPack& PowerStoneRankingDataPack::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PowerStoneRankingDataPack* PowerStoneRankingDataPack::default_instance_ = NULL;

PowerStoneRankingDataPack* PowerStoneRankingDataPack::New() const {
  return new PowerStoneRankingDataPack;
}

void PowerStoneRankingDataPack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PowerStoneRankingDataPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
  return false;
#undef DO_
}

void PowerStoneRankingDataPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PowerStoneRankingDataPack)
}

int PowerStoneRankingDataPack::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerStoneRankingDataPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerStoneRankingDataPack*>(&from));
}

void PowerStoneRankingDataPack::MergeFrom(const PowerStoneRankingDataPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PowerStoneRankingDataPack::CopyFrom(const PowerStoneRankingDataPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerStoneRankingDataPack::IsInitialized() const {

  return true;
}

void PowerStoneRankingDataPack::Swap(PowerStoneRankingDataPack* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PowerStoneRankingDataPack::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PowerStoneRankingDataPack";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPowerStoneMyRanking::kCharacterIdFieldNumber;
#endif  // !_MSC_VER

RequestGetPowerStoneMyRanking::RequestGetPowerStoneMyRanking()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
}

void RequestGetPowerStoneMyRanking::InitAsDefaultInstance() {
}

RequestGetPowerStoneMyRanking::RequestGetPowerStoneMyRanking(const RequestGetPowerStoneMyRanking& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
}

void RequestGetPowerStoneMyRanking::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPowerStoneMyRanking::~RequestGetPowerStoneMyRanking() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
  SharedDtor();
}

void RequestGetPowerStoneMyRanking::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPowerStoneMyRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPowerStoneMyRanking& RequestGetPowerStoneMyRanking::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPowerStoneMyRanking* RequestGetPowerStoneMyRanking::default_instance_ = NULL;

RequestGetPowerStoneMyRanking* RequestGetPowerStoneMyRanking::New() const {
  return new RequestGetPowerStoneMyRanking;
}

void RequestGetPowerStoneMyRanking::Clear() {
  character_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPowerStoneMyRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
  return false;
#undef DO_
}

void RequestGetPowerStoneMyRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking)
}

int RequestGetPowerStoneMyRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPowerStoneMyRanking::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPowerStoneMyRanking*>(&from));
}

void RequestGetPowerStoneMyRanking::MergeFrom(const RequestGetPowerStoneMyRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPowerStoneMyRanking::CopyFrom(const RequestGetPowerStoneMyRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPowerStoneMyRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestGetPowerStoneMyRanking::Swap(RequestGetPowerStoneMyRanking* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPowerStoneMyRanking::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRanking";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPowerStoneMyRankingResponse::kDataFieldNumber;
#endif  // !_MSC_VER

RequestGetPowerStoneMyRankingResponse::RequestGetPowerStoneMyRankingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
}

void RequestGetPowerStoneMyRankingResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  data_ = const_cast< ::DS2_Frpg2RequestMessage::PowerStoneRankingData*>(
      ::DS2_Frpg2RequestMessage::PowerStoneRankingData::internal_default_instance());
#else
  data_ = const_cast< ::DS2_Frpg2RequestMessage::PowerStoneRankingData*>(&::DS2_Frpg2RequestMessage::PowerStoneRankingData::default_instance());
#endif
}

RequestGetPowerStoneMyRankingResponse::RequestGetPowerStoneMyRankingResponse(const RequestGetPowerStoneMyRankingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
}

void RequestGetPowerStoneMyRankingResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPowerStoneMyRankingResponse::~RequestGetPowerStoneMyRankingResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
  SharedDtor();
}

void RequestGetPowerStoneMyRankingResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete data_;
  }
}

void RequestGetPowerStoneMyRankingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPowerStoneMyRankingResponse& RequestGetPowerStoneMyRankingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPowerStoneMyRankingResponse* RequestGetPowerStoneMyRankingResponse::default_instance_ = NULL;

RequestGetPowerStoneMyRankingResponse* RequestGetPowerStoneMyRankingResponse::New() const {
  return new RequestGetPowerStoneMyRankingResponse;
}

void RequestGetPowerStoneMyRankingResponse::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::DS2_Frpg2RequestMessage::PowerStoneRankingData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPowerStoneMyRankingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PowerStoneRankingData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
  return false;
#undef DO_
}

void RequestGetPowerStoneMyRankingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
  // required .DS2_Frpg2RequestMessage.PowerStoneRankingData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse)
}

int RequestGetPowerStoneMyRankingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PowerStoneRankingData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPowerStoneMyRankingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPowerStoneMyRankingResponse*>(&from));
}

void RequestGetPowerStoneMyRankingResponse::MergeFrom(const RequestGetPowerStoneMyRankingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::DS2_Frpg2RequestMessage::PowerStoneRankingData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPowerStoneMyRankingResponse::CopyFrom(const RequestGetPowerStoneMyRankingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPowerStoneMyRankingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void RequestGetPowerStoneMyRankingResponse::Swap(RequestGetPowerStoneMyRankingResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPowerStoneMyRankingResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPowerStoneMyRankingResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPowerStoneRanking::kOffsetFieldNumber;
const int RequestGetPowerStoneRanking::kCountFieldNumber;
#endif  // !_MSC_VER

RequestGetPowerStoneRanking::RequestGetPowerStoneRanking()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
}

void RequestGetPowerStoneRanking::InitAsDefaultInstance() {
}

RequestGetPowerStoneRanking::RequestGetPowerStoneRanking(const RequestGetPowerStoneRanking& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
}

void RequestGetPowerStoneRanking::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPowerStoneRanking::~RequestGetPowerStoneRanking() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
  SharedDtor();
}

void RequestGetPowerStoneRanking::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPowerStoneRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPowerStoneRanking& RequestGetPowerStoneRanking::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPowerStoneRanking* RequestGetPowerStoneRanking::default_instance_ = NULL;

RequestGetPowerStoneRanking* RequestGetPowerStoneRanking::New() const {
  return new RequestGetPowerStoneRanking;
}

void RequestGetPowerStoneRanking::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetPowerStoneRanking*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPowerStoneRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
  return false;
#undef DO_
}

void RequestGetPowerStoneRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
  // required uint32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking)
}

int RequestGetPowerStoneRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPowerStoneRanking::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPowerStoneRanking*>(&from));
}

void RequestGetPowerStoneRanking::MergeFrom(const RequestGetPowerStoneRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPowerStoneRanking::CopyFrom(const RequestGetPowerStoneRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPowerStoneRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestGetPowerStoneRanking::Swap(RequestGetPowerStoneRanking* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPowerStoneRanking::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPowerStoneRanking";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPowerStoneRankingResponse::kDataFieldNumber;
#endif  // !_MSC_VER

RequestGetPowerStoneRankingResponse::RequestGetPowerStoneRankingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
}

void RequestGetPowerStoneRankingResponse::InitAsDefaultInstance() {
}

RequestGetPowerStoneRankingResponse::RequestGetPowerStoneRankingResponse(const RequestGetPowerStoneRankingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
}

void RequestGetPowerStoneRankingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPowerStoneRankingResponse::~RequestGetPowerStoneRankingResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
  SharedDtor();
}

void RequestGetPowerStoneRankingResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPowerStoneRankingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPowerStoneRankingResponse& RequestGetPowerStoneRankingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPowerStoneRankingResponse* RequestGetPowerStoneRankingResponse::default_instance_ = NULL;

RequestGetPowerStoneRankingResponse* RequestGetPowerStoneRankingResponse::New() const {
  return new RequestGetPowerStoneRankingResponse;
}

void RequestGetPowerStoneRankingResponse::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPowerStoneRankingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DS2_Frpg2RequestMessage.PowerStoneRankingData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
  return false;
#undef DO_
}

void RequestGetPowerStoneRankingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
  // repeated .DS2_Frpg2RequestMessage.PowerStoneRankingData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse)
}

int RequestGetPowerStoneRankingResponse::ByteSize() const {
  int total_size = 0;

  // repeated .DS2_Frpg2RequestMessage.PowerStoneRankingData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPowerStoneRankingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPowerStoneRankingResponse*>(&from));
}

void RequestGetPowerStoneRankingResponse::MergeFrom(const RequestGetPowerStoneRankingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPowerStoneRankingResponse::CopyFrom(const RequestGetPowerStoneRankingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPowerStoneRankingResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestGetPowerStoneRankingResponse::Swap(RequestGetPowerStoneRankingResponse* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPowerStoneRankingResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetPowerStoneRankingRecordCount::RequestGetPowerStoneRankingRecordCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
}

void RequestGetPowerStoneRankingRecordCount::InitAsDefaultInstance() {
}

RequestGetPowerStoneRankingRecordCount::RequestGetPowerStoneRankingRecordCount(const RequestGetPowerStoneRankingRecordCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
}

void RequestGetPowerStoneRankingRecordCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPowerStoneRankingRecordCount::~RequestGetPowerStoneRankingRecordCount() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
  SharedDtor();
}

void RequestGetPowerStoneRankingRecordCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPowerStoneRankingRecordCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPowerStoneRankingRecordCount& RequestGetPowerStoneRankingRecordCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPowerStoneRankingRecordCount* RequestGetPowerStoneRankingRecordCount::default_instance_ = NULL;

RequestGetPowerStoneRankingRecordCount* RequestGetPowerStoneRankingRecordCount::New() const {
  return new RequestGetPowerStoneRankingRecordCount;
}

void RequestGetPowerStoneRankingRecordCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPowerStoneRankingRecordCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
  return false;
#undef DO_
}

void RequestGetPowerStoneRankingRecordCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount)
}

int RequestGetPowerStoneRankingRecordCount::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPowerStoneRankingRecordCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPowerStoneRankingRecordCount*>(&from));
}

void RequestGetPowerStoneRankingRecordCount::MergeFrom(const RequestGetPowerStoneRankingRecordCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPowerStoneRankingRecordCount::CopyFrom(const RequestGetPowerStoneRankingRecordCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPowerStoneRankingRecordCount::IsInitialized() const {

  return true;
}

void RequestGetPowerStoneRankingRecordCount::Swap(RequestGetPowerStoneRankingRecordCount* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPowerStoneRankingRecordCount::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCount";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPowerStoneRankingRecordCountResponse::kCountFieldNumber;
#endif  // !_MSC_VER

RequestGetPowerStoneRankingRecordCountResponse::RequestGetPowerStoneRankingRecordCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
}

void RequestGetPowerStoneRankingRecordCountResponse::InitAsDefaultInstance() {
}

RequestGetPowerStoneRankingRecordCountResponse::RequestGetPowerStoneRankingRecordCountResponse(const RequestGetPowerStoneRankingRecordCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
}

void RequestGetPowerStoneRankingRecordCountResponse::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPowerStoneRankingRecordCountResponse::~RequestGetPowerStoneRankingRecordCountResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
  SharedDtor();
}

void RequestGetPowerStoneRankingRecordCountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPowerStoneRankingRecordCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPowerStoneRankingRecordCountResponse& RequestGetPowerStoneRankingRecordCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPowerStoneRankingRecordCountResponse* RequestGetPowerStoneRankingRecordCountResponse::default_instance_ = NULL;

RequestGetPowerStoneRankingRecordCountResponse* RequestGetPowerStoneRankingRecordCountResponse::New() const {
  return new RequestGetPowerStoneRankingRecordCountResponse;
}

void RequestGetPowerStoneRankingRecordCountResponse::Clear() {
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPowerStoneRankingRecordCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
  return false;
#undef DO_
}

void RequestGetPowerStoneRankingRecordCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse)
}

int RequestGetPowerStoneRankingRecordCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPowerStoneRankingRecordCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPowerStoneRankingRecordCountResponse*>(&from));
}

void RequestGetPowerStoneRankingRecordCountResponse::MergeFrom(const RequestGetPowerStoneRankingRecordCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPowerStoneRankingRecordCountResponse::CopyFrom(const RequestGetPowerStoneRankingRecordCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPowerStoneRankingRecordCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestGetPowerStoneRankingRecordCountResponse::Swap(RequestGetPowerStoneRankingRecordCountResponse* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPowerStoneRankingRecordCountResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPowerStoneRankingRecordCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRegisterPowerStoneData::kCharacterIdFieldNumber;
const int RequestRegisterPowerStoneData::kIncrementFieldNumber;
const int RequestRegisterPowerStoneData::kDataFieldNumber;
#endif  // !_MSC_VER

RequestRegisterPowerStoneData::RequestRegisterPowerStoneData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
}

void RequestRegisterPowerStoneData::InitAsDefaultInstance() {
}

RequestRegisterPowerStoneData::RequestRegisterPowerStoneData(const RequestRegisterPowerStoneData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
}

void RequestRegisterPowerStoneData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  character_id_ = 0u;
  increment_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegisterPowerStoneData::~RequestRegisterPowerStoneData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
  SharedDtor();
}

void RequestRegisterPowerStoneData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRegisterPowerStoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRegisterPowerStoneData& RequestRegisterPowerStoneData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRegisterPowerStoneData* RequestRegisterPowerStoneData::default_instance_ = NULL;

RequestRegisterPowerStoneData* RequestRegisterPowerStoneData::New() const {
  return new RequestRegisterPowerStoneData;
}

void RequestRegisterPowerStoneData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRegisterPowerStoneData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(character_id_, increment_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRegisterPowerStoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_increment;
        break;
      }

      // required uint32 increment = 2;
      case 2: {
        if (tag == 16) {
         parse_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &increment_)));
          set_has_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
  return false;
#undef DO_
}

void RequestRegisterPowerStoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  // required uint32 increment = 2;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->increment(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData)
}

int RequestRegisterPowerStoneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required uint32 increment = 2;
    if (has_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->increment());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegisterPowerStoneData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRegisterPowerStoneData*>(&from));
}

void RequestRegisterPowerStoneData::MergeFrom(const RequestRegisterPowerStoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_increment()) {
      set_increment(from.increment());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRegisterPowerStoneData::CopyFrom(const RequestRegisterPowerStoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegisterPowerStoneData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestRegisterPowerStoneData::Swap(RequestRegisterPowerStoneData* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(increment_, other->increment_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRegisterPowerStoneData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRegisterPowerStoneData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRegisterPowerStoneDataResponse::RequestRegisterPowerStoneDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
}

void RequestRegisterPowerStoneDataResponse::InitAsDefaultInstance() {
}

RequestRegisterPowerStoneDataResponse::RequestRegisterPowerStoneDataResponse(const RequestRegisterPowerStoneDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
}

void RequestRegisterPowerStoneDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegisterPowerStoneDataResponse::~RequestRegisterPowerStoneDataResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
  SharedDtor();
}

void RequestRegisterPowerStoneDataResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRegisterPowerStoneDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRegisterPowerStoneDataResponse& RequestRegisterPowerStoneDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRegisterPowerStoneDataResponse* RequestRegisterPowerStoneDataResponse::default_instance_ = NULL;

RequestRegisterPowerStoneDataResponse* RequestRegisterPowerStoneDataResponse::New() const {
  return new RequestRegisterPowerStoneDataResponse;
}

void RequestRegisterPowerStoneDataResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRegisterPowerStoneDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
  return false;
#undef DO_
}

void RequestRegisterPowerStoneDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse)
}

int RequestRegisterPowerStoneDataResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegisterPowerStoneDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRegisterPowerStoneDataResponse*>(&from));
}

void RequestRegisterPowerStoneDataResponse::MergeFrom(const RequestRegisterPowerStoneDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRegisterPowerStoneDataResponse::CopyFrom(const RequestRegisterPowerStoneDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegisterPowerStoneDataResponse::IsInitialized() const {

  return true;
}

void RequestRegisterPowerStoneDataResponse::Swap(RequestRegisterPowerStoneDataResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRegisterPowerStoneDataResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRegisterPowerStoneDataResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestAllowQuickMatch::kPushMessageIdFieldNumber;
const int PushRequestAllowQuickMatch::kPlayerIdFieldNumber;
const int PushRequestAllowQuickMatch::kOnlineAreaIdFieldNumber;
const int PushRequestAllowQuickMatch::kCellIdFieldNumber;
const int PushRequestAllowQuickMatch::kField5FieldNumber;
#endif  // !_MSC_VER

PushRequestAllowQuickMatch::PushRequestAllowQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
}

void PushRequestAllowQuickMatch::InitAsDefaultInstance() {
}

PushRequestAllowQuickMatch::PushRequestAllowQuickMatch(const PushRequestAllowQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
}

void PushRequestAllowQuickMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  field_5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestAllowQuickMatch::~PushRequestAllowQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
  SharedDtor();
}

void PushRequestAllowQuickMatch::SharedDtor() {
  if (field_5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestAllowQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestAllowQuickMatch& PushRequestAllowQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestAllowQuickMatch* PushRequestAllowQuickMatch::default_instance_ = NULL;

PushRequestAllowQuickMatch* PushRequestAllowQuickMatch::New() const {
  return new PushRequestAllowQuickMatch;
}

void PushRequestAllowQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestAllowQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, cell_id_);
    push_message_id_ = 925;
    if (has_field_5()) {
      if (field_5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field_5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestAllowQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 3;
      case 3: {
        if (tag == 24) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_field_5;
        break;
      }

      // required bytes field_5 = 5;
      case 5: {
        if (tag == 42) {
         parse_field_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
  return false;
#undef DO_
}

void PushRequestAllowQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 online_area_id = 3;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->online_area_id(), output);
  }

  // required int64 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cell_id(), output);
  }

  // required bytes field_5 = 5;
  if (has_field_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->field_5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch)
}

int PushRequestAllowQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 online_area_id = 3;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required bytes field_5 = 5;
    if (has_field_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_5());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestAllowQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestAllowQuickMatch*>(&from));
}

void PushRequestAllowQuickMatch::MergeFrom(const PushRequestAllowQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_field_5()) {
      set_field_5(from.field_5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestAllowQuickMatch::CopyFrom(const PushRequestAllowQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestAllowQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PushRequestAllowQuickMatch::Swap(PushRequestAllowQuickMatch* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(field_5_, other->field_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestAllowQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestAllowQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestJoinQuickMatch::kPushMessageIdFieldNumber;
const int PushRequestJoinQuickMatch::kPlayerIdFieldNumber;
const int PushRequestJoinQuickMatch::kPlayerSteamIdFieldNumber;
const int PushRequestJoinQuickMatch::kOnlineAreaIdFieldNumber;
const int PushRequestJoinQuickMatch::kCellIdFieldNumber;
const int PushRequestJoinQuickMatch::kModeFieldNumber;
#endif  // !_MSC_VER

PushRequestJoinQuickMatch::PushRequestJoinQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
}

void PushRequestJoinQuickMatch::InitAsDefaultInstance() {
}

PushRequestJoinQuickMatch::PushRequestJoinQuickMatch(const PushRequestJoinQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
}

void PushRequestJoinQuickMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestJoinQuickMatch::~PushRequestJoinQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
  SharedDtor();
}

void PushRequestJoinQuickMatch::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestJoinQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestJoinQuickMatch& PushRequestJoinQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestJoinQuickMatch* PushRequestJoinQuickMatch::default_instance_ = NULL;

PushRequestJoinQuickMatch* PushRequestJoinQuickMatch::New() const {
  return new PushRequestJoinQuickMatch;
}

void PushRequestJoinQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestJoinQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mode_, cell_id_);
    push_message_id_ = 925;
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestJoinQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 3;
      case 3: {
        if (tag == 26) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 4;
      case 4: {
        if (tag == 32) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 5;
      case 5: {
        if (tag == 40) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
      case 6: {
        if (tag == 48) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
  return false;
#undef DO_
}

void PushRequestJoinQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required string player_steam_id = 3;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->player_steam_id(), output);
  }

  // required int64 online_area_id = 4;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->online_area_id(), output);
  }

  // required int64 cell_id = 5;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch)
}

int PushRequestJoinQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required string player_steam_id = 3;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // required int64 online_area_id = 4;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 5;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestJoinQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestJoinQuickMatch*>(&from));
}

void PushRequestJoinQuickMatch::MergeFrom(const PushRequestJoinQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestJoinQuickMatch::CopyFrom(const PushRequestJoinQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestJoinQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PushRequestJoinQuickMatch::Swap(PushRequestJoinQuickMatch* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestJoinQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestJoinQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRejectQuickMatch::kPushMessageIdFieldNumber;
const int PushRequestRejectQuickMatch::kPlayerIdFieldNumber;
const int PushRequestRejectQuickMatch::kPlayerSteamIdFieldNumber;
const int PushRequestRejectQuickMatch::kOnlineAreaIdFieldNumber;
const int PushRequestRejectQuickMatch::kCellIdFieldNumber;
const int PushRequestRejectQuickMatch::kModeFieldNumber;
const int PushRequestRejectQuickMatch::kUnknown7FieldNumber;
#endif  // !_MSC_VER

PushRequestRejectQuickMatch::PushRequestRejectQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
}

void PushRequestRejectQuickMatch::InitAsDefaultInstance() {
}

PushRequestRejectQuickMatch::PushRequestRejectQuickMatch(const PushRequestRejectQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
}

void PushRequestRejectQuickMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  mode_ = 0;
  unknown_7_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRejectQuickMatch::~PushRequestRejectQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
  SharedDtor();
}

void PushRequestRejectQuickMatch::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRejectQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRejectQuickMatch& PushRequestRejectQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRejectQuickMatch* PushRequestRejectQuickMatch::default_instance_ = NULL;

PushRequestRejectQuickMatch* PushRequestRejectQuickMatch::New() const {
  return new PushRequestRejectQuickMatch;
}

void PushRequestRejectQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestRejectQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(mode_, unknown_7_);
    push_message_id_ = 925;
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRejectQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 3;
      case 3: {
        if (tag == 26) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 4;
      case 4: {
        if (tag == 32) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 5;
      case 5: {
        if (tag == 40) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
      case 6: {
        if (tag == 48) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unknown_7;
        break;
      }

      // required int64 unknown_7 = 7;
      case 7: {
        if (tag == 56) {
         parse_unknown_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_7_)));
          set_has_unknown_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
  return false;
#undef DO_
}

void PushRequestRejectQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required string player_steam_id = 3;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->player_steam_id(), output);
  }

  // required int64 online_area_id = 4;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->online_area_id(), output);
  }

  // required int64 cell_id = 5;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mode(), output);
  }

  // required int64 unknown_7 = 7;
  if (has_unknown_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->unknown_7(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch)
}

int PushRequestRejectQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required string player_steam_id = 3;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // required int64 online_area_id = 4;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 5;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required int64 unknown_7 = 7;
    if (has_unknown_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_7());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRejectQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRejectQuickMatch*>(&from));
}

void PushRequestRejectQuickMatch::MergeFrom(const PushRequestRejectQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_unknown_7()) {
      set_unknown_7(from.unknown_7());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRejectQuickMatch::CopyFrom(const PushRequestRejectQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRejectQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PushRequestRejectQuickMatch::Swap(PushRequestRejectQuickMatch* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(mode_, other->mode_);
    std::swap(unknown_7_, other->unknown_7_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRejectQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRejectQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
const int PushRequestRemoveQuickMatch::kPushMessageIdFieldNumber;
const int PushRequestRemoveQuickMatch::kPlayerIdFieldNumber;
const int PushRequestRemoveQuickMatch::kOnlineAreaIdFieldNumber;
const int PushRequestRemoveQuickMatch::kCellIdFieldNumber;
const int PushRequestRemoveQuickMatch::kPlayerSteamIdFieldNumber;
const int PushRequestRemoveQuickMatch::kModeFieldNumber;
#endif  // !_MSC_VER

PushRequestRemoveQuickMatch::PushRequestRemoveQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
}

void PushRequestRemoveQuickMatch::InitAsDefaultInstance() {
}

PushRequestRemoveQuickMatch::PushRequestRemoveQuickMatch(const PushRequestRemoveQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
}

void PushRequestRemoveQuickMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  player_id_ = GOOGLE_LONGLONG(0);
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestRemoveQuickMatch::~PushRequestRemoveQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
  SharedDtor();
}

void PushRequestRemoveQuickMatch::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestRemoveQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestRemoveQuickMatch& PushRequestRemoveQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestRemoveQuickMatch* PushRequestRemoveQuickMatch::default_instance_ = NULL;

PushRequestRemoveQuickMatch* PushRequestRemoveQuickMatch::New() const {
  return new PushRequestRemoveQuickMatch;
}

void PushRequestRemoveQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushRequestRemoveQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(player_id_, online_area_id_);
    ZR_(mode_, cell_id_);
    push_message_id_ = 925;
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestRemoveQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 3;
      case 3: {
        if (tag == 24) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 5;
      case 5: {
        if (tag == 42) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
      case 6: {
        if (tag == 48) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
  return false;
#undef DO_
}

void PushRequestRemoveQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required int64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_id(), output);
  }

  // required int64 online_area_id = 3;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->online_area_id(), output);
  }

  // required int64 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cell_id(), output);
  }

  // required string player_steam_id = 5;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player_steam_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch)
}

int PushRequestRemoveQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required int64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 online_area_id = 3;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required string player_steam_id = 5;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestRemoveQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestRemoveQuickMatch*>(&from));
}

void PushRequestRemoveQuickMatch::MergeFrom(const PushRequestRemoveQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestRemoveQuickMatch::CopyFrom(const PushRequestRemoveQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestRemoveQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PushRequestRemoveQuickMatch::Swap(PushRequestRemoveQuickMatch* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestRemoveQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestRemoveQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
const int QuickMatchData::kPlayerIdFieldNumber;
const int QuickMatchData::kOnlineAreaIdFieldNumber;
const int QuickMatchData::kCellIdFieldNumber;
const int QuickMatchData::kMatchingParameterFieldNumber;
const int QuickMatchData::kPlayerSteamIdFieldNumber;
const int QuickMatchData::kModeFieldNumber;
#endif  // !_MSC_VER

QuickMatchData::QuickMatchData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.QuickMatchData)
}

void QuickMatchData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

QuickMatchData::QuickMatchData(const QuickMatchData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.QuickMatchData)
}

void QuickMatchData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  matching_parameter_ = NULL;
  player_steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickMatchData::~QuickMatchData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.QuickMatchData)
  SharedDtor();
}

void QuickMatchData::SharedDtor() {
  if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void QuickMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuickMatchData& QuickMatchData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

QuickMatchData* QuickMatchData::default_instance_ = NULL;

QuickMatchData* QuickMatchData::New() const {
  return new QuickMatchData;
}

void QuickMatchData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuickMatchData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(player_id_, cell_id_);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
    if (has_player_steam_id()) {
      if (player_steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_steam_id_->clear();
      }
    }
    mode_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool QuickMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.QuickMatchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 2;
      case 2: {
        if (tag == 16) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_steam_id;
        break;
      }

      // required string player_steam_id = 5;
      case 5: {
        if (tag == 42) {
         parse_player_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // optional .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
      case 6: {
        if (tag == 48) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.QuickMatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.QuickMatchData)
  return false;
#undef DO_
}

void QuickMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.QuickMatchData)
  // required int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  // required int64 online_area_id = 2;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->online_area_id(), output);
  }

  // required int64 cell_id = 3;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->matching_parameter(), output);
  }

  // required string player_steam_id = 5;
  if (has_player_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player_steam_id(), output);
  }

  // optional .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.QuickMatchData)
}

int QuickMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 online_area_id = 2;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 3;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 4;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required string player_steam_id = 5;
    if (has_player_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_steam_id());
    }

    // optional .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 6;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickMatchData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuickMatchData*>(&from));
}

void QuickMatchData::MergeFrom(const QuickMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_player_steam_id()) {
      set_player_steam_id(from.player_steam_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QuickMatchData::CopyFrom(const QuickMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickMatchData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void QuickMatchData::Swap(QuickMatchData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(player_steam_id_, other->player_steam_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuickMatchData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.QuickMatchData";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestJoinQuickMatch::kOnlineAreaIdFieldNumber;
const int RequestJoinQuickMatch::kCellIdFieldNumber;
const int RequestJoinQuickMatch::kPlayerIdFieldNumber;
const int RequestJoinQuickMatch::kModeFieldNumber;
#endif  // !_MSC_VER

RequestJoinQuickMatch::RequestJoinQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
}

void RequestJoinQuickMatch::InitAsDefaultInstance() {
}

RequestJoinQuickMatch::RequestJoinQuickMatch(const RequestJoinQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
}

void RequestJoinQuickMatch::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  player_id_ = GOOGLE_LONGLONG(0);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestJoinQuickMatch::~RequestJoinQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
  SharedDtor();
}

void RequestJoinQuickMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestJoinQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestJoinQuickMatch& RequestJoinQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestJoinQuickMatch* RequestJoinQuickMatch::default_instance_ = NULL;

RequestJoinQuickMatch* RequestJoinQuickMatch::New() const {
  return new RequestJoinQuickMatch;
}

void RequestJoinQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestJoinQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestJoinQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // required int64 player_id = 3;
      case 3: {
        if (tag == 24) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
      case 4: {
        if (tag == 32) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
  return false;
#undef DO_
}

void RequestJoinQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // required int64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestJoinQuickMatch)
}

int RequestJoinQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required int64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestJoinQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestJoinQuickMatch*>(&from));
}

void RequestJoinQuickMatch::MergeFrom(const RequestJoinQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestJoinQuickMatch::CopyFrom(const RequestJoinQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestJoinQuickMatch::Swap(RequestJoinQuickMatch* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestJoinQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestJoinQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestJoinQuickMatchResponse::RequestJoinQuickMatchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
}

void RequestJoinQuickMatchResponse::InitAsDefaultInstance() {
}

RequestJoinQuickMatchResponse::RequestJoinQuickMatchResponse(const RequestJoinQuickMatchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
}

void RequestJoinQuickMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestJoinQuickMatchResponse::~RequestJoinQuickMatchResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
  SharedDtor();
}

void RequestJoinQuickMatchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestJoinQuickMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestJoinQuickMatchResponse& RequestJoinQuickMatchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestJoinQuickMatchResponse* RequestJoinQuickMatchResponse::default_instance_ = NULL;

RequestJoinQuickMatchResponse* RequestJoinQuickMatchResponse::New() const {
  return new RequestJoinQuickMatchResponse;
}

void RequestJoinQuickMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestJoinQuickMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
  return false;
#undef DO_
}

void RequestJoinQuickMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse)
}

int RequestJoinQuickMatchResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestJoinQuickMatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestJoinQuickMatchResponse*>(&from));
}

void RequestJoinQuickMatchResponse::MergeFrom(const RequestJoinQuickMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestJoinQuickMatchResponse::CopyFrom(const RequestJoinQuickMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinQuickMatchResponse::IsInitialized() const {

  return true;
}

void RequestJoinQuickMatchResponse::Swap(RequestJoinQuickMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestJoinQuickMatchResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestJoinQuickMatchResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRegisterQuickMatch::kOnlineAreaIdFieldNumber;
const int RequestRegisterQuickMatch::kCellIdFieldNumber;
const int RequestRegisterQuickMatch::kMatchingParameterFieldNumber;
const int RequestRegisterQuickMatch::kModeFieldNumber;
#endif  // !_MSC_VER

RequestRegisterQuickMatch::RequestRegisterQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
}

void RequestRegisterQuickMatch::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestRegisterQuickMatch::RequestRegisterQuickMatch(const RequestRegisterQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
}

void RequestRegisterQuickMatch::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  matching_parameter_ = NULL;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegisterQuickMatch::~RequestRegisterQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
  SharedDtor();
}

void RequestRegisterQuickMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestRegisterQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRegisterQuickMatch& RequestRegisterQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRegisterQuickMatch* RequestRegisterQuickMatch::default_instance_ = NULL;

RequestRegisterQuickMatch* RequestRegisterQuickMatch::New() const {
  return new RequestRegisterQuickMatch;
}

void RequestRegisterQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRegisterQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(online_area_id_, cell_id_);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
    mode_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRegisterQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
      case 3: {
        if (tag == 26) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
      case 4: {
        if (tag == 32) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
  return false;
#undef DO_
}

void RequestRegisterQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->matching_parameter(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRegisterQuickMatch)
}

int RequestRegisterQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegisterQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRegisterQuickMatch*>(&from));
}

void RequestRegisterQuickMatch::MergeFrom(const RequestRegisterQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRegisterQuickMatch::CopyFrom(const RequestRegisterQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegisterQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestRegisterQuickMatch::Swap(RequestRegisterQuickMatch* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRegisterQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRegisterQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRegisterQuickMatchResponse::RequestRegisterQuickMatchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
}

void RequestRegisterQuickMatchResponse::InitAsDefaultInstance() {
}

RequestRegisterQuickMatchResponse::RequestRegisterQuickMatchResponse(const RequestRegisterQuickMatchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
}

void RequestRegisterQuickMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegisterQuickMatchResponse::~RequestRegisterQuickMatchResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
  SharedDtor();
}

void RequestRegisterQuickMatchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRegisterQuickMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRegisterQuickMatchResponse& RequestRegisterQuickMatchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRegisterQuickMatchResponse* RequestRegisterQuickMatchResponse::default_instance_ = NULL;

RequestRegisterQuickMatchResponse* RequestRegisterQuickMatchResponse::New() const {
  return new RequestRegisterQuickMatchResponse;
}

void RequestRegisterQuickMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRegisterQuickMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
  return false;
#undef DO_
}

void RequestRegisterQuickMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse)
}

int RequestRegisterQuickMatchResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegisterQuickMatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRegisterQuickMatchResponse*>(&from));
}

void RequestRegisterQuickMatchResponse::MergeFrom(const RequestRegisterQuickMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRegisterQuickMatchResponse::CopyFrom(const RequestRegisterQuickMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegisterQuickMatchResponse::IsInitialized() const {

  return true;
}

void RequestRegisterQuickMatchResponse::Swap(RequestRegisterQuickMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRegisterQuickMatchResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRegisterQuickMatchResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRejectQuickMatch::kPlayerIdFieldNumber;
const int RequestRejectQuickMatch::kOnlineAreaIdFieldNumber;
const int RequestRejectQuickMatch::kCellIdFieldNumber;
const int RequestRejectQuickMatch::kModeFieldNumber;
const int RequestRejectQuickMatch::kUnknown5FieldNumber;
#endif  // !_MSC_VER

RequestRejectQuickMatch::RequestRejectQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
}

void RequestRejectQuickMatch::InitAsDefaultInstance() {
}

RequestRejectQuickMatch::RequestRejectQuickMatch(const RequestRejectQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
}

void RequestRejectQuickMatch::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  mode_ = 0;
  unknown_5_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectQuickMatch::~RequestRejectQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
  SharedDtor();
}

void RequestRejectQuickMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectQuickMatch& RequestRejectQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectQuickMatch* RequestRejectQuickMatch::default_instance_ = NULL;

RequestRejectQuickMatch* RequestRejectQuickMatch::New() const {
  return new RequestRejectQuickMatch;
}

void RequestRejectQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRejectQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, mode_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online_area_id;
        break;
      }

      // required int64 online_area_id = 2;
      case 2: {
        if (tag == 16) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
      case 4: {
        if (tag == 32) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // required int64 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
  return false;
#undef DO_
}

void RequestRejectQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
  // required int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  // required int64 online_area_id = 2;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->online_area_id(), output);
  }

  // required int64 cell_id = 3;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // required int64 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->unknown_5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectQuickMatch)
}

int RequestRejectQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // required int64 online_area_id = 2;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 3;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required int64 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_5());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectQuickMatch*>(&from));
}

void RequestRejectQuickMatch::MergeFrom(const RequestRejectQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectQuickMatch::CopyFrom(const RequestRejectQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestRejectQuickMatch::Swap(RequestRejectQuickMatch* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(mode_, other->mode_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRejectQuickMatchResponse::RequestRejectQuickMatchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
}

void RequestRejectQuickMatchResponse::InitAsDefaultInstance() {
}

RequestRejectQuickMatchResponse::RequestRejectQuickMatchResponse(const RequestRejectQuickMatchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
}

void RequestRejectQuickMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRejectQuickMatchResponse::~RequestRejectQuickMatchResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
  SharedDtor();
}

void RequestRejectQuickMatchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRejectQuickMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRejectQuickMatchResponse& RequestRejectQuickMatchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestRejectQuickMatchResponse* RequestRejectQuickMatchResponse::default_instance_ = NULL;

RequestRejectQuickMatchResponse* RequestRejectQuickMatchResponse::New() const {
  return new RequestRejectQuickMatchResponse;
}

void RequestRejectQuickMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestRejectQuickMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
  return false;
#undef DO_
}

void RequestRejectQuickMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse)
}

int RequestRejectQuickMatchResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRejectQuickMatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRejectQuickMatchResponse*>(&from));
}

void RequestRejectQuickMatchResponse::MergeFrom(const RequestRejectQuickMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestRejectQuickMatchResponse::CopyFrom(const RequestRejectQuickMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejectQuickMatchResponse::IsInitialized() const {

  return true;
}

void RequestRejectQuickMatchResponse::Swap(RequestRejectQuickMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRejectQuickMatchResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestRejectQuickMatchResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSearchQuickMatch::kOnlineAreaIdFieldNumber;
const int RequestSearchQuickMatch::kCellIdFieldNumber;
const int RequestSearchQuickMatch::kMatchingParameterFieldNumber;
const int RequestSearchQuickMatch::kMaxResultsFieldNumber;
const int RequestSearchQuickMatch::kModeFieldNumber;
#endif  // !_MSC_VER

RequestSearchQuickMatch::RequestSearchQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
}

void RequestSearchQuickMatch::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(
      ::DS2_Frpg2RequestMessage::MatchingParameter::internal_default_instance());
#else
  matching_parameter_ = const_cast< ::DS2_Frpg2RequestMessage::MatchingParameter*>(&::DS2_Frpg2RequestMessage::MatchingParameter::default_instance());
#endif
}

RequestSearchQuickMatch::RequestSearchQuickMatch(const RequestSearchQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
}

void RequestSearchQuickMatch::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  matching_parameter_ = NULL;
  max_results_ = GOOGLE_LONGLONG(0);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSearchQuickMatch::~RequestSearchQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
  SharedDtor();
}

void RequestSearchQuickMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matching_parameter_;
  }
}

void RequestSearchQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSearchQuickMatch& RequestSearchQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSearchQuickMatch* RequestSearchQuickMatch::default_instance_ = NULL;

RequestSearchQuickMatch* RequestSearchQuickMatch::New() const {
  return new RequestSearchQuickMatch;
}

void RequestSearchQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestSearchQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(online_area_id_, cell_id_);
    ZR_(max_results_, mode_);
    if (has_matching_parameter()) {
      if (matching_parameter_ != NULL) matching_parameter_->::DS2_Frpg2RequestMessage::MatchingParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSearchQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_matching_parameter;
        break;
      }

      // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
      case 3: {
        if (tag == 26) {
         parse_matching_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_results;
        break;
      }

      // required int64 max_results = 4;
      case 4: {
        if (tag == 32) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_results_)));
          set_has_max_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 5;
      case 5: {
        if (tag == 40) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
  return false;
#undef DO_
}

void RequestSearchQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
  if (has_matching_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->matching_parameter(), output);
  }

  // required int64 max_results = 4;
  if (has_max_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_results(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 5;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSearchQuickMatch)
}

int RequestSearchQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.MatchingParameter matching_parameter = 3;
    if (has_matching_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_parameter());
    }

    // required int64 max_results = 4;
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_results());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSearchQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSearchQuickMatch*>(&from));
}

void RequestSearchQuickMatch::MergeFrom(const RequestSearchQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_matching_parameter()) {
      mutable_matching_parameter()->::DS2_Frpg2RequestMessage::MatchingParameter::MergeFrom(from.matching_parameter());
    }
    if (from.has_max_results()) {
      set_max_results(from.max_results());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSearchQuickMatch::CopyFrom(const RequestSearchQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSearchQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_matching_parameter()) {
    if (!this->matching_parameter().IsInitialized()) return false;
  }
  return true;
}

void RequestSearchQuickMatch::Swap(RequestSearchQuickMatch* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(matching_parameter_, other->matching_parameter_);
    std::swap(max_results_, other->max_results_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSearchQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSearchQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSearchQuickMatchResponse::kMatchesFieldNumber;
#endif  // !_MSC_VER

RequestSearchQuickMatchResponse::RequestSearchQuickMatchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
}

void RequestSearchQuickMatchResponse::InitAsDefaultInstance() {
}

RequestSearchQuickMatchResponse::RequestSearchQuickMatchResponse(const RequestSearchQuickMatchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
}

void RequestSearchQuickMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSearchQuickMatchResponse::~RequestSearchQuickMatchResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
  SharedDtor();
}

void RequestSearchQuickMatchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSearchQuickMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSearchQuickMatchResponse& RequestSearchQuickMatchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSearchQuickMatchResponse* RequestSearchQuickMatchResponse::default_instance_ = NULL;

RequestSearchQuickMatchResponse* RequestSearchQuickMatchResponse::New() const {
  return new RequestSearchQuickMatchResponse;
}

void RequestSearchQuickMatchResponse::Clear() {
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSearchQuickMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DS2_Frpg2RequestMessage.QuickMatchData matches = 1;
      case 1: {
        if (tag == 10) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_matches;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
  return false;
#undef DO_
}

void RequestSearchQuickMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
  // repeated .DS2_Frpg2RequestMessage.QuickMatchData matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->matches(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse)
}

int RequestSearchQuickMatchResponse::ByteSize() const {
  int total_size = 0;

  // repeated .DS2_Frpg2RequestMessage.QuickMatchData matches = 1;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSearchQuickMatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSearchQuickMatchResponse*>(&from));
}

void RequestSearchQuickMatchResponse::MergeFrom(const RequestSearchQuickMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSearchQuickMatchResponse::CopyFrom(const RequestSearchQuickMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSearchQuickMatchResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->matches())) return false;
  return true;
}

void RequestSearchQuickMatchResponse::Swap(RequestSearchQuickMatchResponse* other) {
  if (other != this) {
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSearchQuickMatchResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSearchQuickMatchResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUnregisterQuickMatch::kOnlineAreaIdFieldNumber;
const int RequestUnregisterQuickMatch::kCellIdFieldNumber;
const int RequestUnregisterQuickMatch::kModeFieldNumber;
#endif  // !_MSC_VER

RequestUnregisterQuickMatch::RequestUnregisterQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
}

void RequestUnregisterQuickMatch::InitAsDefaultInstance() {
}

RequestUnregisterQuickMatch::RequestUnregisterQuickMatch(const RequestUnregisterQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
}

void RequestUnregisterQuickMatch::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUnregisterQuickMatch::~RequestUnregisterQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
  SharedDtor();
}

void RequestUnregisterQuickMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUnregisterQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUnregisterQuickMatch& RequestUnregisterQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUnregisterQuickMatch* RequestUnregisterQuickMatch::default_instance_ = NULL;

RequestUnregisterQuickMatch* RequestUnregisterQuickMatch::New() const {
  return new RequestUnregisterQuickMatch;
}

void RequestUnregisterQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUnregisterQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUnregisterQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
  return false;
#undef DO_
}

void RequestUnregisterQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch)
}

int RequestUnregisterQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUnregisterQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUnregisterQuickMatch*>(&from));
}

void RequestUnregisterQuickMatch::MergeFrom(const RequestUnregisterQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUnregisterQuickMatch::CopyFrom(const RequestUnregisterQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUnregisterQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestUnregisterQuickMatch::Swap(RequestUnregisterQuickMatch* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUnregisterQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUnregisterQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestUnregisterQuickMatchResponse::RequestUnregisterQuickMatchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
}

void RequestUnregisterQuickMatchResponse::InitAsDefaultInstance() {
}

RequestUnregisterQuickMatchResponse::RequestUnregisterQuickMatchResponse(const RequestUnregisterQuickMatchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
}

void RequestUnregisterQuickMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUnregisterQuickMatchResponse::~RequestUnregisterQuickMatchResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
  SharedDtor();
}

void RequestUnregisterQuickMatchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUnregisterQuickMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUnregisterQuickMatchResponse& RequestUnregisterQuickMatchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUnregisterQuickMatchResponse* RequestUnregisterQuickMatchResponse::default_instance_ = NULL;

RequestUnregisterQuickMatchResponse* RequestUnregisterQuickMatchResponse::New() const {
  return new RequestUnregisterQuickMatchResponse;
}

void RequestUnregisterQuickMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUnregisterQuickMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
  return false;
#undef DO_
}

void RequestUnregisterQuickMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse)
}

int RequestUnregisterQuickMatchResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUnregisterQuickMatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUnregisterQuickMatchResponse*>(&from));
}

void RequestUnregisterQuickMatchResponse::MergeFrom(const RequestUnregisterQuickMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUnregisterQuickMatchResponse::CopyFrom(const RequestUnregisterQuickMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUnregisterQuickMatchResponse::IsInitialized() const {

  return true;
}

void RequestUnregisterQuickMatchResponse::Swap(RequestUnregisterQuickMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUnregisterQuickMatchResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUnregisterQuickMatchResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateQuickMatch::kOnlineAreaIdFieldNumber;
const int RequestUpdateQuickMatch::kCellIdFieldNumber;
const int RequestUpdateQuickMatch::kModeFieldNumber;
#endif  // !_MSC_VER

RequestUpdateQuickMatch::RequestUpdateQuickMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
}

void RequestUpdateQuickMatch::InitAsDefaultInstance() {
}

RequestUpdateQuickMatch::RequestUpdateQuickMatch(const RequestUpdateQuickMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
}

void RequestUpdateQuickMatch::SharedCtor() {
  _cached_size_ = 0;
  online_area_id_ = GOOGLE_LONGLONG(0);
  cell_id_ = GOOGLE_LONGLONG(0);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateQuickMatch::~RequestUpdateQuickMatch() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
  SharedDtor();
}

void RequestUpdateQuickMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateQuickMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateQuickMatch& RequestUpdateQuickMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateQuickMatch* RequestUpdateQuickMatch::default_instance_ = NULL;

RequestUpdateQuickMatch* RequestUpdateQuickMatch::New() const {
  return new RequestUpdateQuickMatch;
}

void RequestUpdateQuickMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUpdateQuickMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_area_id_, mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateQuickMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 online_area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_id;
        break;
      }

      // required int64 cell_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::QuickMatchGameMode_IsValid(value)) {
            set_mode(static_cast< ::DS2_Frpg2RequestMessage::QuickMatchGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
  return false;
#undef DO_
}

void RequestUpdateQuickMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
  // required int64 online_area_id = 1;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->online_area_id(), output);
  }

  // required int64 cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_id(), output);
  }

  // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateQuickMatch)
}

int RequestUpdateQuickMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 online_area_id = 1;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online_area_id());
    }

    // required int64 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_id());
    }

    // required .DS2_Frpg2RequestMessage.QuickMatchGameMode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateQuickMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateQuickMatch*>(&from));
}

void RequestUpdateQuickMatch::MergeFrom(const RequestUpdateQuickMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateQuickMatch::CopyFrom(const RequestUpdateQuickMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateQuickMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestUpdateQuickMatch::Swap(RequestUpdateQuickMatch* other) {
  if (other != this) {
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateQuickMatch::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateQuickMatch";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestUpdateQuickMatchResponse::RequestUpdateQuickMatchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
}

void RequestUpdateQuickMatchResponse::InitAsDefaultInstance() {
}

RequestUpdateQuickMatchResponse::RequestUpdateQuickMatchResponse(const RequestUpdateQuickMatchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
}

void RequestUpdateQuickMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateQuickMatchResponse::~RequestUpdateQuickMatchResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
  SharedDtor();
}

void RequestUpdateQuickMatchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateQuickMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateQuickMatchResponse& RequestUpdateQuickMatchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateQuickMatchResponse* RequestUpdateQuickMatchResponse::default_instance_ = NULL;

RequestUpdateQuickMatchResponse* RequestUpdateQuickMatchResponse::New() const {
  return new RequestUpdateQuickMatchResponse;
}

void RequestUpdateQuickMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestUpdateQuickMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
  return false;
#undef DO_
}

void RequestUpdateQuickMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse)
}

int RequestUpdateQuickMatchResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateQuickMatchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateQuickMatchResponse*>(&from));
}

void RequestUpdateQuickMatchResponse::MergeFrom(const RequestUpdateQuickMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestUpdateQuickMatchResponse::CopyFrom(const RequestUpdateQuickMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateQuickMatchResponse::IsInitialized() const {

  return true;
}

void RequestUpdateQuickMatchResponse::Swap(RequestUpdateQuickMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateQuickMatchResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestUpdateQuickMatchResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetTotalDeathCount::RequestGetTotalDeathCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
}

void RequestGetTotalDeathCount::InitAsDefaultInstance() {
}

RequestGetTotalDeathCount::RequestGetTotalDeathCount(const RequestGetTotalDeathCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
}

void RequestGetTotalDeathCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetTotalDeathCount::~RequestGetTotalDeathCount() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
  SharedDtor();
}

void RequestGetTotalDeathCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetTotalDeathCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetTotalDeathCount& RequestGetTotalDeathCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetTotalDeathCount* RequestGetTotalDeathCount::default_instance_ = NULL;

RequestGetTotalDeathCount* RequestGetTotalDeathCount::New() const {
  return new RequestGetTotalDeathCount;
}

void RequestGetTotalDeathCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetTotalDeathCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
  return false;
#undef DO_
}

void RequestGetTotalDeathCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetTotalDeathCount)
}

int RequestGetTotalDeathCount::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetTotalDeathCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetTotalDeathCount*>(&from));
}

void RequestGetTotalDeathCount::MergeFrom(const RequestGetTotalDeathCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetTotalDeathCount::CopyFrom(const RequestGetTotalDeathCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetTotalDeathCount::IsInitialized() const {

  return true;
}

void RequestGetTotalDeathCount::Swap(RequestGetTotalDeathCount* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetTotalDeathCount::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetTotalDeathCount";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetTotalDeathCountResponse::kTotalDeathCountFieldNumber;
#endif  // !_MSC_VER

RequestGetTotalDeathCountResponse::RequestGetTotalDeathCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
}

void RequestGetTotalDeathCountResponse::InitAsDefaultInstance() {
}

RequestGetTotalDeathCountResponse::RequestGetTotalDeathCountResponse(const RequestGetTotalDeathCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
}

void RequestGetTotalDeathCountResponse::SharedCtor() {
  _cached_size_ = 0;
  total_death_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetTotalDeathCountResponse::~RequestGetTotalDeathCountResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
  SharedDtor();
}

void RequestGetTotalDeathCountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetTotalDeathCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetTotalDeathCountResponse& RequestGetTotalDeathCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetTotalDeathCountResponse* RequestGetTotalDeathCountResponse::default_instance_ = NULL;

RequestGetTotalDeathCountResponse* RequestGetTotalDeathCountResponse::New() const {
  return new RequestGetTotalDeathCountResponse;
}

void RequestGetTotalDeathCountResponse::Clear() {
  total_death_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetTotalDeathCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_death_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_death_count_)));
          set_has_total_death_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
  return false;
#undef DO_
}

void RequestGetTotalDeathCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
  // required uint32 total_death_count = 1;
  if (has_total_death_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_death_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse)
}

int RequestGetTotalDeathCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 total_death_count = 1;
    if (has_total_death_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_death_count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetTotalDeathCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetTotalDeathCountResponse*>(&from));
}

void RequestGetTotalDeathCountResponse::MergeFrom(const RequestGetTotalDeathCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_death_count()) {
      set_total_death_count(from.total_death_count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetTotalDeathCountResponse::CopyFrom(const RequestGetTotalDeathCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetTotalDeathCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestGetTotalDeathCountResponse::Swap(RequestGetTotalDeathCountResponse* other) {
  if (other != this) {
    std::swap(total_death_count_, other->total_death_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetTotalDeathCountResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetTotalDeathCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PushRequestHeader::PushRequestHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushRequestHeader)
}

void PushRequestHeader::InitAsDefaultInstance() {
}

PushRequestHeader::PushRequestHeader(const PushRequestHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushRequestHeader)
}

void PushRequestHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequestHeader::~PushRequestHeader() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushRequestHeader)
  SharedDtor();
}

void PushRequestHeader::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushRequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushRequestHeader& PushRequestHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushRequestHeader* PushRequestHeader::default_instance_ = NULL;

PushRequestHeader* PushRequestHeader::New() const {
  return new PushRequestHeader;
}

void PushRequestHeader::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushRequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushRequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushRequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushRequestHeader)
  return false;
#undef DO_
}

void PushRequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushRequestHeader)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushRequestHeader)
}

int PushRequestHeader::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequestHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushRequestHeader*>(&from));
}

void PushRequestHeader::MergeFrom(const PushRequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushRequestHeader::CopyFrom(const PushRequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequestHeader::IsInitialized() const {

  return true;
}

void PushRequestHeader::Swap(PushRequestHeader* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushRequestHeader::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushRequestHeader";
}


// ===================================================================

#ifndef _MSC_VER
const int ManagementTextMessage::kPushMessageIdFieldNumber;
const int ManagementTextMessage::kMessageFieldNumber;
const int ManagementTextMessage::kTimestampFieldNumber;
const int ManagementTextMessage::kUnknown4FieldNumber;
const int ManagementTextMessage::kUnknown5FieldNumber;
#endif  // !_MSC_VER

ManagementTextMessage::ManagementTextMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.ManagementTextMessage)
}

void ManagementTextMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  timestamp_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(
      ::DS2_Frpg2PlayerData::DateTime::internal_default_instance());
#else
  timestamp_ = const_cast< ::DS2_Frpg2PlayerData::DateTime*>(&::DS2_Frpg2PlayerData::DateTime::default_instance());
#endif
}

ManagementTextMessage::ManagementTextMessage(const ManagementTextMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.ManagementTextMessage)
}

void ManagementTextMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  push_message_id_ = 925;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  unknown_4_ = 0u;
  unknown_5_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagementTextMessage::~ManagementTextMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.ManagementTextMessage)
  SharedDtor();
}

void ManagementTextMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete timestamp_;
  }
}

void ManagementTextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ManagementTextMessage& ManagementTextMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

ManagementTextMessage* ManagementTextMessage::default_instance_ = NULL;

ManagementTextMessage* ManagementTextMessage::New() const {
  return new ManagementTextMessage;
}

void ManagementTextMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    push_message_id_ = 925;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::DS2_Frpg2PlayerData::DateTime::Clear();
    }
    unknown_4_ = 0u;
    unknown_5_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ManagementTextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.ManagementTextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS2_Frpg2RequestMessage::PushMessageId_IsValid(value)) {
            set_push_message_id(static_cast< ::DS2_Frpg2RequestMessage::PushMessageId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required .DS2_Frpg2PlayerData.DateTime timestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // required uint32 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // required uint32 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.ManagementTextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.ManagementTextMessage)
  return false;
#undef DO_
}

void ManagementTextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.ManagementTextMessage)
  // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
  if (has_push_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->push_message_id(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // required .DS2_Frpg2PlayerData.DateTime timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->timestamp(), output);
  }

  // required uint32 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unknown_4(), output);
  }

  // required uint32 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unknown_5(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.ManagementTextMessage)
}

int ManagementTextMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DS2_Frpg2RequestMessage.PushMessageId push_message_id = 1;
    if (has_push_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_message_id());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required .DS2_Frpg2PlayerData.DateTime timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // required uint32 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

    // required uint32 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_5());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagementTextMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ManagementTextMessage*>(&from));
}

void ManagementTextMessage::MergeFrom(const ManagementTextMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_message_id()) {
      set_push_message_id(from.push_message_id());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::DS2_Frpg2PlayerData::DateTime::MergeFrom(from.timestamp());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ManagementTextMessage::CopyFrom(const ManagementTextMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagementTextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  return true;
}

void ManagementTextMessage::Swap(ManagementTextMessage* other) {
  if (other != this) {
    std::swap(push_message_id_, other->push_message_id_);
    std::swap(message_, other->message_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ManagementTextMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.ManagementTextMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NRLoggingMessage::NRLoggingMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.NRLoggingMessage)
}

void NRLoggingMessage::InitAsDefaultInstance() {
}

NRLoggingMessage::NRLoggingMessage(const NRLoggingMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.NRLoggingMessage)
}

void NRLoggingMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NRLoggingMessage::~NRLoggingMessage() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.NRLoggingMessage)
  SharedDtor();
}

void NRLoggingMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NRLoggingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NRLoggingMessage& NRLoggingMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

NRLoggingMessage* NRLoggingMessage::default_instance_ = NULL;

NRLoggingMessage* NRLoggingMessage::New() const {
  return new NRLoggingMessage;
}

void NRLoggingMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NRLoggingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.NRLoggingMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.NRLoggingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.NRLoggingMessage)
  return false;
#undef DO_
}

void NRLoggingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.NRLoggingMessage)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.NRLoggingMessage)
}

int NRLoggingMessage::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NRLoggingMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NRLoggingMessage*>(&from));
}

void NRLoggingMessage::MergeFrom(const NRLoggingMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NRLoggingMessage::CopyFrom(const NRLoggingMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NRLoggingMessage::IsInitialized() const {

  return true;
}

void NRLoggingMessage::Swap(NRLoggingMessage* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NRLoggingMessage::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.NRLoggingMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NRLogUploadRequest::NRLogUploadRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.NRLogUploadRequest)
}

void NRLogUploadRequest::InitAsDefaultInstance() {
}

NRLogUploadRequest::NRLogUploadRequest(const NRLogUploadRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.NRLogUploadRequest)
}

void NRLogUploadRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NRLogUploadRequest::~NRLogUploadRequest() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.NRLogUploadRequest)
  SharedDtor();
}

void NRLogUploadRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NRLogUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NRLogUploadRequest& NRLogUploadRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

NRLogUploadRequest* NRLogUploadRequest::default_instance_ = NULL;

NRLogUploadRequest* NRLogUploadRequest::New() const {
  return new NRLogUploadRequest;
}

void NRLogUploadRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NRLogUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.NRLogUploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.NRLogUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.NRLogUploadRequest)
  return false;
#undef DO_
}

void NRLogUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.NRLogUploadRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.NRLogUploadRequest)
}

int NRLogUploadRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NRLogUploadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NRLogUploadRequest*>(&from));
}

void NRLogUploadRequest::MergeFrom(const NRLogUploadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NRLogUploadRequest::CopyFrom(const NRLogUploadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NRLogUploadRequest::IsInitialized() const {

  return true;
}

void NRLogUploadRequest::Swap(NRLogUploadRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NRLogUploadRequest::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.NRLogUploadRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerPing::ServerPing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.ServerPing)
}

void ServerPing::InitAsDefaultInstance() {
}

ServerPing::ServerPing(const ServerPing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.ServerPing)
}

void ServerPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPing::~ServerPing() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.ServerPing)
  SharedDtor();
}

void ServerPing::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerPing& ServerPing::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

ServerPing* ServerPing::default_instance_ = NULL;

ServerPing* ServerPing::New() const {
  return new ServerPing;
}

void ServerPing::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.ServerPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.ServerPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.ServerPing)
  return false;
#undef DO_
}

void ServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.ServerPing)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.ServerPing)
}

int ServerPing::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerPing*>(&from));
}

void ServerPing::MergeFrom(const ServerPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerPing::CopyFrom(const ServerPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPing::IsInitialized() const {

  return true;
}

void ServerPing::Swap(ServerPing* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerPing::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.ServerPing";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestBenchmarkThroughput::RequestBenchmarkThroughput()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
}

void RequestBenchmarkThroughput::InitAsDefaultInstance() {
}

RequestBenchmarkThroughput::RequestBenchmarkThroughput(const RequestBenchmarkThroughput& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
}

void RequestBenchmarkThroughput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBenchmarkThroughput::~RequestBenchmarkThroughput() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
  SharedDtor();
}

void RequestBenchmarkThroughput::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestBenchmarkThroughput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestBenchmarkThroughput& RequestBenchmarkThroughput::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestBenchmarkThroughput* RequestBenchmarkThroughput::default_instance_ = NULL;

RequestBenchmarkThroughput* RequestBenchmarkThroughput::New() const {
  return new RequestBenchmarkThroughput;
}

void RequestBenchmarkThroughput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestBenchmarkThroughput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
  return false;
#undef DO_
}

void RequestBenchmarkThroughput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestBenchmarkThroughput)
}

int RequestBenchmarkThroughput::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBenchmarkThroughput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestBenchmarkThroughput*>(&from));
}

void RequestBenchmarkThroughput::MergeFrom(const RequestBenchmarkThroughput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestBenchmarkThroughput::CopyFrom(const RequestBenchmarkThroughput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBenchmarkThroughput::IsInitialized() const {

  return true;
}

void RequestBenchmarkThroughput::Swap(RequestBenchmarkThroughput* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestBenchmarkThroughput::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestBenchmarkThroughput";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestBenchmarkThroughputResponse::RequestBenchmarkThroughputResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
}

void RequestBenchmarkThroughputResponse::InitAsDefaultInstance() {
}

RequestBenchmarkThroughputResponse::RequestBenchmarkThroughputResponse(const RequestBenchmarkThroughputResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
}

void RequestBenchmarkThroughputResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBenchmarkThroughputResponse::~RequestBenchmarkThroughputResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
  SharedDtor();
}

void RequestBenchmarkThroughputResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestBenchmarkThroughputResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestBenchmarkThroughputResponse& RequestBenchmarkThroughputResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestBenchmarkThroughputResponse* RequestBenchmarkThroughputResponse::default_instance_ = NULL;

RequestBenchmarkThroughputResponse* RequestBenchmarkThroughputResponse::New() const {
  return new RequestBenchmarkThroughputResponse;
}

void RequestBenchmarkThroughputResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestBenchmarkThroughputResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
  return false;
#undef DO_
}

void RequestBenchmarkThroughputResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse)
}

int RequestBenchmarkThroughputResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBenchmarkThroughputResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestBenchmarkThroughputResponse*>(&from));
}

void RequestBenchmarkThroughputResponse::MergeFrom(const RequestBenchmarkThroughputResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestBenchmarkThroughputResponse::CopyFrom(const RequestBenchmarkThroughputResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBenchmarkThroughputResponse::IsInitialized() const {

  return true;
}

void RequestBenchmarkThroughputResponse::Swap(RequestBenchmarkThroughputResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestBenchmarkThroughputResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestBenchmarkThroughputResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestMeasureDownloadBandwidth::RequestMeasureDownloadBandwidth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
}

void RequestMeasureDownloadBandwidth::InitAsDefaultInstance() {
}

RequestMeasureDownloadBandwidth::RequestMeasureDownloadBandwidth(const RequestMeasureDownloadBandwidth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
}

void RequestMeasureDownloadBandwidth::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMeasureDownloadBandwidth::~RequestMeasureDownloadBandwidth() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
  SharedDtor();
}

void RequestMeasureDownloadBandwidth::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestMeasureDownloadBandwidth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestMeasureDownloadBandwidth& RequestMeasureDownloadBandwidth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestMeasureDownloadBandwidth* RequestMeasureDownloadBandwidth::default_instance_ = NULL;

RequestMeasureDownloadBandwidth* RequestMeasureDownloadBandwidth::New() const {
  return new RequestMeasureDownloadBandwidth;
}

void RequestMeasureDownloadBandwidth::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestMeasureDownloadBandwidth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
  return false;
#undef DO_
}

void RequestMeasureDownloadBandwidth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth)
}

int RequestMeasureDownloadBandwidth::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMeasureDownloadBandwidth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestMeasureDownloadBandwidth*>(&from));
}

void RequestMeasureDownloadBandwidth::MergeFrom(const RequestMeasureDownloadBandwidth& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestMeasureDownloadBandwidth::CopyFrom(const RequestMeasureDownloadBandwidth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMeasureDownloadBandwidth::IsInitialized() const {

  return true;
}

void RequestMeasureDownloadBandwidth::Swap(RequestMeasureDownloadBandwidth* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestMeasureDownloadBandwidth::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidth";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestMeasureDownloadBandwidthResponse::RequestMeasureDownloadBandwidthResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
}

void RequestMeasureDownloadBandwidthResponse::InitAsDefaultInstance() {
}

RequestMeasureDownloadBandwidthResponse::RequestMeasureDownloadBandwidthResponse(const RequestMeasureDownloadBandwidthResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
}

void RequestMeasureDownloadBandwidthResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMeasureDownloadBandwidthResponse::~RequestMeasureDownloadBandwidthResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
  SharedDtor();
}

void RequestMeasureDownloadBandwidthResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestMeasureDownloadBandwidthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestMeasureDownloadBandwidthResponse& RequestMeasureDownloadBandwidthResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestMeasureDownloadBandwidthResponse* RequestMeasureDownloadBandwidthResponse::default_instance_ = NULL;

RequestMeasureDownloadBandwidthResponse* RequestMeasureDownloadBandwidthResponse::New() const {
  return new RequestMeasureDownloadBandwidthResponse;
}

void RequestMeasureDownloadBandwidthResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestMeasureDownloadBandwidthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
  return false;
#undef DO_
}

void RequestMeasureDownloadBandwidthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse)
}

int RequestMeasureDownloadBandwidthResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMeasureDownloadBandwidthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestMeasureDownloadBandwidthResponse*>(&from));
}

void RequestMeasureDownloadBandwidthResponse::MergeFrom(const RequestMeasureDownloadBandwidthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestMeasureDownloadBandwidthResponse::CopyFrom(const RequestMeasureDownloadBandwidthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMeasureDownloadBandwidthResponse::IsInitialized() const {

  return true;
}

void RequestMeasureDownloadBandwidthResponse::Swap(RequestMeasureDownloadBandwidthResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestMeasureDownloadBandwidthResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestMeasureDownloadBandwidthResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestMeasureUploadBandwidth::RequestMeasureUploadBandwidth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
}

void RequestMeasureUploadBandwidth::InitAsDefaultInstance() {
}

RequestMeasureUploadBandwidth::RequestMeasureUploadBandwidth(const RequestMeasureUploadBandwidth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
}

void RequestMeasureUploadBandwidth::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMeasureUploadBandwidth::~RequestMeasureUploadBandwidth() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
  SharedDtor();
}

void RequestMeasureUploadBandwidth::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestMeasureUploadBandwidth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestMeasureUploadBandwidth& RequestMeasureUploadBandwidth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestMeasureUploadBandwidth* RequestMeasureUploadBandwidth::default_instance_ = NULL;

RequestMeasureUploadBandwidth* RequestMeasureUploadBandwidth::New() const {
  return new RequestMeasureUploadBandwidth;
}

void RequestMeasureUploadBandwidth::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestMeasureUploadBandwidth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
  return false;
#undef DO_
}

void RequestMeasureUploadBandwidth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth)
}

int RequestMeasureUploadBandwidth::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMeasureUploadBandwidth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestMeasureUploadBandwidth*>(&from));
}

void RequestMeasureUploadBandwidth::MergeFrom(const RequestMeasureUploadBandwidth& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestMeasureUploadBandwidth::CopyFrom(const RequestMeasureUploadBandwidth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMeasureUploadBandwidth::IsInitialized() const {

  return true;
}

void RequestMeasureUploadBandwidth::Swap(RequestMeasureUploadBandwidth* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestMeasureUploadBandwidth::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidth";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestMeasureUploadBandwidthResponse::RequestMeasureUploadBandwidthResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
}

void RequestMeasureUploadBandwidthResponse::InitAsDefaultInstance() {
}

RequestMeasureUploadBandwidthResponse::RequestMeasureUploadBandwidthResponse(const RequestMeasureUploadBandwidthResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
}

void RequestMeasureUploadBandwidthResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMeasureUploadBandwidthResponse::~RequestMeasureUploadBandwidthResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
  SharedDtor();
}

void RequestMeasureUploadBandwidthResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestMeasureUploadBandwidthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestMeasureUploadBandwidthResponse& RequestMeasureUploadBandwidthResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestMeasureUploadBandwidthResponse* RequestMeasureUploadBandwidthResponse::default_instance_ = NULL;

RequestMeasureUploadBandwidthResponse* RequestMeasureUploadBandwidthResponse::New() const {
  return new RequestMeasureUploadBandwidthResponse;
}

void RequestMeasureUploadBandwidthResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestMeasureUploadBandwidthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
  return false;
#undef DO_
}

void RequestMeasureUploadBandwidthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse)
}

int RequestMeasureUploadBandwidthResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMeasureUploadBandwidthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestMeasureUploadBandwidthResponse*>(&from));
}

void RequestMeasureUploadBandwidthResponse::MergeFrom(const RequestMeasureUploadBandwidthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestMeasureUploadBandwidthResponse::CopyFrom(const RequestMeasureUploadBandwidthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMeasureUploadBandwidthResponse::IsInitialized() const {

  return true;
}

void RequestMeasureUploadBandwidthResponse::Swap(RequestMeasureUploadBandwidthResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestMeasureUploadBandwidthResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestMeasureUploadBandwidthResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSendMessageToAllPlayers::RequestSendMessageToAllPlayers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
}

void RequestSendMessageToAllPlayers::InitAsDefaultInstance() {
}

RequestSendMessageToAllPlayers::RequestSendMessageToAllPlayers(const RequestSendMessageToAllPlayers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
}

void RequestSendMessageToAllPlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessageToAllPlayers::~RequestSendMessageToAllPlayers() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
  SharedDtor();
}

void RequestSendMessageToAllPlayers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendMessageToAllPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendMessageToAllPlayers& RequestSendMessageToAllPlayers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendMessageToAllPlayers* RequestSendMessageToAllPlayers::default_instance_ = NULL;

RequestSendMessageToAllPlayers* RequestSendMessageToAllPlayers::New() const {
  return new RequestSendMessageToAllPlayers;
}

void RequestSendMessageToAllPlayers::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendMessageToAllPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
  return false;
#undef DO_
}

void RequestSendMessageToAllPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers)
}

int RequestSendMessageToAllPlayers::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessageToAllPlayers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendMessageToAllPlayers*>(&from));
}

void RequestSendMessageToAllPlayers::MergeFrom(const RequestSendMessageToAllPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendMessageToAllPlayers::CopyFrom(const RequestSendMessageToAllPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessageToAllPlayers::IsInitialized() const {

  return true;
}

void RequestSendMessageToAllPlayers::Swap(RequestSendMessageToAllPlayers* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendMessageToAllPlayers::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayers";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSendMessageToAllPlayersResponse::RequestSendMessageToAllPlayersResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
}

void RequestSendMessageToAllPlayersResponse::InitAsDefaultInstance() {
}

RequestSendMessageToAllPlayersResponse::RequestSendMessageToAllPlayersResponse(const RequestSendMessageToAllPlayersResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
}

void RequestSendMessageToAllPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessageToAllPlayersResponse::~RequestSendMessageToAllPlayersResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
  SharedDtor();
}

void RequestSendMessageToAllPlayersResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendMessageToAllPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendMessageToAllPlayersResponse& RequestSendMessageToAllPlayersResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendMessageToAllPlayersResponse* RequestSendMessageToAllPlayersResponse::default_instance_ = NULL;

RequestSendMessageToAllPlayersResponse* RequestSendMessageToAllPlayersResponse::New() const {
  return new RequestSendMessageToAllPlayersResponse;
}

void RequestSendMessageToAllPlayersResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendMessageToAllPlayersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
  return false;
#undef DO_
}

void RequestSendMessageToAllPlayersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse)
}

int RequestSendMessageToAllPlayersResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessageToAllPlayersResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendMessageToAllPlayersResponse*>(&from));
}

void RequestSendMessageToAllPlayersResponse::MergeFrom(const RequestSendMessageToAllPlayersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendMessageToAllPlayersResponse::CopyFrom(const RequestSendMessageToAllPlayersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessageToAllPlayersResponse::IsInitialized() const {

  return true;
}

void RequestSendMessageToAllPlayersResponse::Swap(RequestSendMessageToAllPlayersResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendMessageToAllPlayersResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendMessageToAllPlayersResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSendMessageToPlayers::kPlayerIdsFieldNumber;
const int RequestSendMessageToPlayers::kMessageFieldNumber;
#endif  // !_MSC_VER

RequestSendMessageToPlayers::RequestSendMessageToPlayers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
}

void RequestSendMessageToPlayers::InitAsDefaultInstance() {
}

RequestSendMessageToPlayers::RequestSendMessageToPlayers(const RequestSendMessageToPlayers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
}

void RequestSendMessageToPlayers::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessageToPlayers::~RequestSendMessageToPlayers() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
  SharedDtor();
}

void RequestSendMessageToPlayers::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendMessageToPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendMessageToPlayers& RequestSendMessageToPlayers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendMessageToPlayers* RequestSendMessageToPlayers::default_instance_ = NULL;

RequestSendMessageToPlayers* RequestSendMessageToPlayers::New() const {
  return new RequestSendMessageToPlayers;
}

void RequestSendMessageToPlayers::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  player_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendMessageToPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 player_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_player_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_player_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_player_ids;
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required bytes message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
  return false;
#undef DO_
}

void RequestSendMessageToPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
  // repeated uint32 player_ids = 1;
  for (int i = 0; i < this->player_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->player_ids(i), output);
  }

  // required bytes message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendMessageToPlayers)
}

int RequestSendMessageToPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bytes message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  // repeated uint32 player_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_ids(i));
    }
    total_size += 1 * this->player_ids_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessageToPlayers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendMessageToPlayers*>(&from));
}

void RequestSendMessageToPlayers::MergeFrom(const RequestSendMessageToPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_ids_.MergeFrom(from.player_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendMessageToPlayers::CopyFrom(const RequestSendMessageToPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessageToPlayers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RequestSendMessageToPlayers::Swap(RequestSendMessageToPlayers* other) {
  if (other != this) {
    player_ids_.Swap(&other->player_ids_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendMessageToPlayers::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendMessageToPlayers";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSendMessageToPlayersResponse::RequestSendMessageToPlayersResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
}

void RequestSendMessageToPlayersResponse::InitAsDefaultInstance() {
}

RequestSendMessageToPlayersResponse::RequestSendMessageToPlayersResponse(const RequestSendMessageToPlayersResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
}

void RequestSendMessageToPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessageToPlayersResponse::~RequestSendMessageToPlayersResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
  SharedDtor();
}

void RequestSendMessageToPlayersResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendMessageToPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendMessageToPlayersResponse& RequestSendMessageToPlayersResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendMessageToPlayersResponse* RequestSendMessageToPlayersResponse::default_instance_ = NULL;

RequestSendMessageToPlayersResponse* RequestSendMessageToPlayersResponse::New() const {
  return new RequestSendMessageToPlayersResponse;
}

void RequestSendMessageToPlayersResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendMessageToPlayersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
  return false;
#undef DO_
}

void RequestSendMessageToPlayersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse)
}

int RequestSendMessageToPlayersResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessageToPlayersResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendMessageToPlayersResponse*>(&from));
}

void RequestSendMessageToPlayersResponse::MergeFrom(const RequestSendMessageToPlayersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendMessageToPlayersResponse::CopyFrom(const RequestSendMessageToPlayersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessageToPlayersResponse::IsInitialized() const {

  return true;
}

void RequestSendMessageToPlayersResponse::Swap(RequestSendMessageToPlayersResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendMessageToPlayersResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendMessageToPlayersResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSendMessageToSelectLanguagePlayers::RequestSendMessageToSelectLanguagePlayers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
}

void RequestSendMessageToSelectLanguagePlayers::InitAsDefaultInstance() {
}

RequestSendMessageToSelectLanguagePlayers::RequestSendMessageToSelectLanguagePlayers(const RequestSendMessageToSelectLanguagePlayers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
}

void RequestSendMessageToSelectLanguagePlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessageToSelectLanguagePlayers::~RequestSendMessageToSelectLanguagePlayers() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
  SharedDtor();
}

void RequestSendMessageToSelectLanguagePlayers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendMessageToSelectLanguagePlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendMessageToSelectLanguagePlayers& RequestSendMessageToSelectLanguagePlayers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendMessageToSelectLanguagePlayers* RequestSendMessageToSelectLanguagePlayers::default_instance_ = NULL;

RequestSendMessageToSelectLanguagePlayers* RequestSendMessageToSelectLanguagePlayers::New() const {
  return new RequestSendMessageToSelectLanguagePlayers;
}

void RequestSendMessageToSelectLanguagePlayers::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendMessageToSelectLanguagePlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
  return false;
#undef DO_
}

void RequestSendMessageToSelectLanguagePlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers)
}

int RequestSendMessageToSelectLanguagePlayers::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessageToSelectLanguagePlayers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendMessageToSelectLanguagePlayers*>(&from));
}

void RequestSendMessageToSelectLanguagePlayers::MergeFrom(const RequestSendMessageToSelectLanguagePlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendMessageToSelectLanguagePlayers::CopyFrom(const RequestSendMessageToSelectLanguagePlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessageToSelectLanguagePlayers::IsInitialized() const {

  return true;
}

void RequestSendMessageToSelectLanguagePlayers::Swap(RequestSendMessageToSelectLanguagePlayers* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendMessageToSelectLanguagePlayers::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayers";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSendMessageToSelectLanguagePlayersResponse::RequestSendMessageToSelectLanguagePlayersResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
}

void RequestSendMessageToSelectLanguagePlayersResponse::InitAsDefaultInstance() {
}

RequestSendMessageToSelectLanguagePlayersResponse::RequestSendMessageToSelectLanguagePlayersResponse(const RequestSendMessageToSelectLanguagePlayersResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
}

void RequestSendMessageToSelectLanguagePlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessageToSelectLanguagePlayersResponse::~RequestSendMessageToSelectLanguagePlayersResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
  SharedDtor();
}

void RequestSendMessageToSelectLanguagePlayersResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendMessageToSelectLanguagePlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendMessageToSelectLanguagePlayersResponse& RequestSendMessageToSelectLanguagePlayersResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendMessageToSelectLanguagePlayersResponse* RequestSendMessageToSelectLanguagePlayersResponse::default_instance_ = NULL;

RequestSendMessageToSelectLanguagePlayersResponse* RequestSendMessageToSelectLanguagePlayersResponse::New() const {
  return new RequestSendMessageToSelectLanguagePlayersResponse;
}

void RequestSendMessageToSelectLanguagePlayersResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendMessageToSelectLanguagePlayersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
  return false;
#undef DO_
}

void RequestSendMessageToSelectLanguagePlayersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse)
}

int RequestSendMessageToSelectLanguagePlayersResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessageToSelectLanguagePlayersResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendMessageToSelectLanguagePlayersResponse*>(&from));
}

void RequestSendMessageToSelectLanguagePlayersResponse::MergeFrom(const RequestSendMessageToSelectLanguagePlayersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendMessageToSelectLanguagePlayersResponse::CopyFrom(const RequestSendMessageToSelectLanguagePlayersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessageToSelectLanguagePlayersResponse::IsInitialized() const {

  return true;
}

void RequestSendMessageToSelectLanguagePlayersResponse::Swap(RequestSendMessageToSelectLanguagePlayersResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendMessageToSelectLanguagePlayersResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendMessageToSelectLanguagePlayersResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSendMessageToPushClient::RequestSendMessageToPushClient()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
}

void RequestSendMessageToPushClient::InitAsDefaultInstance() {
}

RequestSendMessageToPushClient::RequestSendMessageToPushClient(const RequestSendMessageToPushClient& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
}

void RequestSendMessageToPushClient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessageToPushClient::~RequestSendMessageToPushClient() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
  SharedDtor();
}

void RequestSendMessageToPushClient::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendMessageToPushClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendMessageToPushClient& RequestSendMessageToPushClient::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendMessageToPushClient* RequestSendMessageToPushClient::default_instance_ = NULL;

RequestSendMessageToPushClient* RequestSendMessageToPushClient::New() const {
  return new RequestSendMessageToPushClient;
}

void RequestSendMessageToPushClient::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendMessageToPushClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
  return false;
#undef DO_
}

void RequestSendMessageToPushClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendMessageToPushClient)
}

int RequestSendMessageToPushClient::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessageToPushClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendMessageToPushClient*>(&from));
}

void RequestSendMessageToPushClient::MergeFrom(const RequestSendMessageToPushClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendMessageToPushClient::CopyFrom(const RequestSendMessageToPushClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessageToPushClient::IsInitialized() const {

  return true;
}

void RequestSendMessageToPushClient::Swap(RequestSendMessageToPushClient* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendMessageToPushClient::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendMessageToPushClient";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSendPlayerList::RequestSendPlayerList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestSendPlayerList)
}

void RequestSendPlayerList::InitAsDefaultInstance() {
}

RequestSendPlayerList::RequestSendPlayerList(const RequestSendPlayerList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestSendPlayerList)
}

void RequestSendPlayerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendPlayerList::~RequestSendPlayerList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestSendPlayerList)
  SharedDtor();
}

void RequestSendPlayerList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendPlayerList& RequestSendPlayerList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestSendPlayerList* RequestSendPlayerList::default_instance_ = NULL;

RequestSendPlayerList* RequestSendPlayerList::New() const {
  return new RequestSendPlayerList;
}

void RequestSendPlayerList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestSendPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestSendPlayerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestSendPlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestSendPlayerList)
  return false;
#undef DO_
}

void RequestSendPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestSendPlayerList)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestSendPlayerList)
}

int RequestSendPlayerList::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendPlayerList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendPlayerList*>(&from));
}

void RequestSendPlayerList::MergeFrom(const RequestSendPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestSendPlayerList::CopyFrom(const RequestSendPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendPlayerList::IsInitialized() const {

  return true;
}

void RequestSendPlayerList::Swap(RequestSendPlayerList* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendPlayerList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestSendPlayerList";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyLoginToPushServer::NotifyLoginToPushServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
}

void NotifyLoginToPushServer::InitAsDefaultInstance() {
}

NotifyLoginToPushServer::NotifyLoginToPushServer(const NotifyLoginToPushServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
}

void NotifyLoginToPushServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLoginToPushServer::~NotifyLoginToPushServer() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
  SharedDtor();
}

void NotifyLoginToPushServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyLoginToPushServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyLoginToPushServer& NotifyLoginToPushServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

NotifyLoginToPushServer* NotifyLoginToPushServer::default_instance_ = NULL;

NotifyLoginToPushServer* NotifyLoginToPushServer::New() const {
  return new NotifyLoginToPushServer;
}

void NotifyLoginToPushServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NotifyLoginToPushServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
  return false;
#undef DO_
}

void NotifyLoginToPushServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.NotifyLoginToPushServer)
}

int NotifyLoginToPushServer::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLoginToPushServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyLoginToPushServer*>(&from));
}

void NotifyLoginToPushServer::MergeFrom(const NotifyLoginToPushServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NotifyLoginToPushServer::CopyFrom(const NotifyLoginToPushServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLoginToPushServer::IsInitialized() const {

  return true;
}

void NotifyLoginToPushServer::Swap(NotifyLoginToPushServer* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyLoginToPushServer::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.NotifyLoginToPushServer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyLogoutToPushServer::NotifyLogoutToPushServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
}

void NotifyLogoutToPushServer::InitAsDefaultInstance() {
}

NotifyLogoutToPushServer::NotifyLogoutToPushServer(const NotifyLogoutToPushServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
}

void NotifyLogoutToPushServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogoutToPushServer::~NotifyLogoutToPushServer() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
  SharedDtor();
}

void NotifyLogoutToPushServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyLogoutToPushServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyLogoutToPushServer& NotifyLogoutToPushServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

NotifyLogoutToPushServer* NotifyLogoutToPushServer::default_instance_ = NULL;

NotifyLogoutToPushServer* NotifyLogoutToPushServer::New() const {
  return new NotifyLogoutToPushServer;
}

void NotifyLogoutToPushServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NotifyLogoutToPushServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
  return false;
#undef DO_
}

void NotifyLogoutToPushServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.NotifyLogoutToPushServer)
}

int NotifyLogoutToPushServer::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogoutToPushServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyLogoutToPushServer*>(&from));
}

void NotifyLogoutToPushServer::MergeFrom(const NotifyLogoutToPushServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NotifyLogoutToPushServer::CopyFrom(const NotifyLogoutToPushServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogoutToPushServer::IsInitialized() const {

  return true;
}

void NotifyLogoutToPushServer::Swap(NotifyLogoutToPushServer* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyLogoutToPushServer::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.NotifyLogoutToPushServer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLoginInfo::UserLoginInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.UserLoginInfo)
}

void UserLoginInfo::InitAsDefaultInstance() {
}

UserLoginInfo::UserLoginInfo(const UserLoginInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.UserLoginInfo)
}

void UserLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginInfo::~UserLoginInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.UserLoginInfo)
  SharedDtor();
}

void UserLoginInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginInfo& UserLoginInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

UserLoginInfo* UserLoginInfo::default_instance_ = NULL;

UserLoginInfo* UserLoginInfo::New() const {
  return new UserLoginInfo;
}

void UserLoginInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.UserLoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.UserLoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.UserLoginInfo)
  return false;
#undef DO_
}

void UserLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.UserLoginInfo)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.UserLoginInfo)
}

int UserLoginInfo::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginInfo*>(&from));
}

void UserLoginInfo::MergeFrom(const UserLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserLoginInfo::CopyFrom(const UserLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginInfo::IsInitialized() const {

  return true;
}

void UserLoginInfo::Swap(UserLoginInfo* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginInfo::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.UserLoginInfo";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLogout::UserLogout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.UserLogout)
}

void UserLogout::InitAsDefaultInstance() {
}

UserLogout::UserLogout(const UserLogout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.UserLogout)
}

void UserLogout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogout::~UserLogout() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.UserLogout)
  SharedDtor();
}

void UserLogout::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLogout& UserLogout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

UserLogout* UserLogout::default_instance_ = NULL;

UserLogout* UserLogout::New() const {
  return new UserLogout;
}

void UserLogout::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.UserLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.UserLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.UserLogout)
  return false;
#undef DO_
}

void UserLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.UserLogout)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.UserLogout)
}

int UserLogout::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLogout*>(&from));
}

void UserLogout::MergeFrom(const UserLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserLogout::CopyFrom(const UserLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogout::IsInitialized() const {

  return true;
}

void UserLogout::Swap(UserLogout* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLogout::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.UserLogout";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginClientInfo::LoginClientInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.LoginClientInfo)
}

void LoginClientInfo::InitAsDefaultInstance() {
}

LoginClientInfo::LoginClientInfo(const LoginClientInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.LoginClientInfo)
}

void LoginClientInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginClientInfo::~LoginClientInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.LoginClientInfo)
  SharedDtor();
}

void LoginClientInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginClientInfo& LoginClientInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

LoginClientInfo* LoginClientInfo::default_instance_ = NULL;

LoginClientInfo* LoginClientInfo::New() const {
  return new LoginClientInfo;
}

void LoginClientInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.LoginClientInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.LoginClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.LoginClientInfo)
  return false;
#undef DO_
}

void LoginClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.LoginClientInfo)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.LoginClientInfo)
}

int LoginClientInfo::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginClientInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginClientInfo*>(&from));
}

void LoginClientInfo::MergeFrom(const LoginClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginClientInfo::CopyFrom(const LoginClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientInfo::IsInitialized() const {

  return true;
}

void LoginClientInfo::Swap(LoginClientInfo* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginClientInfo::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.LoginClientInfo";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginForXboxOne::LoginForXboxOne()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.LoginForXboxOne)
}

void LoginForXboxOne::InitAsDefaultInstance() {
}

LoginForXboxOne::LoginForXboxOne(const LoginForXboxOne& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.LoginForXboxOne)
}

void LoginForXboxOne::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginForXboxOne::~LoginForXboxOne() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.LoginForXboxOne)
  SharedDtor();
}

void LoginForXboxOne::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginForXboxOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginForXboxOne& LoginForXboxOne::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

LoginForXboxOne* LoginForXboxOne::default_instance_ = NULL;

LoginForXboxOne* LoginForXboxOne::New() const {
  return new LoginForXboxOne;
}

void LoginForXboxOne::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginForXboxOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.LoginForXboxOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.LoginForXboxOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.LoginForXboxOne)
  return false;
#undef DO_
}

void LoginForXboxOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.LoginForXboxOne)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.LoginForXboxOne)
}

int LoginForXboxOne::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginForXboxOne::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginForXboxOne*>(&from));
}

void LoginForXboxOne::MergeFrom(const LoginForXboxOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginForXboxOne::CopyFrom(const LoginForXboxOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginForXboxOne::IsInitialized() const {

  return true;
}

void LoginForXboxOne::Swap(LoginForXboxOne* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginForXboxOne::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.LoginForXboxOne";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SocketOptionSetting::SocketOptionSetting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.SocketOptionSetting)
}

void SocketOptionSetting::InitAsDefaultInstance() {
}

SocketOptionSetting::SocketOptionSetting(const SocketOptionSetting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.SocketOptionSetting)
}

void SocketOptionSetting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketOptionSetting::~SocketOptionSetting() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.SocketOptionSetting)
  SharedDtor();
}

void SocketOptionSetting::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketOptionSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketOptionSetting& SocketOptionSetting::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

SocketOptionSetting* SocketOptionSetting::default_instance_ = NULL;

SocketOptionSetting* SocketOptionSetting::New() const {
  return new SocketOptionSetting;
}

void SocketOptionSetting::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SocketOptionSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.SocketOptionSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.SocketOptionSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.SocketOptionSetting)
  return false;
#undef DO_
}

void SocketOptionSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.SocketOptionSetting)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.SocketOptionSetting)
}

int SocketOptionSetting::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketOptionSetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketOptionSetting*>(&from));
}

void SocketOptionSetting::MergeFrom(const SocketOptionSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SocketOptionSetting::CopyFrom(const SocketOptionSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionSetting::IsInitialized() const {

  return true;
}

void SocketOptionSetting::Swap(SocketOptionSetting* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketOptionSetting::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.SocketOptionSetting";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetConnectGameServerPortIdResponse::GetConnectGameServerPortIdResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
}

void GetConnectGameServerPortIdResponse::InitAsDefaultInstance() {
}

GetConnectGameServerPortIdResponse::GetConnectGameServerPortIdResponse(const GetConnectGameServerPortIdResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
}

void GetConnectGameServerPortIdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConnectGameServerPortIdResponse::~GetConnectGameServerPortIdResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
  SharedDtor();
}

void GetConnectGameServerPortIdResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetConnectGameServerPortIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetConnectGameServerPortIdResponse& GetConnectGameServerPortIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

GetConnectGameServerPortIdResponse* GetConnectGameServerPortIdResponse::default_instance_ = NULL;

GetConnectGameServerPortIdResponse* GetConnectGameServerPortIdResponse::New() const {
  return new GetConnectGameServerPortIdResponse;
}

void GetConnectGameServerPortIdResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetConnectGameServerPortIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
  return false;
#undef DO_
}

void GetConnectGameServerPortIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse)
}

int GetConnectGameServerPortIdResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConnectGameServerPortIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetConnectGameServerPortIdResponse*>(&from));
}

void GetConnectGameServerPortIdResponse::MergeFrom(const GetConnectGameServerPortIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetConnectGameServerPortIdResponse::CopyFrom(const GetConnectGameServerPortIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectGameServerPortIdResponse::IsInitialized() const {

  return true;
}

void GetConnectGameServerPortIdResponse::Swap(GetConnectGameServerPortIdResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetConnectGameServerPortIdResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.GetConnectGameServerPortIdResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyClientServerInfoToPushServer::NotifyClientServerInfoToPushServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
}

void NotifyClientServerInfoToPushServer::InitAsDefaultInstance() {
}

NotifyClientServerInfoToPushServer::NotifyClientServerInfoToPushServer(const NotifyClientServerInfoToPushServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
}

void NotifyClientServerInfoToPushServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClientServerInfoToPushServer::~NotifyClientServerInfoToPushServer() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
  SharedDtor();
}

void NotifyClientServerInfoToPushServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyClientServerInfoToPushServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyClientServerInfoToPushServer& NotifyClientServerInfoToPushServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

NotifyClientServerInfoToPushServer* NotifyClientServerInfoToPushServer::default_instance_ = NULL;

NotifyClientServerInfoToPushServer* NotifyClientServerInfoToPushServer::New() const {
  return new NotifyClientServerInfoToPushServer;
}

void NotifyClientServerInfoToPushServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NotifyClientServerInfoToPushServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
  return false;
#undef DO_
}

void NotifyClientServerInfoToPushServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer)
}

int NotifyClientServerInfoToPushServer::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClientServerInfoToPushServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyClientServerInfoToPushServer*>(&from));
}

void NotifyClientServerInfoToPushServer::MergeFrom(const NotifyClientServerInfoToPushServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NotifyClientServerInfoToPushServer::CopyFrom(const NotifyClientServerInfoToPushServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClientServerInfoToPushServer::IsInitialized() const {

  return true;
}

void NotifyClientServerInfoToPushServer::Swap(NotifyClientServerInfoToPushServer* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyClientServerInfoToPushServer::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.NotifyClientServerInfoToPushServer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PushLoginUserInfo::PushLoginUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PushLoginUserInfo)
}

void PushLoginUserInfo::InitAsDefaultInstance() {
}

PushLoginUserInfo::PushLoginUserInfo(const PushLoginUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PushLoginUserInfo)
}

void PushLoginUserInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushLoginUserInfo::~PushLoginUserInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PushLoginUserInfo)
  SharedDtor();
}

void PushLoginUserInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushLoginUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushLoginUserInfo& PushLoginUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PushLoginUserInfo* PushLoginUserInfo::default_instance_ = NULL;

PushLoginUserInfo* PushLoginUserInfo::New() const {
  return new PushLoginUserInfo;
}

void PushLoginUserInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PushLoginUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PushLoginUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PushLoginUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PushLoginUserInfo)
  return false;
#undef DO_
}

void PushLoginUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PushLoginUserInfo)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PushLoginUserInfo)
}

int PushLoginUserInfo::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushLoginUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushLoginUserInfo*>(&from));
}

void PushLoginUserInfo::MergeFrom(const PushLoginUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PushLoginUserInfo::CopyFrom(const PushLoginUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushLoginUserInfo::IsInitialized() const {

  return true;
}

void PushLoginUserInfo::Swap(PushLoginUserInfo* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushLoginUserInfo::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PushLoginUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestCheckLogin::RequestCheckLogin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCheckLogin)
}

void RequestCheckLogin::InitAsDefaultInstance() {
}

RequestCheckLogin::RequestCheckLogin(const RequestCheckLogin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCheckLogin)
}

void RequestCheckLogin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCheckLogin::~RequestCheckLogin() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCheckLogin)
  SharedDtor();
}

void RequestCheckLogin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCheckLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCheckLogin& RequestCheckLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCheckLogin* RequestCheckLogin::default_instance_ = NULL;

RequestCheckLogin* RequestCheckLogin::New() const {
  return new RequestCheckLogin;
}

void RequestCheckLogin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCheckLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCheckLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCheckLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCheckLogin)
  return false;
#undef DO_
}

void RequestCheckLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCheckLogin)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCheckLogin)
}

int RequestCheckLogin::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheckLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCheckLogin*>(&from));
}

void RequestCheckLogin::MergeFrom(const RequestCheckLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCheckLogin::CopyFrom(const RequestCheckLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckLogin::IsInitialized() const {

  return true;
}

void RequestCheckLogin::Swap(RequestCheckLogin* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCheckLogin::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCheckLogin";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestCheckLoginResponse::RequestCheckLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
}

void RequestCheckLoginResponse::InitAsDefaultInstance() {
}

RequestCheckLoginResponse::RequestCheckLoginResponse(const RequestCheckLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
}

void RequestCheckLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCheckLoginResponse::~RequestCheckLoginResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
  SharedDtor();
}

void RequestCheckLoginResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCheckLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCheckLoginResponse& RequestCheckLoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestCheckLoginResponse* RequestCheckLoginResponse::default_instance_ = NULL;

RequestCheckLoginResponse* RequestCheckLoginResponse::New() const {
  return new RequestCheckLoginResponse;
}

void RequestCheckLoginResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestCheckLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
  return false;
#undef DO_
}

void RequestCheckLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestCheckLoginResponse)
}

int RequestCheckLoginResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheckLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCheckLoginResponse*>(&from));
}

void RequestCheckLoginResponse::MergeFrom(const RequestCheckLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestCheckLoginResponse::CopyFrom(const RequestCheckLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckLoginResponse::IsInitialized() const {

  return true;
}

void RequestCheckLoginResponse::Swap(RequestCheckLoginResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCheckLoginResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestCheckLoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetPlayerConnectGameServer::RequestGetPlayerConnectGameServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
}

void RequestGetPlayerConnectGameServer::InitAsDefaultInstance() {
}

RequestGetPlayerConnectGameServer::RequestGetPlayerConnectGameServer(const RequestGetPlayerConnectGameServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
}

void RequestGetPlayerConnectGameServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPlayerConnectGameServer::~RequestGetPlayerConnectGameServer() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
  SharedDtor();
}

void RequestGetPlayerConnectGameServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPlayerConnectGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPlayerConnectGameServer& RequestGetPlayerConnectGameServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPlayerConnectGameServer* RequestGetPlayerConnectGameServer::default_instance_ = NULL;

RequestGetPlayerConnectGameServer* RequestGetPlayerConnectGameServer::New() const {
  return new RequestGetPlayerConnectGameServer;
}

void RequestGetPlayerConnectGameServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPlayerConnectGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
  return false;
#undef DO_
}

void RequestGetPlayerConnectGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer)
}

int RequestGetPlayerConnectGameServer::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPlayerConnectGameServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPlayerConnectGameServer*>(&from));
}

void RequestGetPlayerConnectGameServer::MergeFrom(const RequestGetPlayerConnectGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPlayerConnectGameServer::CopyFrom(const RequestGetPlayerConnectGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPlayerConnectGameServer::IsInitialized() const {

  return true;
}

void RequestGetPlayerConnectGameServer::Swap(RequestGetPlayerConnectGameServer* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPlayerConnectGameServer::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServer";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetPlayerConnectGameServerResponse::RequestGetPlayerConnectGameServerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
}

void RequestGetPlayerConnectGameServerResponse::InitAsDefaultInstance() {
}

RequestGetPlayerConnectGameServerResponse::RequestGetPlayerConnectGameServerResponse(const RequestGetPlayerConnectGameServerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
}

void RequestGetPlayerConnectGameServerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPlayerConnectGameServerResponse::~RequestGetPlayerConnectGameServerResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
  SharedDtor();
}

void RequestGetPlayerConnectGameServerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPlayerConnectGameServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPlayerConnectGameServerResponse& RequestGetPlayerConnectGameServerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPlayerConnectGameServerResponse* RequestGetPlayerConnectGameServerResponse::default_instance_ = NULL;

RequestGetPlayerConnectGameServerResponse* RequestGetPlayerConnectGameServerResponse::New() const {
  return new RequestGetPlayerConnectGameServerResponse;
}

void RequestGetPlayerConnectGameServerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPlayerConnectGameServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
  return false;
#undef DO_
}

void RequestGetPlayerConnectGameServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse)
}

int RequestGetPlayerConnectGameServerResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPlayerConnectGameServerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPlayerConnectGameServerResponse*>(&from));
}

void RequestGetPlayerConnectGameServerResponse::MergeFrom(const RequestGetPlayerConnectGameServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPlayerConnectGameServerResponse::CopyFrom(const RequestGetPlayerConnectGameServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPlayerConnectGameServerResponse::IsInitialized() const {

  return true;
}

void RequestGetPlayerConnectGameServerResponse::Swap(RequestGetPlayerConnectGameServerResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPlayerConnectGameServerResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPlayerConnectGameServerResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerConnectServerInfo::PlayerConnectServerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
}

void PlayerConnectServerInfo::InitAsDefaultInstance() {
}

PlayerConnectServerInfo::PlayerConnectServerInfo(const PlayerConnectServerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
}

void PlayerConnectServerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerConnectServerInfo::~PlayerConnectServerInfo() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
  SharedDtor();
}

void PlayerConnectServerInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerConnectServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerConnectServerInfo& PlayerConnectServerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

PlayerConnectServerInfo* PlayerConnectServerInfo::default_instance_ = NULL;

PlayerConnectServerInfo* PlayerConnectServerInfo::New() const {
  return new PlayerConnectServerInfo;
}

void PlayerConnectServerInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerConnectServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
  return false;
#undef DO_
}

void PlayerConnectServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.PlayerConnectServerInfo)
}

int PlayerConnectServerInfo::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerConnectServerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerConnectServerInfo*>(&from));
}

void PlayerConnectServerInfo::MergeFrom(const PlayerConnectServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerConnectServerInfo::CopyFrom(const PlayerConnectServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerConnectServerInfo::IsInitialized() const {

  return true;
}

void PlayerConnectServerInfo::Swap(PlayerConnectServerInfo* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerConnectServerInfo::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.PlayerConnectServerInfo";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetConnectionCount::RequestGetConnectionCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
}

void RequestGetConnectionCount::InitAsDefaultInstance() {
}

RequestGetConnectionCount::RequestGetConnectionCount(const RequestGetConnectionCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
}

void RequestGetConnectionCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetConnectionCount::~RequestGetConnectionCount() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
  SharedDtor();
}

void RequestGetConnectionCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetConnectionCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetConnectionCount& RequestGetConnectionCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetConnectionCount* RequestGetConnectionCount::default_instance_ = NULL;

RequestGetConnectionCount* RequestGetConnectionCount::New() const {
  return new RequestGetConnectionCount;
}

void RequestGetConnectionCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetConnectionCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
  return false;
#undef DO_
}

void RequestGetConnectionCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetConnectionCount)
}

int RequestGetConnectionCount::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetConnectionCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetConnectionCount*>(&from));
}

void RequestGetConnectionCount::MergeFrom(const RequestGetConnectionCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetConnectionCount::CopyFrom(const RequestGetConnectionCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetConnectionCount::IsInitialized() const {

  return true;
}

void RequestGetConnectionCount::Swap(RequestGetConnectionCount* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetConnectionCount::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetConnectionCount";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetConnectionCountResponse::RequestGetConnectionCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
}

void RequestGetConnectionCountResponse::InitAsDefaultInstance() {
}

RequestGetConnectionCountResponse::RequestGetConnectionCountResponse(const RequestGetConnectionCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
}

void RequestGetConnectionCountResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetConnectionCountResponse::~RequestGetConnectionCountResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
  SharedDtor();
}

void RequestGetConnectionCountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetConnectionCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetConnectionCountResponse& RequestGetConnectionCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetConnectionCountResponse* RequestGetConnectionCountResponse::default_instance_ = NULL;

RequestGetConnectionCountResponse* RequestGetConnectionCountResponse::New() const {
  return new RequestGetConnectionCountResponse;
}

void RequestGetConnectionCountResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetConnectionCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
  return false;
#undef DO_
}

void RequestGetConnectionCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse)
}

int RequestGetConnectionCountResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetConnectionCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetConnectionCountResponse*>(&from));
}

void RequestGetConnectionCountResponse::MergeFrom(const RequestGetConnectionCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetConnectionCountResponse::CopyFrom(const RequestGetConnectionCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetConnectionCountResponse::IsInitialized() const {

  return true;
}

void RequestGetConnectionCountResponse::Swap(RequestGetConnectionCountResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetConnectionCountResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetConnectionCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestDisconnectAllUser::RequestDisconnectAllUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
}

void RequestDisconnectAllUser::InitAsDefaultInstance() {
}

RequestDisconnectAllUser::RequestDisconnectAllUser(const RequestDisconnectAllUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
}

void RequestDisconnectAllUser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDisconnectAllUser::~RequestDisconnectAllUser() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
  SharedDtor();
}

void RequestDisconnectAllUser::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestDisconnectAllUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestDisconnectAllUser& RequestDisconnectAllUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestDisconnectAllUser* RequestDisconnectAllUser::default_instance_ = NULL;

RequestDisconnectAllUser* RequestDisconnectAllUser::New() const {
  return new RequestDisconnectAllUser;
}

void RequestDisconnectAllUser::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestDisconnectAllUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
  return false;
#undef DO_
}

void RequestDisconnectAllUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestDisconnectAllUser)
}

int RequestDisconnectAllUser::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDisconnectAllUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestDisconnectAllUser*>(&from));
}

void RequestDisconnectAllUser::MergeFrom(const RequestDisconnectAllUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestDisconnectAllUser::CopyFrom(const RequestDisconnectAllUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDisconnectAllUser::IsInitialized() const {

  return true;
}

void RequestDisconnectAllUser::Swap(RequestDisconnectAllUser* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestDisconnectAllUser::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestDisconnectAllUser";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestDisconnectUser::RequestDisconnectUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestDisconnectUser)
}

void RequestDisconnectUser::InitAsDefaultInstance() {
}

RequestDisconnectUser::RequestDisconnectUser(const RequestDisconnectUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestDisconnectUser)
}

void RequestDisconnectUser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDisconnectUser::~RequestDisconnectUser() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestDisconnectUser)
  SharedDtor();
}

void RequestDisconnectUser::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestDisconnectUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestDisconnectUser& RequestDisconnectUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestDisconnectUser* RequestDisconnectUser::default_instance_ = NULL;

RequestDisconnectUser* RequestDisconnectUser::New() const {
  return new RequestDisconnectUser;
}

void RequestDisconnectUser::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestDisconnectUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestDisconnectUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestDisconnectUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestDisconnectUser)
  return false;
#undef DO_
}

void RequestDisconnectUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestDisconnectUser)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestDisconnectUser)
}

int RequestDisconnectUser::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDisconnectUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestDisconnectUser*>(&from));
}

void RequestDisconnectUser::MergeFrom(const RequestDisconnectUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestDisconnectUser::CopyFrom(const RequestDisconnectUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDisconnectUser::IsInitialized() const {

  return true;
}

void RequestDisconnectUser::Swap(RequestDisconnectUser* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestDisconnectUser::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestDisconnectUser";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetServerSidePlayerStatus::RequestGetServerSidePlayerStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
}

void RequestGetServerSidePlayerStatus::InitAsDefaultInstance() {
}

RequestGetServerSidePlayerStatus::RequestGetServerSidePlayerStatus(const RequestGetServerSidePlayerStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
}

void RequestGetServerSidePlayerStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetServerSidePlayerStatus::~RequestGetServerSidePlayerStatus() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
  SharedDtor();
}

void RequestGetServerSidePlayerStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetServerSidePlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetServerSidePlayerStatus& RequestGetServerSidePlayerStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetServerSidePlayerStatus* RequestGetServerSidePlayerStatus::default_instance_ = NULL;

RequestGetServerSidePlayerStatus* RequestGetServerSidePlayerStatus::New() const {
  return new RequestGetServerSidePlayerStatus;
}

void RequestGetServerSidePlayerStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetServerSidePlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
  return false;
#undef DO_
}

void RequestGetServerSidePlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus)
}

int RequestGetServerSidePlayerStatus::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetServerSidePlayerStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetServerSidePlayerStatus*>(&from));
}

void RequestGetServerSidePlayerStatus::MergeFrom(const RequestGetServerSidePlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetServerSidePlayerStatus::CopyFrom(const RequestGetServerSidePlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetServerSidePlayerStatus::IsInitialized() const {

  return true;
}

void RequestGetServerSidePlayerStatus::Swap(RequestGetServerSidePlayerStatus* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetServerSidePlayerStatus::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetServerSidePlayerStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int CellLimitData::kCellIdFieldNumber;
const int CellLimitData::kMaxItemsFieldNumber;
#endif  // !_MSC_VER

CellLimitData::CellLimitData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.CellLimitData)
}

void CellLimitData::InitAsDefaultInstance() {
}

CellLimitData::CellLimitData(const CellLimitData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.CellLimitData)
}

void CellLimitData::SharedCtor() {
  _cached_size_ = 0;
  cell_id_ = 0u;
  max_items_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellLimitData::~CellLimitData() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.CellLimitData)
  SharedDtor();
}

void CellLimitData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CellLimitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CellLimitData& CellLimitData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

CellLimitData* CellLimitData::default_instance_ = NULL;

CellLimitData* CellLimitData::New() const {
  return new CellLimitData;
}

void CellLimitData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CellLimitData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cell_id_, max_items_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CellLimitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.CellLimitData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cell_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_items;
        break;
      }

      // required uint32 max_items = 2;
      case 2: {
        if (tag == 16) {
         parse_max_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_items_)));
          set_has_max_items();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.CellLimitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.CellLimitData)
  return false;
#undef DO_
}

void CellLimitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.CellLimitData)
  // required uint32 cell_id = 1;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // required uint32 max_items = 2;
  if (has_max_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_items(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.CellLimitData)
}

int CellLimitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cell_id = 1;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // required uint32 max_items = 2;
    if (has_max_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_items());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellLimitData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CellLimitData*>(&from));
}

void CellLimitData::MergeFrom(const CellLimitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_max_items()) {
      set_max_items(from.max_items());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CellLimitData::CopyFrom(const CellLimitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellLimitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CellLimitData::Swap(CellLimitData* other) {
  if (other != this) {
    std::swap(cell_id_, other->cell_id_);
    std::swap(max_items_, other->max_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CellLimitData::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.CellLimitData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DateTime::DateTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.DateTime)
}

void DateTime::InitAsDefaultInstance() {
}

DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.DateTime)
}

void DateTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.DateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DateTime& DateTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

DateTime* DateTime::default_instance_ = NULL;

DateTime* DateTime::New() const {
  return new DateTime;
}

void DateTime::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.DateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.DateTime)
  return false;
#undef DO_
}

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.DateTime)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.DateTime)
}

int DateTime::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DateTime*>(&from));
}

void DateTime::MergeFrom(const DateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DateTime::CopyFrom(const DateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {

  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DateTime::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.DateTime";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetPlayerCharacterList::kPlayerIdFieldNumber;
const int RequestGetPlayerCharacterList::kCharatcerIdFieldNumber;
const int RequestGetPlayerCharacterList::kCharacterDataFieldNumber;
#endif  // !_MSC_VER

RequestGetPlayerCharacterList::RequestGetPlayerCharacterList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
}

void RequestGetPlayerCharacterList::InitAsDefaultInstance() {
}

RequestGetPlayerCharacterList::RequestGetPlayerCharacterList(const RequestGetPlayerCharacterList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
}

void RequestGetPlayerCharacterList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  charatcer_id_ = 0u;
  character_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPlayerCharacterList::~RequestGetPlayerCharacterList() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
  SharedDtor();
}

void RequestGetPlayerCharacterList::SharedDtor() {
  if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete character_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPlayerCharacterList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPlayerCharacterList& RequestGetPlayerCharacterList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPlayerCharacterList* RequestGetPlayerCharacterList::default_instance_ = NULL;

RequestGetPlayerCharacterList* RequestGetPlayerCharacterList::New() const {
  return new RequestGetPlayerCharacterList;
}

void RequestGetPlayerCharacterList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGetPlayerCharacterList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(player_id_, charatcer_id_);
    if (has_character_data()) {
      if (character_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        character_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPlayerCharacterList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charatcer_id;
        break;
      }

      // required uint32 charatcer_id = 2;
      case 2: {
        if (tag == 16) {
         parse_charatcer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charatcer_id_)));
          set_has_charatcer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_character_data;
        break;
      }

      // required bytes character_data = 3;
      case 3: {
        if (tag == 26) {
         parse_character_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_character_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
  return false;
#undef DO_
}

void RequestGetPlayerCharacterList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 charatcer_id = 2;
  if (has_charatcer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charatcer_id(), output);
  }

  // required bytes character_data = 3;
  if (has_character_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->character_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList)
}

int RequestGetPlayerCharacterList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 charatcer_id = 2;
    if (has_charatcer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charatcer_id());
    }

    // required bytes character_data = 3;
    if (has_character_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->character_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPlayerCharacterList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPlayerCharacterList*>(&from));
}

void RequestGetPlayerCharacterList::MergeFrom(const RequestGetPlayerCharacterList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_charatcer_id()) {
      set_charatcer_id(from.charatcer_id());
    }
    if (from.has_character_data()) {
      set_character_data(from.character_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPlayerCharacterList::CopyFrom(const RequestGetPlayerCharacterList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPlayerCharacterList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestGetPlayerCharacterList::Swap(RequestGetPlayerCharacterList* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(charatcer_id_, other->charatcer_id_);
    std::swap(character_data_, other->character_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPlayerCharacterList::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPlayerCharacterList";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGetPlayerCharacterListResponse::RequestGetPlayerCharacterListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
}

void RequestGetPlayerCharacterListResponse::InitAsDefaultInstance() {
}

RequestGetPlayerCharacterListResponse::RequestGetPlayerCharacterListResponse(const RequestGetPlayerCharacterListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
}

void RequestGetPlayerCharacterListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetPlayerCharacterListResponse::~RequestGetPlayerCharacterListResponse() {
  // @@protoc_insertion_point(destructor:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
  SharedDtor();
}

void RequestGetPlayerCharacterListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetPlayerCharacterListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetPlayerCharacterListResponse& RequestGetPlayerCharacterListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS2_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestGetPlayerCharacterListResponse* RequestGetPlayerCharacterListResponse::default_instance_ = NULL;

RequestGetPlayerCharacterListResponse* RequestGetPlayerCharacterListResponse::New() const {
  return new RequestGetPlayerCharacterListResponse;
}

void RequestGetPlayerCharacterListResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestGetPlayerCharacterListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
  return false;
#undef DO_
}

void RequestGetPlayerCharacterListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse)
}

int RequestGetPlayerCharacterListResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetPlayerCharacterListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetPlayerCharacterListResponse*>(&from));
}

void RequestGetPlayerCharacterListResponse::MergeFrom(const RequestGetPlayerCharacterListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestGetPlayerCharacterListResponse::CopyFrom(const RequestGetPlayerCharacterListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetPlayerCharacterListResponse::IsInitialized() const {

  return true;
}

void RequestGetPlayerCharacterListResponse::Swap(RequestGetPlayerCharacterListResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetPlayerCharacterListResponse::GetTypeName() const {
  return "DS2_Frpg2RequestMessage.RequestGetPlayerCharacterListResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DS2_Frpg2RequestMessage

// @@protoc_insertion_point(global_scope)
