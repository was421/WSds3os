// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS3_Frpg2PlayerData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DS3_Frpg2PlayerData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace DS3_Frpg2PlayerData {

void protobuf_ShutdownFile_DS3_5fFrpg2PlayerData_2eproto() {
  delete DateTime::default_instance_;
  delete UnknownStruct1::default_instance_;
  delete AllStatus::default_instance_;
  delete PlayerStatus::default_instance_;
  delete PlayData::default_instance_;
  delete LogInfo::default_instance_;
  delete StatsInfo::default_instance_;
  delete Equipment::default_instance_;
  delete PlayerLocation::default_instance_;
  delete DefenseInfo::default_instance_;
  delete CutRateInfo::default_instance_;
  delete ResistanceInfo::default_instance_;
  delete Vector::default_instance_;
  delete BonfireInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DateTime::default_instance_ = new DateTime();
  UnknownStruct1::default_instance_ = new UnknownStruct1();
  AllStatus::default_instance_ = new AllStatus();
  PlayerStatus::default_instance_ = new PlayerStatus();
  PlayData::default_instance_ = new PlayData();
  LogInfo::default_instance_ = new LogInfo();
  StatsInfo::default_instance_ = new StatsInfo();
  Equipment::default_instance_ = new Equipment();
  PlayerLocation::default_instance_ = new PlayerLocation();
  DefenseInfo::default_instance_ = new DefenseInfo();
  CutRateInfo::default_instance_ = new CutRateInfo();
  ResistanceInfo::default_instance_ = new ResistanceInfo();
  Vector::default_instance_ = new Vector();
  BonfireInfo::default_instance_ = new BonfireInfo();
  DateTime::default_instance_->InitAsDefaultInstance();
  UnknownStruct1::default_instance_->InitAsDefaultInstance();
  AllStatus::default_instance_->InitAsDefaultInstance();
  PlayerStatus::default_instance_->InitAsDefaultInstance();
  PlayData::default_instance_->InitAsDefaultInstance();
  LogInfo::default_instance_->InitAsDefaultInstance();
  StatsInfo::default_instance_->InitAsDefaultInstance();
  Equipment::default_instance_->InitAsDefaultInstance();
  PlayerLocation::default_instance_->InitAsDefaultInstance();
  DefenseInfo::default_instance_->InitAsDefaultInstance();
  CutRateInfo::default_instance_->InitAsDefaultInstance();
  ResistanceInfo::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  BonfireInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DS3_5fFrpg2PlayerData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto_once_);
void protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto_once_,
                 &protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DS3_5fFrpg2PlayerData_2eproto {
  StaticDescriptorInitializer_DS3_5fFrpg2PlayerData_2eproto() {
    protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
  }
} static_descriptor_initializer_DS3_5fFrpg2PlayerData_2eproto_;
#endif
bool InvasionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

bool WorldType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool NetMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DateTime::kYearFieldNumber;
const int DateTime::kMonthFieldNumber;
const int DateTime::kDayFieldNumber;
const int DateTime::kHoursFieldNumber;
const int DateTime::kMinutesFieldNumber;
const int DateTime::kSecondsFieldNumber;
const int DateTime::kTzdiffFieldNumber;
#endif  // !_MSC_VER

DateTime::DateTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.DateTime)
}

void DateTime::InitAsDefaultInstance() {
}

DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.DateTime)
}

void DateTime::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  hours_ = 0u;
  minutes_ = 0u;
  seconds_ = 0u;
  tzdiff_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.DateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DateTime& DateTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

DateTime* DateTime::default_instance_ = NULL;

DateTime* DateTime::New() const {
  return new DateTime;
}

void DateTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DateTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(year_, tzdiff_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.DateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // required uint32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // required uint32 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hours;
        break;
      }

      // required uint32 hours = 4;
      case 4: {
        if (tag == 32) {
         parse_hours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hours_)));
          set_has_hours();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minutes;
        break;
      }

      // required uint32 minutes = 5;
      case 5: {
        if (tag == 40) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minutes_)));
          set_has_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_seconds;
        break;
      }

      // required uint32 seconds = 6;
      case 6: {
        if (tag == 48) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tzdiff;
        break;
      }

      // required uint32 tzdiff = 7;
      case 7: {
        if (tag == 56) {
         parse_tzdiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tzdiff_)));
          set_has_tzdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.DateTime)
  return false;
#undef DO_
}

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.DateTime)
  // required uint32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // required uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // required uint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // required uint32 hours = 4;
  if (has_hours()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hours(), output);
  }

  // required uint32 minutes = 5;
  if (has_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minutes(), output);
  }

  // required uint32 seconds = 6;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seconds(), output);
  }

  // required uint32 tzdiff = 7;
  if (has_tzdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tzdiff(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.DateTime)
}

int DateTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // required uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // required uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 hours = 4;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hours());
    }

    // required uint32 minutes = 5;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minutes());
    }

    // required uint32 seconds = 6;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // required uint32 tzdiff = 7;
    if (has_tzdiff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tzdiff());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DateTime*>(&from));
}

void DateTime::MergeFrom(const DateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hours()) {
      set_hours(from.hours());
    }
    if (from.has_minutes()) {
      set_minutes(from.minutes());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_tzdiff()) {
      set_tzdiff(from.tzdiff());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DateTime::CopyFrom(const DateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hours_, other->hours_);
    std::swap(minutes_, other->minutes_);
    std::swap(seconds_, other->seconds_);
    std::swap(tzdiff_, other->tzdiff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DateTime::GetTypeName() const {
  return "DS3_Frpg2PlayerData.DateTime";
}


// ===================================================================

#ifndef _MSC_VER
const int UnknownStruct1::kUnknown1FieldNumber;
const int UnknownStruct1::kUnknown2FieldNumber;
const int UnknownStruct1::kUnknown3FieldNumber;
#endif  // !_MSC_VER

UnknownStruct1::UnknownStruct1()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.UnknownStruct1)
}

void UnknownStruct1::InitAsDefaultInstance() {
}

UnknownStruct1::UnknownStruct1(const UnknownStruct1& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.UnknownStruct1)
}

void UnknownStruct1::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unknown_1_ = GOOGLE_LONGLONG(0);
  unknown_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_3_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownStruct1::~UnknownStruct1() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.UnknownStruct1)
  SharedDtor();
}

void UnknownStruct1::SharedDtor() {
  if (unknown_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unknown_2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnknownStruct1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnknownStruct1& UnknownStruct1::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

UnknownStruct1* UnknownStruct1::default_instance_ = NULL;

UnknownStruct1* UnknownStruct1::New() const {
  return new UnknownStruct1;
}

void UnknownStruct1::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    unknown_1_ = GOOGLE_LONGLONG(0);
    if (has_unknown_2()) {
      if (unknown_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unknown_2_->clear();
      }
    }
    unknown_3_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UnknownStruct1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.UnknownStruct1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 unknown_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unknown_2;
        break;
      }

      // optional string unknown_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_unknown_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unknown_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_3;
        break;
      }

      // optional int64 unknown_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_3_)));
          set_has_unknown_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.UnknownStruct1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.UnknownStruct1)
  return false;
#undef DO_
}

void UnknownStruct1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.UnknownStruct1)
  // optional int64 unknown_1 = 1;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->unknown_1(), output);
  }

  // optional string unknown_2 = 2;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unknown_2(), output);
  }

  // optional int64 unknown_3 = 3;
  if (has_unknown_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->unknown_3(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.UnknownStruct1)
}

int UnknownStruct1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 unknown_1 = 1;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_1());
    }

    // optional string unknown_2 = 2;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unknown_2());
    }

    // optional int64 unknown_3 = 3;
    if (has_unknown_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_3());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownStruct1::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnknownStruct1*>(&from));
}

void UnknownStruct1::MergeFrom(const UnknownStruct1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_unknown_3()) {
      set_unknown_3(from.unknown_3());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UnknownStruct1::CopyFrom(const UnknownStruct1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownStruct1::IsInitialized() const {

  return true;
}

void UnknownStruct1::Swap(UnknownStruct1* other) {
  if (other != this) {
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(unknown_3_, other->unknown_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnknownStruct1::GetTypeName() const {
  return "DS3_Frpg2PlayerData.UnknownStruct1";
}


// ===================================================================

#ifndef _MSC_VER
const int AllStatus::kPlayerLocationFieldNumber;
const int AllStatus::kLogInfoFieldNumber;
const int AllStatus::kPlayerStatusFieldNumber;
const int AllStatus::kPlayDataFieldNumber;
const int AllStatus::kStatsInfoFieldNumber;
const int AllStatus::kEquipmentFieldNumber;
const int AllStatus::kUnknown1FieldNumber;
#endif  // !_MSC_VER

AllStatus::AllStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.AllStatus)
}

void AllStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_location_ = const_cast< ::DS3_Frpg2PlayerData::PlayerLocation*>(
      ::DS3_Frpg2PlayerData::PlayerLocation::internal_default_instance());
#else
  player_location_ = const_cast< ::DS3_Frpg2PlayerData::PlayerLocation*>(&::DS3_Frpg2PlayerData::PlayerLocation::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  log_info_ = const_cast< ::DS3_Frpg2PlayerData::LogInfo*>(
      ::DS3_Frpg2PlayerData::LogInfo::internal_default_instance());
#else
  log_info_ = const_cast< ::DS3_Frpg2PlayerData::LogInfo*>(&::DS3_Frpg2PlayerData::LogInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_status_ = const_cast< ::DS3_Frpg2PlayerData::PlayerStatus*>(
      ::DS3_Frpg2PlayerData::PlayerStatus::internal_default_instance());
#else
  player_status_ = const_cast< ::DS3_Frpg2PlayerData::PlayerStatus*>(&::DS3_Frpg2PlayerData::PlayerStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  play_data_ = const_cast< ::DS3_Frpg2PlayerData::PlayData*>(
      ::DS3_Frpg2PlayerData::PlayData::internal_default_instance());
#else
  play_data_ = const_cast< ::DS3_Frpg2PlayerData::PlayData*>(&::DS3_Frpg2PlayerData::PlayData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_info_ = const_cast< ::DS3_Frpg2PlayerData::StatsInfo*>(
      ::DS3_Frpg2PlayerData::StatsInfo::internal_default_instance());
#else
  stats_info_ = const_cast< ::DS3_Frpg2PlayerData::StatsInfo*>(&::DS3_Frpg2PlayerData::StatsInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipment_ = const_cast< ::DS3_Frpg2PlayerData::Equipment*>(
      ::DS3_Frpg2PlayerData::Equipment::internal_default_instance());
#else
  equipment_ = const_cast< ::DS3_Frpg2PlayerData::Equipment*>(&::DS3_Frpg2PlayerData::Equipment::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  unknown_1_ = const_cast< ::DS3_Frpg2PlayerData::UnknownStruct1*>(
      ::DS3_Frpg2PlayerData::UnknownStruct1::internal_default_instance());
#else
  unknown_1_ = const_cast< ::DS3_Frpg2PlayerData::UnknownStruct1*>(&::DS3_Frpg2PlayerData::UnknownStruct1::default_instance());
#endif
}

AllStatus::AllStatus(const AllStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.AllStatus)
}

void AllStatus::SharedCtor() {
  _cached_size_ = 0;
  player_location_ = NULL;
  log_info_ = NULL;
  player_status_ = NULL;
  play_data_ = NULL;
  stats_info_ = NULL;
  equipment_ = NULL;
  unknown_1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllStatus::~AllStatus() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.AllStatus)
  SharedDtor();
}

void AllStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_location_;
    delete log_info_;
    delete player_status_;
    delete play_data_;
    delete stats_info_;
    delete equipment_;
    delete unknown_1_;
  }
}

void AllStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AllStatus& AllStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

AllStatus* AllStatus::default_instance_ = NULL;

AllStatus* AllStatus::New() const {
  return new AllStatus;
}

void AllStatus::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_player_location()) {
      if (player_location_ != NULL) player_location_->::DS3_Frpg2PlayerData::PlayerLocation::Clear();
    }
    if (has_log_info()) {
      if (log_info_ != NULL) log_info_->::DS3_Frpg2PlayerData::LogInfo::Clear();
    }
    if (has_player_status()) {
      if (player_status_ != NULL) player_status_->::DS3_Frpg2PlayerData::PlayerStatus::Clear();
    }
    if (has_play_data()) {
      if (play_data_ != NULL) play_data_->::DS3_Frpg2PlayerData::PlayData::Clear();
    }
    if (has_stats_info()) {
      if (stats_info_ != NULL) stats_info_->::DS3_Frpg2PlayerData::StatsInfo::Clear();
    }
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::DS3_Frpg2PlayerData::Equipment::Clear();
    }
    if (has_unknown_1()) {
      if (unknown_1_ != NULL) unknown_1_->::DS3_Frpg2PlayerData::UnknownStruct1::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AllStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.AllStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DS3_Frpg2PlayerData.PlayerLocation player_location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_log_info;
        break;
      }

      // optional .DS3_Frpg2PlayerData.LogInfo log_info = 2;
      case 2: {
        if (tag == 18) {
         parse_log_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_status;
        break;
      }

      // optional .DS3_Frpg2PlayerData.PlayerStatus player_status = 3;
      case 3: {
        if (tag == 26) {
         parse_player_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_play_data;
        break;
      }

      // optional .DS3_Frpg2PlayerData.PlayData play_data = 4;
      case 4: {
        if (tag == 34) {
         parse_play_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stats_info;
        break;
      }

      // optional .DS3_Frpg2PlayerData.StatsInfo stats_info = 5;
      case 5: {
        if (tag == 42) {
         parse_stats_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_equipment;
        break;
      }

      // optional .DS3_Frpg2PlayerData.Equipment equipment = 6;
      case 6: {
        if (tag == 50) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_unknown_1;
        break;
      }

      // optional .DS3_Frpg2PlayerData.UnknownStruct1 unknown_1 = 7;
      case 7: {
        if (tag == 58) {
         parse_unknown_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.AllStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.AllStatus)
  return false;
#undef DO_
}

void AllStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.AllStatus)
  // optional .DS3_Frpg2PlayerData.PlayerLocation player_location = 1;
  if (has_player_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->player_location(), output);
  }

  // optional .DS3_Frpg2PlayerData.LogInfo log_info = 2;
  if (has_log_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->log_info(), output);
  }

  // optional .DS3_Frpg2PlayerData.PlayerStatus player_status = 3;
  if (has_player_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->player_status(), output);
  }

  // optional .DS3_Frpg2PlayerData.PlayData play_data = 4;
  if (has_play_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->play_data(), output);
  }

  // optional .DS3_Frpg2PlayerData.StatsInfo stats_info = 5;
  if (has_stats_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->stats_info(), output);
  }

  // optional .DS3_Frpg2PlayerData.Equipment equipment = 6;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->equipment(), output);
  }

  // optional .DS3_Frpg2PlayerData.UnknownStruct1 unknown_1 = 7;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->unknown_1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.AllStatus)
}

int AllStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DS3_Frpg2PlayerData.PlayerLocation player_location = 1;
    if (has_player_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_location());
    }

    // optional .DS3_Frpg2PlayerData.LogInfo log_info = 2;
    if (has_log_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_info());
    }

    // optional .DS3_Frpg2PlayerData.PlayerStatus player_status = 3;
    if (has_player_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_status());
    }

    // optional .DS3_Frpg2PlayerData.PlayData play_data = 4;
    if (has_play_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_data());
    }

    // optional .DS3_Frpg2PlayerData.StatsInfo stats_info = 5;
    if (has_stats_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_info());
    }

    // optional .DS3_Frpg2PlayerData.Equipment equipment = 6;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // optional .DS3_Frpg2PlayerData.UnknownStruct1 unknown_1 = 7;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknown_1());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllStatus*>(&from));
}

void AllStatus::MergeFrom(const AllStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_location()) {
      mutable_player_location()->::DS3_Frpg2PlayerData::PlayerLocation::MergeFrom(from.player_location());
    }
    if (from.has_log_info()) {
      mutable_log_info()->::DS3_Frpg2PlayerData::LogInfo::MergeFrom(from.log_info());
    }
    if (from.has_player_status()) {
      mutable_player_status()->::DS3_Frpg2PlayerData::PlayerStatus::MergeFrom(from.player_status());
    }
    if (from.has_play_data()) {
      mutable_play_data()->::DS3_Frpg2PlayerData::PlayData::MergeFrom(from.play_data());
    }
    if (from.has_stats_info()) {
      mutable_stats_info()->::DS3_Frpg2PlayerData::StatsInfo::MergeFrom(from.stats_info());
    }
    if (from.has_equipment()) {
      mutable_equipment()->::DS3_Frpg2PlayerData::Equipment::MergeFrom(from.equipment());
    }
    if (from.has_unknown_1()) {
      mutable_unknown_1()->::DS3_Frpg2PlayerData::UnknownStruct1::MergeFrom(from.unknown_1());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AllStatus::CopyFrom(const AllStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllStatus::IsInitialized() const {

  if (has_play_data()) {
    if (!this->play_data().IsInitialized()) return false;
  }
  if (has_stats_info()) {
    if (!this->stats_info().IsInitialized()) return false;
  }
  return true;
}

void AllStatus::Swap(AllStatus* other) {
  if (other != this) {
    std::swap(player_location_, other->player_location_);
    std::swap(log_info_, other->log_info_);
    std::swap(player_status_, other->player_status_);
    std::swap(play_data_, other->play_data_);
    std::swap(stats_info_, other->stats_info_);
    std::swap(equipment_, other->equipment_);
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AllStatus::GetTypeName() const {
  return "DS3_Frpg2PlayerData.AllStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStatus::kRegulationVersionFieldNumber;
const int PlayerStatus::kUnknown2FieldNumber;
const int PlayerStatus::kCrossRegionMatchmakingDisabledFieldNumber;
const int PlayerStatus::kSoulLevelFieldNumber;
const int PlayerStatus::kSinnerPointsFieldNumber;
const int PlayerStatus::kUnknown6FieldNumber;
const int PlayerStatus::kIsInvadableFieldNumber;
const int PlayerStatus::kCanSummonForWayOfBlueFieldNumber;
const int PlayerStatus::kUnknown9FieldNumber;
const int PlayerStatus::kCanSummonForWatchdogOfFarronFieldNumber;
const int PlayerStatus::kCanSummonForAldritchFaithfulFieldNumber;
const int PlayerStatus::kCanSummonForSpearOfChurchFieldNumber;
const int PlayerStatus::kUnknown13FieldNumber;
const int PlayerStatus::kUnknown14FieldNumber;
const int PlayerStatus::kWorldTypeFieldNumber;
const int PlayerStatus::kCovenantFieldNumber;
const int PlayerStatus::kPlayedAreasFieldNumber;
const int PlayerStatus::kUnknown18FieldNumber;
const int PlayerStatus::kEmberedFieldNumber;
const int PlayerStatus::kSoulsFieldNumber;
const int PlayerStatus::kSoulMemoryFieldNumber;
const int PlayerStatus::kArchetypeFieldNumber;
const int PlayerStatus::kHpFieldNumber;
const int PlayerStatus::kMaxHpFieldNumber;
const int PlayerStatus::kBaseMaxHpFieldNumber;
const int PlayerStatus::kFpFieldNumber;
const int PlayerStatus::kMaxFpFieldNumber;
const int PlayerStatus::kBaseMaxFpFieldNumber;
const int PlayerStatus::kStaminaFieldNumber;
const int PlayerStatus::kMaxStaminaFieldNumber;
const int PlayerStatus::kBaseMaxStaminaFieldNumber;
const int PlayerStatus::kUnknown32FieldNumber;
const int PlayerStatus::kUnknown33FieldNumber;
const int PlayerStatus::kNetModeFieldNumber;
const int PlayerStatus::kDriedFingersActiveFieldNumber;
const int PlayerStatus::kInvasionTypeFieldNumber;
const int PlayerStatus::kCharacterIdFieldNumber;
const int PlayerStatus::kNameFieldNumber;
const int PlayerStatus::kIsMaleFieldNumber;
const int PlayerStatus::kVigorFieldNumber;
const int PlayerStatus::kAttunementFieldNumber;
const int PlayerStatus::kEnduranceFieldNumber;
const int PlayerStatus::kVitalityFieldNumber;
const int PlayerStatus::kStrengthFieldNumber;
const int PlayerStatus::kDexterityFieldNumber;
const int PlayerStatus::kIntelligenceFieldNumber;
const int PlayerStatus::kFaithFieldNumber;
const int PlayerStatus::kLuckFieldNumber;
const int PlayerStatus::kEquipLoadFieldNumber;
const int PlayerStatus::kOneMinusPoiseFractionFieldNumber;
const int PlayerStatus::kItemDiscoveryFieldNumber;
const int PlayerStatus::kAttackPowerRWeapon1FieldNumber;
const int PlayerStatus::kAttackPowerRWeapon2FieldNumber;
const int PlayerStatus::kAttackPowerRWeapon3FieldNumber;
const int PlayerStatus::kAttackPowerLWeapon1FieldNumber;
const int PlayerStatus::kAttackPowerLWeapon2FieldNumber;
const int PlayerStatus::kAttackPowerLWeapon3FieldNumber;
const int PlayerStatus::kDefenseInfoFieldNumber;
const int PlayerStatus::kCutrateInfoFieldNumber;
const int PlayerStatus::kArmorResistanceInfoFieldNumber;
const int PlayerStatus::kBaseResistanceInfoFieldNumber;
const int PlayerStatus::kAnticheatDataFieldNumber;
const int PlayerStatus::kUnknown63FieldNumber;
const int PlayerStatus::kEstusFlaskMaxFieldNumber;
const int PlayerStatus::kAshenEstusFlaskMaxFieldNumber;
const int PlayerStatus::kMaxEquipLoadFieldNumber;
const int PlayerStatus::kBladeOfTheDarkmoonOfferingsFieldNumber;
const int PlayerStatus::kWarriorOfSunlightOfferingsFieldNumber;
const int PlayerStatus::kMoundMakersOfferingsFieldNumber;
const int PlayerStatus::kRosariasFingersOfferingsFieldNumber;
const int PlayerStatus::kWatchdogsOfFarronOfferingsFieldNumber;
const int PlayerStatus::kAldrichFaithfulOfferingsFieldNumber;
const int PlayerStatus::kSoloBreakinPointFieldNumber;
const int PlayerStatus::kMaxWeaponLevelFieldNumber;
const int PlayerStatus::kUnknown75FieldNumber;
const int PlayerStatus::kUnknown76FieldNumber;
const int PlayerStatus::kSpearsOfTheChurchOfferingsFieldNumber;
const int PlayerStatus::kUnknown78FieldNumber;
const int PlayerStatus::kUnknown79FieldNumber;
const int PlayerStatus::kUnknown80FieldNumber;
#endif  // !_MSC_VER

PlayerStatus::PlayerStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.PlayerStatus)
}

void PlayerStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  defense_info_ = const_cast< ::DS3_Frpg2PlayerData::DefenseInfo*>(
      ::DS3_Frpg2PlayerData::DefenseInfo::internal_default_instance());
#else
  defense_info_ = const_cast< ::DS3_Frpg2PlayerData::DefenseInfo*>(&::DS3_Frpg2PlayerData::DefenseInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cutrate_info_ = const_cast< ::DS3_Frpg2PlayerData::CutRateInfo*>(
      ::DS3_Frpg2PlayerData::CutRateInfo::internal_default_instance());
#else
  cutrate_info_ = const_cast< ::DS3_Frpg2PlayerData::CutRateInfo*>(&::DS3_Frpg2PlayerData::CutRateInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  armor_resistance_info_ = const_cast< ::DS3_Frpg2PlayerData::ResistanceInfo*>(
      ::DS3_Frpg2PlayerData::ResistanceInfo::internal_default_instance());
#else
  armor_resistance_info_ = const_cast< ::DS3_Frpg2PlayerData::ResistanceInfo*>(&::DS3_Frpg2PlayerData::ResistanceInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  base_resistance_info_ = const_cast< ::DS3_Frpg2PlayerData::ResistanceInfo*>(
      ::DS3_Frpg2PlayerData::ResistanceInfo::internal_default_instance());
#else
  base_resistance_info_ = const_cast< ::DS3_Frpg2PlayerData::ResistanceInfo*>(&::DS3_Frpg2PlayerData::ResistanceInfo::default_instance());
#endif
}

PlayerStatus::PlayerStatus(const PlayerStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.PlayerStatus)
}

void PlayerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  regulation_version_ = 0u;
  unknown_2_ = 0u;
  cross_region_matchmaking_disabled_ = false;
  soul_level_ = 0;
  sinner_points_ = 0u;
  unknown_6_ = 0u;
  is_invadable_ = 0u;
  can_summon_for_way_of_blue_ = 0u;
  unknown_9_ = 0u;
  can_summon_for_watchdog_of_farron_ = 0u;
  can_summon_for_aldritch_faithful_ = 0u;
  can_summon_for_spear_of_church_ = 0u;
  unknown_13_ = 0u;
  unknown_14_ = 0u;
  world_type_ = 0;
  covenant_ = 0u;
  embered_ = 0u;
  souls_ = 0u;
  soul_memory_ = 0u;
  archetype_ = 0u;
  hp_ = 0;
  max_hp_ = 0;
  base_max_hp_ = 0;
  fp_ = 0;
  max_fp_ = 0;
  base_max_fp_ = 0;
  stamina_ = 0;
  max_stamina_ = 0;
  base_max_stamina_ = 0;
  unknown_32_ = 0u;
  unknown_33_ = 0u;
  net_mode_ = 0;
  dried_fingers_active_ = 0u;
  invasion_type_ = 0;
  character_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_male_ = false;
  vigor_ = 0;
  attunement_ = 0;
  endurance_ = 0;
  vitality_ = 0;
  strength_ = 0;
  dexterity_ = 0;
  intelligence_ = 0;
  faith_ = 0;
  luck_ = 0;
  equip_load_ = 0;
  one_minus_poise_fraction_ = 0;
  item_discovery_ = 0;
  attack_power_r_weapon_1_ = 0;
  attack_power_r_weapon_2_ = 0;
  attack_power_r_weapon_3_ = 0;
  attack_power_l_weapon_1_ = 0;
  attack_power_l_weapon_2_ = 0;
  attack_power_l_weapon_3_ = 0;
  defense_info_ = NULL;
  cutrate_info_ = NULL;
  armor_resistance_info_ = NULL;
  base_resistance_info_ = NULL;
  unknown_63_ = 0;
  estus_flask_max_ = 0;
  ashen_estus_flask_max_ = 0;
  max_equip_load_ = 0;
  blade_of_the_darkmoon_offerings_ = 0;
  warrior_of_sunlight_offerings_ = 0;
  mound_makers_offerings_ = 0;
  rosarias_fingers_offerings_ = 0;
  watchdogs_of_farron_offerings_ = 0;
  aldrich_faithful_offerings_ = 0;
  solo_breakin_point_ = 0;
  max_weapon_level_ = 0;
  unknown_75_ = 0;
  unknown_76_ = 0;
  spears_of_the_church_offerings_ = 0;
  unknown_78_ = 0;
  unknown_79_ = 0;
  unknown_80_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStatus::~PlayerStatus() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.PlayerStatus)
  SharedDtor();
}

void PlayerStatus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete defense_info_;
    delete cutrate_info_;
    delete armor_resistance_info_;
    delete base_resistance_info_;
  }
}

void PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerStatus& PlayerStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PlayerStatus* PlayerStatus::default_instance_ = NULL;

PlayerStatus* PlayerStatus::New() const {
  return new PlayerStatus;
}

void PlayerStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(regulation_version_, can_summon_for_way_of_blue_);
    cross_region_matchmaking_disabled_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(unknown_9_, world_type_);
    covenant_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16515072) {
    ZR_(souls_, soul_memory_);
    ZR_(archetype_, max_hp_);
    embered_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(base_max_hp_, unknown_32_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(unknown_33_, invasion_type_);
    ZR_(character_id_, vigor_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    is_male_ = false;
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(attunement_, luck_);
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(equip_load_, attack_power_l_weapon_2_);
  }
  if (_has_bits_[56 / 32] & 3741319168) {
    ZR_(attack_power_l_weapon_3_, unknown_63_);
    if (has_defense_info()) {
      if (defense_info_ != NULL) defense_info_->::DS3_Frpg2PlayerData::DefenseInfo::Clear();
    }
    if (has_cutrate_info()) {
      if (cutrate_info_ != NULL) cutrate_info_->::DS3_Frpg2PlayerData::CutRateInfo::Clear();
    }
    if (has_armor_resistance_info()) {
      if (armor_resistance_info_ != NULL) armor_resistance_info_->::DS3_Frpg2PlayerData::ResistanceInfo::Clear();
    }
    if (has_base_resistance_info()) {
      if (base_resistance_info_ != NULL) base_resistance_info_->::DS3_Frpg2PlayerData::ResistanceInfo::Clear();
    }
    estus_flask_max_ = 0;
  }
  if (_has_bits_[64 / 32] & 255) {
    ZR_(ashen_estus_flask_max_, aldrich_faithful_offerings_);
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(solo_breakin_point_, unknown_80_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  played_areas_.Clear();
  unknown_18_.Clear();
  anticheat_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.PlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 regulation_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regulation_version_)));
          set_has_regulation_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_2;
        break;
      }

      // optional uint32 unknown_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cross_region_matchmaking_disabled;
        break;
      }

      // optional bool cross_region_matchmaking_disabled = 3;
      case 3: {
        if (tag == 24) {
         parse_cross_region_matchmaking_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_region_matchmaking_disabled_)));
          set_has_cross_region_matchmaking_disabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_soul_level;
        break;
      }

      // optional int32 soul_level = 4;
      case 4: {
        if (tag == 32) {
         parse_soul_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_level_)));
          set_has_soul_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sinner_points;
        break;
      }

      // optional uint32 sinner_points = 5;
      case 5: {
        if (tag == 40) {
         parse_sinner_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sinner_points_)));
          set_has_sinner_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unknown_6;
        break;
      }

      // optional uint32 unknown_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_unknown_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_6_)));
          set_has_unknown_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_invadable;
        break;
      }

      // optional uint32 is_invadable = 7;
      case 7: {
        if (tag == 56) {
         parse_is_invadable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_invadable_)));
          set_has_is_invadable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_can_summon_for_way_of_blue;
        break;
      }

      // optional uint32 can_summon_for_way_of_blue = 8;
      case 8: {
        if (tag == 64) {
         parse_can_summon_for_way_of_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_summon_for_way_of_blue_)));
          set_has_can_summon_for_way_of_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_unknown_9;
        break;
      }

      // optional uint32 unknown_9 = 9;
      case 9: {
        if (tag == 72) {
         parse_unknown_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_9_)));
          set_has_unknown_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_can_summon_for_watchdog_of_farron;
        break;
      }

      // optional uint32 can_summon_for_watchdog_of_farron = 10;
      case 10: {
        if (tag == 80) {
         parse_can_summon_for_watchdog_of_farron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_summon_for_watchdog_of_farron_)));
          set_has_can_summon_for_watchdog_of_farron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_can_summon_for_aldritch_faithful;
        break;
      }

      // optional uint32 can_summon_for_aldritch_faithful = 11;
      case 11: {
        if (tag == 88) {
         parse_can_summon_for_aldritch_faithful:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_summon_for_aldritch_faithful_)));
          set_has_can_summon_for_aldritch_faithful();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_can_summon_for_spear_of_church;
        break;
      }

      // optional uint32 can_summon_for_spear_of_church = 12;
      case 12: {
        if (tag == 96) {
         parse_can_summon_for_spear_of_church:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_summon_for_spear_of_church_)));
          set_has_can_summon_for_spear_of_church();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_unknown_13;
        break;
      }

      // optional uint32 unknown_13 = 13;
      case 13: {
        if (tag == 104) {
         parse_unknown_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_13_)));
          set_has_unknown_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unknown_14;
        break;
      }

      // optional uint32 unknown_14 = 14;
      case 14: {
        if (tag == 112) {
         parse_unknown_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_14_)));
          set_has_unknown_14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_world_type;
        break;
      }

      // optional .DS3_Frpg2PlayerData.WorldType world_type = 15;
      case 15: {
        if (tag == 120) {
         parse_world_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS3_Frpg2PlayerData::WorldType_IsValid(value)) {
            set_world_type(static_cast< ::DS3_Frpg2PlayerData::WorldType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_covenant;
        break;
      }

      // optional uint32 covenant = 16;
      case 16: {
        if (tag == 128) {
         parse_covenant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &covenant_)));
          set_has_covenant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_played_areas;
        break;
      }

      // repeated uint32 played_areas = 17;
      case 17: {
        if (tag == 136) {
         parse_played_areas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_played_areas())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_played_areas())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_played_areas;
        if (input->ExpectTag(144)) goto parse_unknown_18;
        break;
      }

      // repeated uint32 unknown_18 = 18;
      case 18: {
        if (tag == 144) {
         parse_unknown_18:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_unknown_18())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_18())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_unknown_18;
        if (input->ExpectTag(152)) goto parse_embered;
        break;
      }

      // optional uint32 embered = 19;
      case 19: {
        if (tag == 152) {
         parse_embered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &embered_)));
          set_has_embered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_souls;
        break;
      }

      // optional uint32 souls = 20;
      case 20: {
        if (tag == 160) {
         parse_souls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &souls_)));
          set_has_souls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_soul_memory;
        break;
      }

      // optional uint32 soul_memory = 21;
      case 21: {
        if (tag == 168) {
         parse_soul_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_memory_)));
          set_has_soul_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_archetype;
        break;
      }

      // optional uint32 archetype = 22;
      case 22: {
        if (tag == 176) {
         parse_archetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &archetype_)));
          set_has_archetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_hp;
        break;
      }

      // optional int32 hp = 23;
      case 23: {
        if (tag == 184) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_max_hp;
        break;
      }

      // optional int32 max_hp = 24;
      case 24: {
        if (tag == 192) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_base_max_hp;
        break;
      }

      // optional int32 base_max_hp = 25;
      case 25: {
        if (tag == 200) {
         parse_base_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_max_hp_)));
          set_has_base_max_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_fp;
        break;
      }

      // optional int32 fp = 26;
      case 26: {
        if (tag == 208) {
         parse_fp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fp_)));
          set_has_fp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_max_fp;
        break;
      }

      // optional int32 max_fp = 27;
      case 27: {
        if (tag == 216) {
         parse_max_fp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_fp_)));
          set_has_max_fp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_base_max_fp;
        break;
      }

      // optional int32 base_max_fp = 28;
      case 28: {
        if (tag == 224) {
         parse_base_max_fp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_max_fp_)));
          set_has_base_max_fp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 29;
      case 29: {
        if (tag == 232) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_max_stamina;
        break;
      }

      // optional int32 max_stamina = 30;
      case 30: {
        if (tag == 240) {
         parse_max_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_stamina_)));
          set_has_max_stamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_base_max_stamina;
        break;
      }

      // optional int32 base_max_stamina = 31;
      case 31: {
        if (tag == 248) {
         parse_base_max_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_max_stamina_)));
          set_has_base_max_stamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_unknown_32;
        break;
      }

      // optional uint32 unknown_32 = 32;
      case 32: {
        if (tag == 256) {
         parse_unknown_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_32_)));
          set_has_unknown_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_unknown_33;
        break;
      }

      // optional uint32 unknown_33 = 33;
      case 33: {
        if (tag == 264) {
         parse_unknown_33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_33_)));
          set_has_unknown_33();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_net_mode;
        break;
      }

      // optional .DS3_Frpg2PlayerData.NetMode net_mode = 34;
      case 34: {
        if (tag == 272) {
         parse_net_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS3_Frpg2PlayerData::NetMode_IsValid(value)) {
            set_net_mode(static_cast< ::DS3_Frpg2PlayerData::NetMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_dried_fingers_active;
        break;
      }

      // optional uint32 dried_fingers_active = 35;
      case 35: {
        if (tag == 280) {
         parse_dried_fingers_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dried_fingers_active_)));
          set_has_dried_fingers_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_invasion_type;
        break;
      }

      // optional .DS3_Frpg2PlayerData.InvasionType invasion_type = 36;
      case 36: {
        if (tag == 288) {
         parse_invasion_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DS3_Frpg2PlayerData::InvasionType_IsValid(value)) {
            set_invasion_type(static_cast< ::DS3_Frpg2PlayerData::InvasionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_character_id;
        break;
      }

      // optional uint32 character_id = 37;
      case 37: {
        if (tag == 296) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_name;
        break;
      }

      // optional string name = 38;
      case 38: {
        if (tag == 306) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_is_male;
        break;
      }

      // optional bool is_male = 39;
      case 39: {
        if (tag == 312) {
         parse_is_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_male_)));
          set_has_is_male();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_vigor;
        break;
      }

      // optional int32 vigor = 40;
      case 40: {
        if (tag == 320) {
         parse_vigor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vigor_)));
          set_has_vigor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_attunement;
        break;
      }

      // optional int32 attunement = 41;
      case 41: {
        if (tag == 328) {
         parse_attunement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attunement_)));
          set_has_attunement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_endurance;
        break;
      }

      // optional int32 endurance = 42;
      case 42: {
        if (tag == 336) {
         parse_endurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endurance_)));
          set_has_endurance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_vitality;
        break;
      }

      // optional int32 vitality = 43;
      case 43: {
        if (tag == 344) {
         parse_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vitality_)));
          set_has_vitality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_strength;
        break;
      }

      // optional int32 strength = 44;
      case 44: {
        if (tag == 352) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_dexterity;
        break;
      }

      // optional int32 dexterity = 45;
      case 45: {
        if (tag == 360) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_intelligence;
        break;
      }

      // optional int32 intelligence = 46;
      case 46: {
        if (tag == 368) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_faith;
        break;
      }

      // optional int32 faith = 47;
      case 47: {
        if (tag == 376) {
         parse_faith:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faith_)));
          set_has_faith();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_luck;
        break;
      }

      // optional int32 luck = 48;
      case 48: {
        if (tag == 384) {
         parse_luck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luck_)));
          set_has_luck();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(397)) goto parse_equip_load;
        break;
      }

      // optional float equip_load = 49;
      case 49: {
        if (tag == 397) {
         parse_equip_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &equip_load_)));
          set_has_equip_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(405)) goto parse_one_minus_poise_fraction;
        break;
      }

      // optional float one_minus_poise_fraction = 50;
      case 50: {
        if (tag == 405) {
         parse_one_minus_poise_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &one_minus_poise_fraction_)));
          set_has_one_minus_poise_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_item_discovery;
        break;
      }

      // optional int32 item_discovery = 51;
      case 51: {
        if (tag == 408) {
         parse_item_discovery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_discovery_)));
          set_has_item_discovery();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_attack_power_r_weapon_1;
        break;
      }

      // optional int32 attack_power_r_weapon_1 = 52;
      case 52: {
        if (tag == 416) {
         parse_attack_power_r_weapon_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_power_r_weapon_1_)));
          set_has_attack_power_r_weapon_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_attack_power_r_weapon_2;
        break;
      }

      // optional int32 attack_power_r_weapon_2 = 53;
      case 53: {
        if (tag == 424) {
         parse_attack_power_r_weapon_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_power_r_weapon_2_)));
          set_has_attack_power_r_weapon_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_attack_power_r_weapon_3;
        break;
      }

      // optional int32 attack_power_r_weapon_3 = 54;
      case 54: {
        if (tag == 432) {
         parse_attack_power_r_weapon_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_power_r_weapon_3_)));
          set_has_attack_power_r_weapon_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_attack_power_l_weapon_1;
        break;
      }

      // optional int32 attack_power_l_weapon_1 = 55;
      case 55: {
        if (tag == 440) {
         parse_attack_power_l_weapon_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_power_l_weapon_1_)));
          set_has_attack_power_l_weapon_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_attack_power_l_weapon_2;
        break;
      }

      // optional int32 attack_power_l_weapon_2 = 56;
      case 56: {
        if (tag == 448) {
         parse_attack_power_l_weapon_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_power_l_weapon_2_)));
          set_has_attack_power_l_weapon_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_attack_power_l_weapon_3;
        break;
      }

      // optional int32 attack_power_l_weapon_3 = 57;
      case 57: {
        if (tag == 456) {
         parse_attack_power_l_weapon_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_power_l_weapon_3_)));
          set_has_attack_power_l_weapon_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_defense_info;
        break;
      }

      // optional .DS3_Frpg2PlayerData.DefenseInfo defense_info = 58;
      case 58: {
        if (tag == 466) {
         parse_defense_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defense_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_cutrate_info;
        break;
      }

      // optional .DS3_Frpg2PlayerData.CutRateInfo cutrate_info = 59;
      case 59: {
        if (tag == 474) {
         parse_cutrate_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutrate_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_armor_resistance_info;
        break;
      }

      // optional .DS3_Frpg2PlayerData.ResistanceInfo armor_resistance_info = 60;
      case 60: {
        if (tag == 482) {
         parse_armor_resistance_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor_resistance_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_base_resistance_info;
        break;
      }

      // optional .DS3_Frpg2PlayerData.ResistanceInfo base_resistance_info = 61;
      case 61: {
        if (tag == 490) {
         parse_base_resistance_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_resistance_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_anticheat_data;
        break;
      }

      // repeated int32 anticheat_data = 62;
      case 62: {
        if (tag == 496) {
         parse_anticheat_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 496, input, this->mutable_anticheat_data())));
        } else if (tag == 498) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_anticheat_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_anticheat_data;
        if (input->ExpectTag(504)) goto parse_unknown_63;
        break;
      }

      // optional int32 unknown_63 = 63;
      case 63: {
        if (tag == 504) {
         parse_unknown_63:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_63_)));
          set_has_unknown_63();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_estus_flask_max;
        break;
      }

      // optional int32 estus_flask_max = 64;
      case 64: {
        if (tag == 512) {
         parse_estus_flask_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estus_flask_max_)));
          set_has_estus_flask_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_ashen_estus_flask_max;
        break;
      }

      // optional int32 ashen_estus_flask_max = 65;
      case 65: {
        if (tag == 520) {
         parse_ashen_estus_flask_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ashen_estus_flask_max_)));
          set_has_ashen_estus_flask_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(533)) goto parse_max_equip_load;
        break;
      }

      // optional float max_equip_load = 66;
      case 66: {
        if (tag == 533) {
         parse_max_equip_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_equip_load_)));
          set_has_max_equip_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_blade_of_the_darkmoon_offerings;
        break;
      }

      // optional int32 blade_of_the_darkmoon_offerings = 67;
      case 67: {
        if (tag == 536) {
         parse_blade_of_the_darkmoon_offerings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blade_of_the_darkmoon_offerings_)));
          set_has_blade_of_the_darkmoon_offerings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_warrior_of_sunlight_offerings;
        break;
      }

      // optional int32 warrior_of_sunlight_offerings = 68;
      case 68: {
        if (tag == 544) {
         parse_warrior_of_sunlight_offerings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warrior_of_sunlight_offerings_)));
          set_has_warrior_of_sunlight_offerings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_mound_makers_offerings;
        break;
      }

      // optional int32 mound_makers_offerings = 69;
      case 69: {
        if (tag == 552) {
         parse_mound_makers_offerings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mound_makers_offerings_)));
          set_has_mound_makers_offerings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_rosarias_fingers_offerings;
        break;
      }

      // optional int32 rosarias_fingers_offerings = 70;
      case 70: {
        if (tag == 560) {
         parse_rosarias_fingers_offerings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rosarias_fingers_offerings_)));
          set_has_rosarias_fingers_offerings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_watchdogs_of_farron_offerings;
        break;
      }

      // optional int32 watchdogs_of_farron_offerings = 71;
      case 71: {
        if (tag == 568) {
         parse_watchdogs_of_farron_offerings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdogs_of_farron_offerings_)));
          set_has_watchdogs_of_farron_offerings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_aldrich_faithful_offerings;
        break;
      }

      // optional int32 aldrich_faithful_offerings = 72;
      case 72: {
        if (tag == 576) {
         parse_aldrich_faithful_offerings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aldrich_faithful_offerings_)));
          set_has_aldrich_faithful_offerings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_solo_breakin_point;
        break;
      }

      // optional int32 solo_breakin_point = 73;
      case 73: {
        if (tag == 584) {
         parse_solo_breakin_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solo_breakin_point_)));
          set_has_solo_breakin_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_max_weapon_level;
        break;
      }

      // optional int32 max_weapon_level = 74;
      case 74: {
        if (tag == 592) {
         parse_max_weapon_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_weapon_level_)));
          set_has_max_weapon_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_unknown_75;
        break;
      }

      // optional int32 unknown_75 = 75;
      case 75: {
        if (tag == 600) {
         parse_unknown_75:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_75_)));
          set_has_unknown_75();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_unknown_76;
        break;
      }

      // optional int32 unknown_76 = 76;
      case 76: {
        if (tag == 608) {
         parse_unknown_76:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_76_)));
          set_has_unknown_76();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_spears_of_the_church_offerings;
        break;
      }

      // optional int32 spears_of_the_church_offerings = 77;
      case 77: {
        if (tag == 616) {
         parse_spears_of_the_church_offerings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spears_of_the_church_offerings_)));
          set_has_spears_of_the_church_offerings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_unknown_78;
        break;
      }

      // optional int32 unknown_78 = 78;
      case 78: {
        if (tag == 624) {
         parse_unknown_78:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_78_)));
          set_has_unknown_78();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_unknown_79;
        break;
      }

      // optional int32 unknown_79 = 79;
      case 79: {
        if (tag == 632) {
         parse_unknown_79:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_79_)));
          set_has_unknown_79();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_unknown_80;
        break;
      }

      // optional int32 unknown_80 = 80;
      case 80: {
        if (tag == 640) {
         parse_unknown_80:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_80_)));
          set_has_unknown_80();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.PlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.PlayerStatus)
  return false;
#undef DO_
}

void PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.PlayerStatus)
  // optional uint32 regulation_version = 1;
  if (has_regulation_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->regulation_version(), output);
  }

  // optional uint32 unknown_2 = 2;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_2(), output);
  }

  // optional bool cross_region_matchmaking_disabled = 3;
  if (has_cross_region_matchmaking_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->cross_region_matchmaking_disabled(), output);
  }

  // optional int32 soul_level = 4;
  if (has_soul_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soul_level(), output);
  }

  // optional uint32 sinner_points = 5;
  if (has_sinner_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sinner_points(), output);
  }

  // optional uint32 unknown_6 = 6;
  if (has_unknown_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unknown_6(), output);
  }

  // optional uint32 is_invadable = 7;
  if (has_is_invadable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_invadable(), output);
  }

  // optional uint32 can_summon_for_way_of_blue = 8;
  if (has_can_summon_for_way_of_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->can_summon_for_way_of_blue(), output);
  }

  // optional uint32 unknown_9 = 9;
  if (has_unknown_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->unknown_9(), output);
  }

  // optional uint32 can_summon_for_watchdog_of_farron = 10;
  if (has_can_summon_for_watchdog_of_farron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->can_summon_for_watchdog_of_farron(), output);
  }

  // optional uint32 can_summon_for_aldritch_faithful = 11;
  if (has_can_summon_for_aldritch_faithful()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->can_summon_for_aldritch_faithful(), output);
  }

  // optional uint32 can_summon_for_spear_of_church = 12;
  if (has_can_summon_for_spear_of_church()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->can_summon_for_spear_of_church(), output);
  }

  // optional uint32 unknown_13 = 13;
  if (has_unknown_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->unknown_13(), output);
  }

  // optional uint32 unknown_14 = 14;
  if (has_unknown_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->unknown_14(), output);
  }

  // optional .DS3_Frpg2PlayerData.WorldType world_type = 15;
  if (has_world_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->world_type(), output);
  }

  // optional uint32 covenant = 16;
  if (has_covenant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->covenant(), output);
  }

  // repeated uint32 played_areas = 17;
  for (int i = 0; i < this->played_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->played_areas(i), output);
  }

  // repeated uint32 unknown_18 = 18;
  for (int i = 0; i < this->unknown_18_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->unknown_18(i), output);
  }

  // optional uint32 embered = 19;
  if (has_embered()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->embered(), output);
  }

  // optional uint32 souls = 20;
  if (has_souls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->souls(), output);
  }

  // optional uint32 soul_memory = 21;
  if (has_soul_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->soul_memory(), output);
  }

  // optional uint32 archetype = 22;
  if (has_archetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->archetype(), output);
  }

  // optional int32 hp = 23;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->hp(), output);
  }

  // optional int32 max_hp = 24;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->max_hp(), output);
  }

  // optional int32 base_max_hp = 25;
  if (has_base_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->base_max_hp(), output);
  }

  // optional int32 fp = 26;
  if (has_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->fp(), output);
  }

  // optional int32 max_fp = 27;
  if (has_max_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->max_fp(), output);
  }

  // optional int32 base_max_fp = 28;
  if (has_base_max_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->base_max_fp(), output);
  }

  // optional int32 stamina = 29;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->stamina(), output);
  }

  // optional int32 max_stamina = 30;
  if (has_max_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->max_stamina(), output);
  }

  // optional int32 base_max_stamina = 31;
  if (has_base_max_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->base_max_stamina(), output);
  }

  // optional uint32 unknown_32 = 32;
  if (has_unknown_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->unknown_32(), output);
  }

  // optional uint32 unknown_33 = 33;
  if (has_unknown_33()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->unknown_33(), output);
  }

  // optional .DS3_Frpg2PlayerData.NetMode net_mode = 34;
  if (has_net_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->net_mode(), output);
  }

  // optional uint32 dried_fingers_active = 35;
  if (has_dried_fingers_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->dried_fingers_active(), output);
  }

  // optional .DS3_Frpg2PlayerData.InvasionType invasion_type = 36;
  if (has_invasion_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->invasion_type(), output);
  }

  // optional uint32 character_id = 37;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->character_id(), output);
  }

  // optional string name = 38;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->name(), output);
  }

  // optional bool is_male = 39;
  if (has_is_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->is_male(), output);
  }

  // optional int32 vigor = 40;
  if (has_vigor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->vigor(), output);
  }

  // optional int32 attunement = 41;
  if (has_attunement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->attunement(), output);
  }

  // optional int32 endurance = 42;
  if (has_endurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->endurance(), output);
  }

  // optional int32 vitality = 43;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->vitality(), output);
  }

  // optional int32 strength = 44;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->strength(), output);
  }

  // optional int32 dexterity = 45;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->dexterity(), output);
  }

  // optional int32 intelligence = 46;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->intelligence(), output);
  }

  // optional int32 faith = 47;
  if (has_faith()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->faith(), output);
  }

  // optional int32 luck = 48;
  if (has_luck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->luck(), output);
  }

  // optional float equip_load = 49;
  if (has_equip_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->equip_load(), output);
  }

  // optional float one_minus_poise_fraction = 50;
  if (has_one_minus_poise_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->one_minus_poise_fraction(), output);
  }

  // optional int32 item_discovery = 51;
  if (has_item_discovery()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->item_discovery(), output);
  }

  // optional int32 attack_power_r_weapon_1 = 52;
  if (has_attack_power_r_weapon_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->attack_power_r_weapon_1(), output);
  }

  // optional int32 attack_power_r_weapon_2 = 53;
  if (has_attack_power_r_weapon_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->attack_power_r_weapon_2(), output);
  }

  // optional int32 attack_power_r_weapon_3 = 54;
  if (has_attack_power_r_weapon_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->attack_power_r_weapon_3(), output);
  }

  // optional int32 attack_power_l_weapon_1 = 55;
  if (has_attack_power_l_weapon_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->attack_power_l_weapon_1(), output);
  }

  // optional int32 attack_power_l_weapon_2 = 56;
  if (has_attack_power_l_weapon_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->attack_power_l_weapon_2(), output);
  }

  // optional int32 attack_power_l_weapon_3 = 57;
  if (has_attack_power_l_weapon_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->attack_power_l_weapon_3(), output);
  }

  // optional .DS3_Frpg2PlayerData.DefenseInfo defense_info = 58;
  if (has_defense_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      58, this->defense_info(), output);
  }

  // optional .DS3_Frpg2PlayerData.CutRateInfo cutrate_info = 59;
  if (has_cutrate_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      59, this->cutrate_info(), output);
  }

  // optional .DS3_Frpg2PlayerData.ResistanceInfo armor_resistance_info = 60;
  if (has_armor_resistance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, this->armor_resistance_info(), output);
  }

  // optional .DS3_Frpg2PlayerData.ResistanceInfo base_resistance_info = 61;
  if (has_base_resistance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, this->base_resistance_info(), output);
  }

  // repeated int32 anticheat_data = 62;
  for (int i = 0; i < this->anticheat_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      62, this->anticheat_data(i), output);
  }

  // optional int32 unknown_63 = 63;
  if (has_unknown_63()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->unknown_63(), output);
  }

  // optional int32 estus_flask_max = 64;
  if (has_estus_flask_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->estus_flask_max(), output);
  }

  // optional int32 ashen_estus_flask_max = 65;
  if (has_ashen_estus_flask_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->ashen_estus_flask_max(), output);
  }

  // optional float max_equip_load = 66;
  if (has_max_equip_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->max_equip_load(), output);
  }

  // optional int32 blade_of_the_darkmoon_offerings = 67;
  if (has_blade_of_the_darkmoon_offerings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->blade_of_the_darkmoon_offerings(), output);
  }

  // optional int32 warrior_of_sunlight_offerings = 68;
  if (has_warrior_of_sunlight_offerings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->warrior_of_sunlight_offerings(), output);
  }

  // optional int32 mound_makers_offerings = 69;
  if (has_mound_makers_offerings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->mound_makers_offerings(), output);
  }

  // optional int32 rosarias_fingers_offerings = 70;
  if (has_rosarias_fingers_offerings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->rosarias_fingers_offerings(), output);
  }

  // optional int32 watchdogs_of_farron_offerings = 71;
  if (has_watchdogs_of_farron_offerings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->watchdogs_of_farron_offerings(), output);
  }

  // optional int32 aldrich_faithful_offerings = 72;
  if (has_aldrich_faithful_offerings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->aldrich_faithful_offerings(), output);
  }

  // optional int32 solo_breakin_point = 73;
  if (has_solo_breakin_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->solo_breakin_point(), output);
  }

  // optional int32 max_weapon_level = 74;
  if (has_max_weapon_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->max_weapon_level(), output);
  }

  // optional int32 unknown_75 = 75;
  if (has_unknown_75()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->unknown_75(), output);
  }

  // optional int32 unknown_76 = 76;
  if (has_unknown_76()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->unknown_76(), output);
  }

  // optional int32 spears_of_the_church_offerings = 77;
  if (has_spears_of_the_church_offerings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->spears_of_the_church_offerings(), output);
  }

  // optional int32 unknown_78 = 78;
  if (has_unknown_78()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->unknown_78(), output);
  }

  // optional int32 unknown_79 = 79;
  if (has_unknown_79()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->unknown_79(), output);
  }

  // optional int32 unknown_80 = 80;
  if (has_unknown_80()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->unknown_80(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.PlayerStatus)
}

int PlayerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 regulation_version = 1;
    if (has_regulation_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regulation_version());
    }

    // optional uint32 unknown_2 = 2;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_2());
    }

    // optional bool cross_region_matchmaking_disabled = 3;
    if (has_cross_region_matchmaking_disabled()) {
      total_size += 1 + 1;
    }

    // optional int32 soul_level = 4;
    if (has_soul_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul_level());
    }

    // optional uint32 sinner_points = 5;
    if (has_sinner_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sinner_points());
    }

    // optional uint32 unknown_6 = 6;
    if (has_unknown_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_6());
    }

    // optional uint32 is_invadable = 7;
    if (has_is_invadable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_invadable());
    }

    // optional uint32 can_summon_for_way_of_blue = 8;
    if (has_can_summon_for_way_of_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_summon_for_way_of_blue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 unknown_9 = 9;
    if (has_unknown_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_9());
    }

    // optional uint32 can_summon_for_watchdog_of_farron = 10;
    if (has_can_summon_for_watchdog_of_farron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_summon_for_watchdog_of_farron());
    }

    // optional uint32 can_summon_for_aldritch_faithful = 11;
    if (has_can_summon_for_aldritch_faithful()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_summon_for_aldritch_faithful());
    }

    // optional uint32 can_summon_for_spear_of_church = 12;
    if (has_can_summon_for_spear_of_church()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_summon_for_spear_of_church());
    }

    // optional uint32 unknown_13 = 13;
    if (has_unknown_13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_13());
    }

    // optional uint32 unknown_14 = 14;
    if (has_unknown_14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_14());
    }

    // optional .DS3_Frpg2PlayerData.WorldType world_type = 15;
    if (has_world_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->world_type());
    }

    // optional uint32 covenant = 16;
    if (has_covenant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->covenant());
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional uint32 embered = 19;
    if (has_embered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->embered());
    }

    // optional uint32 souls = 20;
    if (has_souls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->souls());
    }

    // optional uint32 soul_memory = 21;
    if (has_soul_memory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_memory());
    }

    // optional uint32 archetype = 22;
    if (has_archetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->archetype());
    }

    // optional int32 hp = 23;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 max_hp = 24;
    if (has_max_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 base_max_hp = 25;
    if (has_base_max_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_max_hp());
    }

    // optional int32 fp = 26;
    if (has_fp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fp());
    }

    // optional int32 max_fp = 27;
    if (has_max_fp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_fp());
    }

    // optional int32 base_max_fp = 28;
    if (has_base_max_fp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_max_fp());
    }

    // optional int32 stamina = 29;
    if (has_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // optional int32 max_stamina = 30;
    if (has_max_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_stamina());
    }

    // optional int32 base_max_stamina = 31;
    if (has_base_max_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_max_stamina());
    }

    // optional uint32 unknown_32 = 32;
    if (has_unknown_32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_32());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 unknown_33 = 33;
    if (has_unknown_33()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_33());
    }

    // optional .DS3_Frpg2PlayerData.NetMode net_mode = 34;
    if (has_net_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->net_mode());
    }

    // optional uint32 dried_fingers_active = 35;
    if (has_dried_fingers_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dried_fingers_active());
    }

    // optional .DS3_Frpg2PlayerData.InvasionType invasion_type = 36;
    if (has_invasion_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invasion_type());
    }

    // optional uint32 character_id = 37;
    if (has_character_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // optional string name = 38;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool is_male = 39;
    if (has_is_male()) {
      total_size += 2 + 1;
    }

    // optional int32 vigor = 40;
    if (has_vigor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vigor());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 attunement = 41;
    if (has_attunement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attunement());
    }

    // optional int32 endurance = 42;
    if (has_endurance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endurance());
    }

    // optional int32 vitality = 43;
    if (has_vitality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vitality());
    }

    // optional int32 strength = 44;
    if (has_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // optional int32 dexterity = 45;
    if (has_dexterity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dexterity());
    }

    // optional int32 intelligence = 46;
    if (has_intelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intelligence());
    }

    // optional int32 faith = 47;
    if (has_faith()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faith());
    }

    // optional int32 luck = 48;
    if (has_luck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luck());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional float equip_load = 49;
    if (has_equip_load()) {
      total_size += 2 + 4;
    }

    // optional float one_minus_poise_fraction = 50;
    if (has_one_minus_poise_fraction()) {
      total_size += 2 + 4;
    }

    // optional int32 item_discovery = 51;
    if (has_item_discovery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_discovery());
    }

    // optional int32 attack_power_r_weapon_1 = 52;
    if (has_attack_power_r_weapon_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_power_r_weapon_1());
    }

    // optional int32 attack_power_r_weapon_2 = 53;
    if (has_attack_power_r_weapon_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_power_r_weapon_2());
    }

    // optional int32 attack_power_r_weapon_3 = 54;
    if (has_attack_power_r_weapon_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_power_r_weapon_3());
    }

    // optional int32 attack_power_l_weapon_1 = 55;
    if (has_attack_power_l_weapon_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_power_l_weapon_1());
    }

    // optional int32 attack_power_l_weapon_2 = 56;
    if (has_attack_power_l_weapon_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_power_l_weapon_2());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 attack_power_l_weapon_3 = 57;
    if (has_attack_power_l_weapon_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_power_l_weapon_3());
    }

    // optional .DS3_Frpg2PlayerData.DefenseInfo defense_info = 58;
    if (has_defense_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defense_info());
    }

    // optional .DS3_Frpg2PlayerData.CutRateInfo cutrate_info = 59;
    if (has_cutrate_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cutrate_info());
    }

    // optional .DS3_Frpg2PlayerData.ResistanceInfo armor_resistance_info = 60;
    if (has_armor_resistance_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor_resistance_info());
    }

    // optional .DS3_Frpg2PlayerData.ResistanceInfo base_resistance_info = 61;
    if (has_base_resistance_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_resistance_info());
    }

    // optional int32 unknown_63 = 63;
    if (has_unknown_63()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_63());
    }

    // optional int32 estus_flask_max = 64;
    if (has_estus_flask_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estus_flask_max());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 ashen_estus_flask_max = 65;
    if (has_ashen_estus_flask_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ashen_estus_flask_max());
    }

    // optional float max_equip_load = 66;
    if (has_max_equip_load()) {
      total_size += 2 + 4;
    }

    // optional int32 blade_of_the_darkmoon_offerings = 67;
    if (has_blade_of_the_darkmoon_offerings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blade_of_the_darkmoon_offerings());
    }

    // optional int32 warrior_of_sunlight_offerings = 68;
    if (has_warrior_of_sunlight_offerings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warrior_of_sunlight_offerings());
    }

    // optional int32 mound_makers_offerings = 69;
    if (has_mound_makers_offerings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mound_makers_offerings());
    }

    // optional int32 rosarias_fingers_offerings = 70;
    if (has_rosarias_fingers_offerings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rosarias_fingers_offerings());
    }

    // optional int32 watchdogs_of_farron_offerings = 71;
    if (has_watchdogs_of_farron_offerings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->watchdogs_of_farron_offerings());
    }

    // optional int32 aldrich_faithful_offerings = 72;
    if (has_aldrich_faithful_offerings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aldrich_faithful_offerings());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 solo_breakin_point = 73;
    if (has_solo_breakin_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solo_breakin_point());
    }

    // optional int32 max_weapon_level = 74;
    if (has_max_weapon_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_weapon_level());
    }

    // optional int32 unknown_75 = 75;
    if (has_unknown_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_75());
    }

    // optional int32 unknown_76 = 76;
    if (has_unknown_76()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_76());
    }

    // optional int32 spears_of_the_church_offerings = 77;
    if (has_spears_of_the_church_offerings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spears_of_the_church_offerings());
    }

    // optional int32 unknown_78 = 78;
    if (has_unknown_78()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_78());
    }

    // optional int32 unknown_79 = 79;
    if (has_unknown_79()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_79());
    }

    // optional int32 unknown_80 = 80;
    if (has_unknown_80()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_80());
    }

  }
  // repeated uint32 played_areas = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->played_areas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->played_areas(i));
    }
    total_size += 2 * this->played_areas_size() + data_size;
  }

  // repeated uint32 unknown_18 = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->unknown_18_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unknown_18(i));
    }
    total_size += 2 * this->unknown_18_size() + data_size;
  }

  // repeated int32 anticheat_data = 62;
  {
    int data_size = 0;
    for (int i = 0; i < this->anticheat_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->anticheat_data(i));
    }
    total_size += 2 * this->anticheat_data_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerStatus*>(&from));
}

void PlayerStatus::MergeFrom(const PlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  played_areas_.MergeFrom(from.played_areas_);
  unknown_18_.MergeFrom(from.unknown_18_);
  anticheat_data_.MergeFrom(from.anticheat_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regulation_version()) {
      set_regulation_version(from.regulation_version());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_cross_region_matchmaking_disabled()) {
      set_cross_region_matchmaking_disabled(from.cross_region_matchmaking_disabled());
    }
    if (from.has_soul_level()) {
      set_soul_level(from.soul_level());
    }
    if (from.has_sinner_points()) {
      set_sinner_points(from.sinner_points());
    }
    if (from.has_unknown_6()) {
      set_unknown_6(from.unknown_6());
    }
    if (from.has_is_invadable()) {
      set_is_invadable(from.is_invadable());
    }
    if (from.has_can_summon_for_way_of_blue()) {
      set_can_summon_for_way_of_blue(from.can_summon_for_way_of_blue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unknown_9()) {
      set_unknown_9(from.unknown_9());
    }
    if (from.has_can_summon_for_watchdog_of_farron()) {
      set_can_summon_for_watchdog_of_farron(from.can_summon_for_watchdog_of_farron());
    }
    if (from.has_can_summon_for_aldritch_faithful()) {
      set_can_summon_for_aldritch_faithful(from.can_summon_for_aldritch_faithful());
    }
    if (from.has_can_summon_for_spear_of_church()) {
      set_can_summon_for_spear_of_church(from.can_summon_for_spear_of_church());
    }
    if (from.has_unknown_13()) {
      set_unknown_13(from.unknown_13());
    }
    if (from.has_unknown_14()) {
      set_unknown_14(from.unknown_14());
    }
    if (from.has_world_type()) {
      set_world_type(from.world_type());
    }
    if (from.has_covenant()) {
      set_covenant(from.covenant());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_embered()) {
      set_embered(from.embered());
    }
    if (from.has_souls()) {
      set_souls(from.souls());
    }
    if (from.has_soul_memory()) {
      set_soul_memory(from.soul_memory());
    }
    if (from.has_archetype()) {
      set_archetype(from.archetype());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_base_max_hp()) {
      set_base_max_hp(from.base_max_hp());
    }
    if (from.has_fp()) {
      set_fp(from.fp());
    }
    if (from.has_max_fp()) {
      set_max_fp(from.max_fp());
    }
    if (from.has_base_max_fp()) {
      set_base_max_fp(from.base_max_fp());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_max_stamina()) {
      set_max_stamina(from.max_stamina());
    }
    if (from.has_base_max_stamina()) {
      set_base_max_stamina(from.base_max_stamina());
    }
    if (from.has_unknown_32()) {
      set_unknown_32(from.unknown_32());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_unknown_33()) {
      set_unknown_33(from.unknown_33());
    }
    if (from.has_net_mode()) {
      set_net_mode(from.net_mode());
    }
    if (from.has_dried_fingers_active()) {
      set_dried_fingers_active(from.dried_fingers_active());
    }
    if (from.has_invasion_type()) {
      set_invasion_type(from.invasion_type());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_male()) {
      set_is_male(from.is_male());
    }
    if (from.has_vigor()) {
      set_vigor(from.vigor());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_attunement()) {
      set_attunement(from.attunement());
    }
    if (from.has_endurance()) {
      set_endurance(from.endurance());
    }
    if (from.has_vitality()) {
      set_vitality(from.vitality());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_faith()) {
      set_faith(from.faith());
    }
    if (from.has_luck()) {
      set_luck(from.luck());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_equip_load()) {
      set_equip_load(from.equip_load());
    }
    if (from.has_one_minus_poise_fraction()) {
      set_one_minus_poise_fraction(from.one_minus_poise_fraction());
    }
    if (from.has_item_discovery()) {
      set_item_discovery(from.item_discovery());
    }
    if (from.has_attack_power_r_weapon_1()) {
      set_attack_power_r_weapon_1(from.attack_power_r_weapon_1());
    }
    if (from.has_attack_power_r_weapon_2()) {
      set_attack_power_r_weapon_2(from.attack_power_r_weapon_2());
    }
    if (from.has_attack_power_r_weapon_3()) {
      set_attack_power_r_weapon_3(from.attack_power_r_weapon_3());
    }
    if (from.has_attack_power_l_weapon_1()) {
      set_attack_power_l_weapon_1(from.attack_power_l_weapon_1());
    }
    if (from.has_attack_power_l_weapon_2()) {
      set_attack_power_l_weapon_2(from.attack_power_l_weapon_2());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_attack_power_l_weapon_3()) {
      set_attack_power_l_weapon_3(from.attack_power_l_weapon_3());
    }
    if (from.has_defense_info()) {
      mutable_defense_info()->::DS3_Frpg2PlayerData::DefenseInfo::MergeFrom(from.defense_info());
    }
    if (from.has_cutrate_info()) {
      mutable_cutrate_info()->::DS3_Frpg2PlayerData::CutRateInfo::MergeFrom(from.cutrate_info());
    }
    if (from.has_armor_resistance_info()) {
      mutable_armor_resistance_info()->::DS3_Frpg2PlayerData::ResistanceInfo::MergeFrom(from.armor_resistance_info());
    }
    if (from.has_base_resistance_info()) {
      mutable_base_resistance_info()->::DS3_Frpg2PlayerData::ResistanceInfo::MergeFrom(from.base_resistance_info());
    }
    if (from.has_unknown_63()) {
      set_unknown_63(from.unknown_63());
    }
    if (from.has_estus_flask_max()) {
      set_estus_flask_max(from.estus_flask_max());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_ashen_estus_flask_max()) {
      set_ashen_estus_flask_max(from.ashen_estus_flask_max());
    }
    if (from.has_max_equip_load()) {
      set_max_equip_load(from.max_equip_load());
    }
    if (from.has_blade_of_the_darkmoon_offerings()) {
      set_blade_of_the_darkmoon_offerings(from.blade_of_the_darkmoon_offerings());
    }
    if (from.has_warrior_of_sunlight_offerings()) {
      set_warrior_of_sunlight_offerings(from.warrior_of_sunlight_offerings());
    }
    if (from.has_mound_makers_offerings()) {
      set_mound_makers_offerings(from.mound_makers_offerings());
    }
    if (from.has_rosarias_fingers_offerings()) {
      set_rosarias_fingers_offerings(from.rosarias_fingers_offerings());
    }
    if (from.has_watchdogs_of_farron_offerings()) {
      set_watchdogs_of_farron_offerings(from.watchdogs_of_farron_offerings());
    }
    if (from.has_aldrich_faithful_offerings()) {
      set_aldrich_faithful_offerings(from.aldrich_faithful_offerings());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_solo_breakin_point()) {
      set_solo_breakin_point(from.solo_breakin_point());
    }
    if (from.has_max_weapon_level()) {
      set_max_weapon_level(from.max_weapon_level());
    }
    if (from.has_unknown_75()) {
      set_unknown_75(from.unknown_75());
    }
    if (from.has_unknown_76()) {
      set_unknown_76(from.unknown_76());
    }
    if (from.has_spears_of_the_church_offerings()) {
      set_spears_of_the_church_offerings(from.spears_of_the_church_offerings());
    }
    if (from.has_unknown_78()) {
      set_unknown_78(from.unknown_78());
    }
    if (from.has_unknown_79()) {
      set_unknown_79(from.unknown_79());
    }
    if (from.has_unknown_80()) {
      set_unknown_80(from.unknown_80());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerStatus::CopyFrom(const PlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus::IsInitialized() const {

  return true;
}

void PlayerStatus::Swap(PlayerStatus* other) {
  if (other != this) {
    std::swap(regulation_version_, other->regulation_version_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(cross_region_matchmaking_disabled_, other->cross_region_matchmaking_disabled_);
    std::swap(soul_level_, other->soul_level_);
    std::swap(sinner_points_, other->sinner_points_);
    std::swap(unknown_6_, other->unknown_6_);
    std::swap(is_invadable_, other->is_invadable_);
    std::swap(can_summon_for_way_of_blue_, other->can_summon_for_way_of_blue_);
    std::swap(unknown_9_, other->unknown_9_);
    std::swap(can_summon_for_watchdog_of_farron_, other->can_summon_for_watchdog_of_farron_);
    std::swap(can_summon_for_aldritch_faithful_, other->can_summon_for_aldritch_faithful_);
    std::swap(can_summon_for_spear_of_church_, other->can_summon_for_spear_of_church_);
    std::swap(unknown_13_, other->unknown_13_);
    std::swap(unknown_14_, other->unknown_14_);
    std::swap(world_type_, other->world_type_);
    std::swap(covenant_, other->covenant_);
    played_areas_.Swap(&other->played_areas_);
    unknown_18_.Swap(&other->unknown_18_);
    std::swap(embered_, other->embered_);
    std::swap(souls_, other->souls_);
    std::swap(soul_memory_, other->soul_memory_);
    std::swap(archetype_, other->archetype_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(base_max_hp_, other->base_max_hp_);
    std::swap(fp_, other->fp_);
    std::swap(max_fp_, other->max_fp_);
    std::swap(base_max_fp_, other->base_max_fp_);
    std::swap(stamina_, other->stamina_);
    std::swap(max_stamina_, other->max_stamina_);
    std::swap(base_max_stamina_, other->base_max_stamina_);
    std::swap(unknown_32_, other->unknown_32_);
    std::swap(unknown_33_, other->unknown_33_);
    std::swap(net_mode_, other->net_mode_);
    std::swap(dried_fingers_active_, other->dried_fingers_active_);
    std::swap(invasion_type_, other->invasion_type_);
    std::swap(character_id_, other->character_id_);
    std::swap(name_, other->name_);
    std::swap(is_male_, other->is_male_);
    std::swap(vigor_, other->vigor_);
    std::swap(attunement_, other->attunement_);
    std::swap(endurance_, other->endurance_);
    std::swap(vitality_, other->vitality_);
    std::swap(strength_, other->strength_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(intelligence_, other->intelligence_);
    std::swap(faith_, other->faith_);
    std::swap(luck_, other->luck_);
    std::swap(equip_load_, other->equip_load_);
    std::swap(one_minus_poise_fraction_, other->one_minus_poise_fraction_);
    std::swap(item_discovery_, other->item_discovery_);
    std::swap(attack_power_r_weapon_1_, other->attack_power_r_weapon_1_);
    std::swap(attack_power_r_weapon_2_, other->attack_power_r_weapon_2_);
    std::swap(attack_power_r_weapon_3_, other->attack_power_r_weapon_3_);
    std::swap(attack_power_l_weapon_1_, other->attack_power_l_weapon_1_);
    std::swap(attack_power_l_weapon_2_, other->attack_power_l_weapon_2_);
    std::swap(attack_power_l_weapon_3_, other->attack_power_l_weapon_3_);
    std::swap(defense_info_, other->defense_info_);
    std::swap(cutrate_info_, other->cutrate_info_);
    std::swap(armor_resistance_info_, other->armor_resistance_info_);
    std::swap(base_resistance_info_, other->base_resistance_info_);
    anticheat_data_.Swap(&other->anticheat_data_);
    std::swap(unknown_63_, other->unknown_63_);
    std::swap(estus_flask_max_, other->estus_flask_max_);
    std::swap(ashen_estus_flask_max_, other->ashen_estus_flask_max_);
    std::swap(max_equip_load_, other->max_equip_load_);
    std::swap(blade_of_the_darkmoon_offerings_, other->blade_of_the_darkmoon_offerings_);
    std::swap(warrior_of_sunlight_offerings_, other->warrior_of_sunlight_offerings_);
    std::swap(mound_makers_offerings_, other->mound_makers_offerings_);
    std::swap(rosarias_fingers_offerings_, other->rosarias_fingers_offerings_);
    std::swap(watchdogs_of_farron_offerings_, other->watchdogs_of_farron_offerings_);
    std::swap(aldrich_faithful_offerings_, other->aldrich_faithful_offerings_);
    std::swap(solo_breakin_point_, other->solo_breakin_point_);
    std::swap(max_weapon_level_, other->max_weapon_level_);
    std::swap(unknown_75_, other->unknown_75_);
    std::swap(unknown_76_, other->unknown_76_);
    std::swap(spears_of_the_church_offerings_, other->spears_of_the_church_offerings_);
    std::swap(unknown_78_, other->unknown_78_);
    std::swap(unknown_79_, other->unknown_79_);
    std::swap(unknown_80_, other->unknown_80_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerStatus::GetTypeName() const {
  return "DS3_Frpg2PlayerData.PlayerStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayData::kPlayTimeSecondsFieldNumber;
const int PlayData::kIsHollowFieldNumber;
const int PlayData::kHollowLevelFieldNumber;
const int PlayData::kUnknown4FieldNumber;
const int PlayData::kBonfireLevelFieldNumber;
const int PlayData::kBonfireInfoFieldNumber;
#endif  // !_MSC_VER

PlayData::PlayData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.PlayData)
}

void PlayData::InitAsDefaultInstance() {
}

PlayData::PlayData(const PlayData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.PlayData)
}

void PlayData::SharedCtor() {
  _cached_size_ = 0;
  play_time_seconds_ = 0u;
  is_hollow_ = 0u;
  hollow_level_ = 0u;
  unknown_4_ = 0u;
  bonfire_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayData::~PlayData() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.PlayData)
  SharedDtor();
}

void PlayData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayData& PlayData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PlayData* PlayData::default_instance_ = NULL;

PlayData* PlayData::New() const {
  return new PlayData;
}

void PlayData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(play_time_seconds_, unknown_4_);
    bonfire_level_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bonfire_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.PlayData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 play_time_seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_seconds_)));
          set_has_play_time_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_hollow;
        break;
      }

      // optional uint32 is_hollow = 4;
      case 4: {
        if (tag == 32) {
         parse_is_hollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_hollow_)));
          set_has_is_hollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hollow_level;
        break;
      }

      // optional uint32 hollow_level = 5;
      case 5: {
        if (tag == 40) {
         parse_hollow_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hollow_level_)));
          set_has_hollow_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unknown_4;
        break;
      }

      // optional uint32 unknown_4 = 6;
      case 6: {
        if (tag == 48) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bonfire_level;
        break;
      }

      // optional uint32 bonfire_level = 7;
      case 7: {
        if (tag == 56) {
         parse_bonfire_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonfire_level_)));
          set_has_bonfire_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bonfire_info;
        break;
      }

      // repeated .DS3_Frpg2PlayerData.BonfireInfo bonfire_info = 8;
      case 8: {
        if (tag == 66) {
         parse_bonfire_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonfire_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bonfire_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.PlayData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.PlayData)
  return false;
#undef DO_
}

void PlayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.PlayData)
  // optional uint32 play_time_seconds = 1;
  if (has_play_time_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->play_time_seconds(), output);
  }

  // optional uint32 is_hollow = 4;
  if (has_is_hollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_hollow(), output);
  }

  // optional uint32 hollow_level = 5;
  if (has_hollow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hollow_level(), output);
  }

  // optional uint32 unknown_4 = 6;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unknown_4(), output);
  }

  // optional uint32 bonfire_level = 7;
  if (has_bonfire_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bonfire_level(), output);
  }

  // repeated .DS3_Frpg2PlayerData.BonfireInfo bonfire_info = 8;
  for (int i = 0; i < this->bonfire_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->bonfire_info(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.PlayData)
}

int PlayData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 play_time_seconds = 1;
    if (has_play_time_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_seconds());
    }

    // optional uint32 is_hollow = 4;
    if (has_is_hollow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_hollow());
    }

    // optional uint32 hollow_level = 5;
    if (has_hollow_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hollow_level());
    }

    // optional uint32 unknown_4 = 6;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

    // optional uint32 bonfire_level = 7;
    if (has_bonfire_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonfire_level());
    }

  }
  // repeated .DS3_Frpg2PlayerData.BonfireInfo bonfire_info = 8;
  total_size += 1 * this->bonfire_info_size();
  for (int i = 0; i < this->bonfire_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonfire_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayData*>(&from));
}

void PlayData::MergeFrom(const PlayData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bonfire_info_.MergeFrom(from.bonfire_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_time_seconds()) {
      set_play_time_seconds(from.play_time_seconds());
    }
    if (from.has_is_hollow()) {
      set_is_hollow(from.is_hollow());
    }
    if (from.has_hollow_level()) {
      set_hollow_level(from.hollow_level());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_bonfire_level()) {
      set_bonfire_level(from.bonfire_level());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayData::CopyFrom(const PlayData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bonfire_info())) return false;
  return true;
}

void PlayData::Swap(PlayData* other) {
  if (other != this) {
    std::swap(play_time_seconds_, other->play_time_seconds_);
    std::swap(is_hollow_, other->is_hollow_);
    std::swap(hollow_level_, other->hollow_level_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(bonfire_level_, other->bonfire_level_);
    bonfire_info_.Swap(&other->bonfire_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayData::GetTypeName() const {
  return "DS3_Frpg2PlayerData.PlayData";
}


// ===================================================================

#ifndef _MSC_VER
const int LogInfo::kClearCountFieldNumber;
const int LogInfo::kDeathCountFieldNumber;
const int LogInfo::kMultiplayCountFieldNumber;
const int LogInfo::kCoopSuccessCountFieldNumber;
const int LogInfo::kDarkSpiritDefeatCountFieldNumber;
const int LogInfo::kHostDefeatCountFieldNumber;
#endif  // !_MSC_VER

LogInfo::LogInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.LogInfo)
}

void LogInfo::InitAsDefaultInstance() {
}

LogInfo::LogInfo(const LogInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.LogInfo)
}

void LogInfo::SharedCtor() {
  _cached_size_ = 0;
  clear_count_ = 0u;
  death_count_ = 0u;
  multiplay_count_ = 0u;
  coop_success_count_ = 0u;
  dark_spirit_defeat_count_ = 0u;
  host_defeat_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogInfo::~LogInfo() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.LogInfo)
  SharedDtor();
}

void LogInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogInfo& LogInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

LogInfo* LogInfo::default_instance_ = NULL;

LogInfo* LogInfo::New() const {
  return new LogInfo;
}

void LogInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(clear_count_, host_defeat_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.LogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clear_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_count_)));
          set_has_clear_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_death_count;
        break;
      }

      // optional uint32 death_count = 6;
      case 6: {
        if (tag == 48) {
         parse_death_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
          set_has_death_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multiplay_count;
        break;
      }

      // optional uint32 multiplay_count = 7;
      case 7: {
        if (tag == 56) {
         parse_multiplay_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiplay_count_)));
          set_has_multiplay_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coop_success_count;
        break;
      }

      // optional uint32 coop_success_count = 8;
      case 8: {
        if (tag == 64) {
         parse_coop_success_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coop_success_count_)));
          set_has_coop_success_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dark_spirit_defeat_count;
        break;
      }

      // optional uint32 dark_spirit_defeat_count = 9;
      case 9: {
        if (tag == 72) {
         parse_dark_spirit_defeat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dark_spirit_defeat_count_)));
          set_has_dark_spirit_defeat_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_host_defeat_count;
        break;
      }

      // optional uint32 host_defeat_count = 10;
      case 10: {
        if (tag == 80) {
         parse_host_defeat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_defeat_count_)));
          set_has_host_defeat_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.LogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.LogInfo)
  return false;
#undef DO_
}

void LogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.LogInfo)
  // optional uint32 clear_count = 1;
  if (has_clear_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clear_count(), output);
  }

  // optional uint32 death_count = 6;
  if (has_death_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->death_count(), output);
  }

  // optional uint32 multiplay_count = 7;
  if (has_multiplay_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->multiplay_count(), output);
  }

  // optional uint32 coop_success_count = 8;
  if (has_coop_success_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coop_success_count(), output);
  }

  // optional uint32 dark_spirit_defeat_count = 9;
  if (has_dark_spirit_defeat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dark_spirit_defeat_count(), output);
  }

  // optional uint32 host_defeat_count = 10;
  if (has_host_defeat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->host_defeat_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.LogInfo)
}

int LogInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clear_count = 1;
    if (has_clear_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clear_count());
    }

    // optional uint32 death_count = 6;
    if (has_death_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

    // optional uint32 multiplay_count = 7;
    if (has_multiplay_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiplay_count());
    }

    // optional uint32 coop_success_count = 8;
    if (has_coop_success_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coop_success_count());
    }

    // optional uint32 dark_spirit_defeat_count = 9;
    if (has_dark_spirit_defeat_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dark_spirit_defeat_count());
    }

    // optional uint32 host_defeat_count = 10;
    if (has_host_defeat_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_defeat_count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogInfo*>(&from));
}

void LogInfo::MergeFrom(const LogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_count()) {
      set_clear_count(from.clear_count());
    }
    if (from.has_death_count()) {
      set_death_count(from.death_count());
    }
    if (from.has_multiplay_count()) {
      set_multiplay_count(from.multiplay_count());
    }
    if (from.has_coop_success_count()) {
      set_coop_success_count(from.coop_success_count());
    }
    if (from.has_dark_spirit_defeat_count()) {
      set_dark_spirit_defeat_count(from.dark_spirit_defeat_count());
    }
    if (from.has_host_defeat_count()) {
      set_host_defeat_count(from.host_defeat_count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LogInfo::CopyFrom(const LogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInfo::IsInitialized() const {

  return true;
}

void LogInfo::Swap(LogInfo* other) {
  if (other != this) {
    std::swap(clear_count_, other->clear_count_);
    std::swap(death_count_, other->death_count_);
    std::swap(multiplay_count_, other->multiplay_count_);
    std::swap(coop_success_count_, other->coop_success_count_);
    std::swap(dark_spirit_defeat_count_, other->dark_spirit_defeat_count_);
    std::swap(host_defeat_count_, other->host_defeat_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogInfo::GetTypeName() const {
  return "DS3_Frpg2PlayerData.LogInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int StatsInfo::kUnknown1FieldNumber;
const int StatsInfo::kUnknown2FieldNumber;
const int StatsInfo::kUnknown3FieldNumber;
const int StatsInfo::kUnknown4FieldNumber;
const int StatsInfo::kUnknown5FieldNumber;
const int StatsInfo::kUnknown6FieldNumber;
const int StatsInfo::kDateTime1FieldNumber;
const int StatsInfo::kDateTime2FieldNumber;
#endif  // !_MSC_VER

StatsInfo::StatsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.StatsInfo)
}

void StatsInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  date_time_1_ = const_cast< ::DS3_Frpg2PlayerData::DateTime*>(
      ::DS3_Frpg2PlayerData::DateTime::internal_default_instance());
#else
  date_time_1_ = const_cast< ::DS3_Frpg2PlayerData::DateTime*>(&::DS3_Frpg2PlayerData::DateTime::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  date_time_2_ = const_cast< ::DS3_Frpg2PlayerData::DateTime*>(
      ::DS3_Frpg2PlayerData::DateTime::internal_default_instance());
#else
  date_time_2_ = const_cast< ::DS3_Frpg2PlayerData::DateTime*>(&::DS3_Frpg2PlayerData::DateTime::default_instance());
#endif
}

StatsInfo::StatsInfo(const StatsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.StatsInfo)
}

void StatsInfo::SharedCtor() {
  _cached_size_ = 0;
  unknown_1_ = 0u;
  unknown_2_ = 0u;
  unknown_3_ = 0u;
  unknown_4_ = 0u;
  unknown_5_ = 0u;
  unknown_6_ = 0u;
  date_time_1_ = NULL;
  date_time_2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatsInfo::~StatsInfo() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.StatsInfo)
  SharedDtor();
}

void StatsInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete date_time_1_;
    delete date_time_2_;
  }
}

void StatsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StatsInfo& StatsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

StatsInfo* StatsInfo::default_instance_ = NULL;

StatsInfo* StatsInfo::New() const {
  return new StatsInfo;
}

void StatsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(unknown_1_, unknown_6_);
    if (has_date_time_1()) {
      if (date_time_1_ != NULL) date_time_1_->::DS3_Frpg2PlayerData::DateTime::Clear();
    }
    if (has_date_time_2()) {
      if (date_time_2_ != NULL) date_time_2_->::DS3_Frpg2PlayerData::DateTime::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StatsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.StatsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unknown_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_2;
        break;
      }

      // optional uint32 unknown_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_2_)));
          set_has_unknown_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_3;
        break;
      }

      // optional uint32 unknown_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_3_)));
          set_has_unknown_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unknown_4;
        break;
      }

      // optional uint32 unknown_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_unknown_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_4_)));
          set_has_unknown_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unknown_5;
        break;
      }

      // optional uint32 unknown_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_unknown_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_5_)));
          set_has_unknown_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unknown_6;
        break;
      }

      // optional uint32 unknown_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_unknown_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_6_)));
          set_has_unknown_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_date_time_1;
        break;
      }

      // optional .DS3_Frpg2PlayerData.DateTime date_time_1 = 7;
      case 7: {
        if (tag == 58) {
         parse_date_time_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_time_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_date_time_2;
        break;
      }

      // optional .DS3_Frpg2PlayerData.DateTime date_time_2 = 8;
      case 8: {
        if (tag == 66) {
         parse_date_time_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_time_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.StatsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.StatsInfo)
  return false;
#undef DO_
}

void StatsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.StatsInfo)
  // optional uint32 unknown_1 = 1;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unknown_1(), output);
  }

  // optional uint32 unknown_2 = 2;
  if (has_unknown_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_2(), output);
  }

  // optional uint32 unknown_3 = 3;
  if (has_unknown_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unknown_3(), output);
  }

  // optional uint32 unknown_4 = 4;
  if (has_unknown_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unknown_4(), output);
  }

  // optional uint32 unknown_5 = 5;
  if (has_unknown_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unknown_5(), output);
  }

  // optional uint32 unknown_6 = 6;
  if (has_unknown_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unknown_6(), output);
  }

  // optional .DS3_Frpg2PlayerData.DateTime date_time_1 = 7;
  if (has_date_time_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->date_time_1(), output);
  }

  // optional .DS3_Frpg2PlayerData.DateTime date_time_2 = 8;
  if (has_date_time_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->date_time_2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.StatsInfo)
}

int StatsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unknown_1 = 1;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_1());
    }

    // optional uint32 unknown_2 = 2;
    if (has_unknown_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_2());
    }

    // optional uint32 unknown_3 = 3;
    if (has_unknown_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_3());
    }

    // optional uint32 unknown_4 = 4;
    if (has_unknown_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_4());
    }

    // optional uint32 unknown_5 = 5;
    if (has_unknown_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_5());
    }

    // optional uint32 unknown_6 = 6;
    if (has_unknown_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_6());
    }

    // optional .DS3_Frpg2PlayerData.DateTime date_time_1 = 7;
    if (has_date_time_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_time_1());
    }

    // optional .DS3_Frpg2PlayerData.DateTime date_time_2 = 8;
    if (has_date_time_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_time_2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatsInfo*>(&from));
}

void StatsInfo::MergeFrom(const StatsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_unknown_2()) {
      set_unknown_2(from.unknown_2());
    }
    if (from.has_unknown_3()) {
      set_unknown_3(from.unknown_3());
    }
    if (from.has_unknown_4()) {
      set_unknown_4(from.unknown_4());
    }
    if (from.has_unknown_5()) {
      set_unknown_5(from.unknown_5());
    }
    if (from.has_unknown_6()) {
      set_unknown_6(from.unknown_6());
    }
    if (from.has_date_time_1()) {
      mutable_date_time_1()->::DS3_Frpg2PlayerData::DateTime::MergeFrom(from.date_time_1());
    }
    if (from.has_date_time_2()) {
      mutable_date_time_2()->::DS3_Frpg2PlayerData::DateTime::MergeFrom(from.date_time_2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StatsInfo::CopyFrom(const StatsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsInfo::IsInitialized() const {

  if (has_date_time_1()) {
    if (!this->date_time_1().IsInitialized()) return false;
  }
  if (has_date_time_2()) {
    if (!this->date_time_2().IsInitialized()) return false;
  }
  return true;
}

void StatsInfo::Swap(StatsInfo* other) {
  if (other != this) {
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(unknown_2_, other->unknown_2_);
    std::swap(unknown_3_, other->unknown_3_);
    std::swap(unknown_4_, other->unknown_4_);
    std::swap(unknown_5_, other->unknown_5_);
    std::swap(unknown_6_, other->unknown_6_);
    std::swap(date_time_1_, other->date_time_1_);
    std::swap(date_time_2_, other->date_time_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StatsInfo::GetTypeName() const {
  return "DS3_Frpg2PlayerData.StatsInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int Equipment::kLeftWeapon1FieldNumber;
const int Equipment::kLeftWeapon2FieldNumber;
const int Equipment::kLeftWeapon3FieldNumber;
const int Equipment::kRightWeapon1FieldNumber;
const int Equipment::kRightWeapon2FieldNumber;
const int Equipment::kRightWeapon3FieldNumber;
const int Equipment::kHeadFieldNumber;
const int Equipment::kChestFieldNumber;
const int Equipment::kHandsFieldNumber;
const int Equipment::kLegsFieldNumber;
const int Equipment::kRing1FieldNumber;
const int Equipment::kRing2FieldNumber;
const int Equipment::kRing3FieldNumber;
const int Equipment::kRing4FieldNumber;
const int Equipment::kQuickItem1FieldNumber;
const int Equipment::kQuickItem2FieldNumber;
const int Equipment::kQuickItem3FieldNumber;
const int Equipment::kQuickItem4FieldNumber;
const int Equipment::kQuickItem5FieldNumber;
const int Equipment::kQuickItem6FieldNumber;
const int Equipment::kQuickItem7FieldNumber;
const int Equipment::kQuickItem8FieldNumber;
const int Equipment::kQuickItem9FieldNumber;
const int Equipment::kQuickItem10FieldNumber;
const int Equipment::kToolBelt1FieldNumber;
const int Equipment::kToolBelt2FieldNumber;
const int Equipment::kToolBelt3FieldNumber;
const int Equipment::kToolBelt4FieldNumber;
const int Equipment::kToolBelt5FieldNumber;
const int Equipment::kArrow1FieldNumber;
const int Equipment::kArrow2FieldNumber;
const int Equipment::kBolt1FieldNumber;
const int Equipment::kBolt2FieldNumber;
const int Equipment::kSpell1FieldNumber;
const int Equipment::kSpell2FieldNumber;
const int Equipment::kSpell3FieldNumber;
const int Equipment::kSpell4FieldNumber;
const int Equipment::kSpell5FieldNumber;
const int Equipment::kSpell6FieldNumber;
const int Equipment::kSpell7FieldNumber;
const int Equipment::kSpell8FieldNumber;
const int Equipment::kSpell9FieldNumber;
const int Equipment::kSpell10FieldNumber;
const int Equipment::kSpell11FieldNumber;
const int Equipment::kSpell12FieldNumber;
const int Equipment::kSpell13FieldNumber;
const int Equipment::kSpell14FieldNumber;
const int Equipment::kCovenantItemFieldNumber;
const int Equipment::kLeftWeapon1DurabilityFieldNumber;
const int Equipment::kLeftWeapon2DurabilityFieldNumber;
const int Equipment::kLeftWeapon3DurabilityFieldNumber;
const int Equipment::kRightWeapon1DurabilityFieldNumber;
const int Equipment::kRightWeapon2DurabilityFieldNumber;
const int Equipment::kRightWeapon3DurabilityFieldNumber;
const int Equipment::kHeadDurabilityFieldNumber;
const int Equipment::kChestDurabilityFieldNumber;
const int Equipment::kHandsDurabilityFieldNumber;
const int Equipment::kLegsDurabilityFieldNumber;
const int Equipment::kUnknown59FieldNumber;
const int Equipment::kUnknown60FieldNumber;
#endif  // !_MSC_VER

Equipment::Equipment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.Equipment)
}

void Equipment::InitAsDefaultInstance() {
}

Equipment::Equipment(const Equipment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.Equipment)
}

void Equipment::SharedCtor() {
  _cached_size_ = 0;
  left_weapon_1_ = 0;
  left_weapon_2_ = 0;
  left_weapon_3_ = 0;
  right_weapon_1_ = 0;
  right_weapon_2_ = 0;
  right_weapon_3_ = 0;
  head_ = 0;
  chest_ = 0;
  hands_ = 0;
  legs_ = 0;
  ring_1_ = 0;
  ring_2_ = 0;
  ring_3_ = 0;
  ring_4_ = 0;
  quick_item_1_ = 0;
  quick_item_2_ = 0;
  quick_item_3_ = 0;
  quick_item_4_ = 0;
  quick_item_5_ = 0;
  quick_item_6_ = 0;
  quick_item_7_ = 0;
  quick_item_8_ = 0;
  quick_item_9_ = 0;
  quick_item_10_ = 0;
  tool_belt_1_ = 0;
  tool_belt_2_ = 0;
  tool_belt_3_ = 0;
  tool_belt_4_ = 0;
  tool_belt_5_ = 0;
  arrow_1_ = 0;
  arrow_2_ = 0;
  bolt_1_ = 0;
  bolt_2_ = 0;
  spell_1_ = 0;
  spell_2_ = 0;
  spell_3_ = 0;
  spell_4_ = 0;
  spell_5_ = 0;
  spell_6_ = 0;
  spell_7_ = 0;
  spell_8_ = 0;
  spell_9_ = 0;
  spell_10_ = 0;
  spell_11_ = 0;
  spell_12_ = 0;
  spell_13_ = 0;
  spell_14_ = 0;
  covenant_item_ = 0;
  left_weapon_1_durability_ = 0;
  left_weapon_2_durability_ = 0;
  left_weapon_3_durability_ = 0;
  right_weapon_1_durability_ = 0;
  right_weapon_2_durability_ = 0;
  right_weapon_3_durability_ = 0;
  head_durability_ = 0;
  chest_durability_ = 0;
  hands_durability_ = 0;
  legs_durability_ = 0;
  unknown_59_ = 0;
  unknown_60_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equipment::~Equipment() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.Equipment)
  SharedDtor();
}

void Equipment::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Equipment& Equipment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

Equipment* Equipment::default_instance_ = NULL;

Equipment* Equipment::New() const {
  return new Equipment;
}

void Equipment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Equipment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(left_weapon_1_, chest_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(hands_, quick_item_2_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(quick_item_3_, quick_item_10_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(tool_belt_1_, bolt_1_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(bolt_2_, spell_7_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(spell_8_, covenant_item_);
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(left_weapon_1_durability_, chest_durability_);
  }
  ZR_(hands_durability_, unknown_60_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.Equipment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left_weapon_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_weapon_1_)));
          set_has_left_weapon_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left_weapon_2;
        break;
      }

      // optional int32 left_weapon_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_left_weapon_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_weapon_2_)));
          set_has_left_weapon_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left_weapon_3;
        break;
      }

      // optional int32 left_weapon_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_left_weapon_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_weapon_3_)));
          set_has_left_weapon_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_right_weapon_1;
        break;
      }

      // optional int32 right_weapon_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_right_weapon_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_weapon_1_)));
          set_has_right_weapon_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_right_weapon_2;
        break;
      }

      // optional int32 right_weapon_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_right_weapon_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_weapon_2_)));
          set_has_right_weapon_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_right_weapon_3;
        break;
      }

      // optional int32 right_weapon_3 = 6;
      case 6: {
        if (tag == 48) {
         parse_right_weapon_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_weapon_3_)));
          set_has_right_weapon_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_head;
        break;
      }

      // optional int32 head = 7;
      case 7: {
        if (tag == 56) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_chest;
        break;
      }

      // optional int32 chest = 8;
      case 8: {
        if (tag == 64) {
         parse_chest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chest_)));
          set_has_chest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hands;
        break;
      }

      // optional int32 hands = 9;
      case 9: {
        if (tag == 72) {
         parse_hands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hands_)));
          set_has_hands();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_legs;
        break;
      }

      // optional int32 legs = 10;
      case 10: {
        if (tag == 80) {
         parse_legs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legs_)));
          set_has_legs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ring_1;
        break;
      }

      // optional int32 ring_1 = 11;
      case 11: {
        if (tag == 88) {
         parse_ring_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_1_)));
          set_has_ring_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ring_2;
        break;
      }

      // optional int32 ring_2 = 12;
      case 12: {
        if (tag == 96) {
         parse_ring_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_2_)));
          set_has_ring_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ring_3;
        break;
      }

      // optional int32 ring_3 = 13;
      case 13: {
        if (tag == 104) {
         parse_ring_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_3_)));
          set_has_ring_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ring_4;
        break;
      }

      // optional int32 ring_4 = 14;
      case 14: {
        if (tag == 112) {
         parse_ring_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_4_)));
          set_has_ring_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_quick_item_1;
        break;
      }

      // optional int32 quick_item_1 = 15;
      case 15: {
        if (tag == 120) {
         parse_quick_item_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_1_)));
          set_has_quick_item_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_quick_item_2;
        break;
      }

      // optional int32 quick_item_2 = 16;
      case 16: {
        if (tag == 128) {
         parse_quick_item_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_2_)));
          set_has_quick_item_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_quick_item_3;
        break;
      }

      // optional int32 quick_item_3 = 17;
      case 17: {
        if (tag == 136) {
         parse_quick_item_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_3_)));
          set_has_quick_item_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_quick_item_4;
        break;
      }

      // optional int32 quick_item_4 = 18;
      case 18: {
        if (tag == 144) {
         parse_quick_item_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_4_)));
          set_has_quick_item_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_quick_item_5;
        break;
      }

      // optional int32 quick_item_5 = 19;
      case 19: {
        if (tag == 152) {
         parse_quick_item_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_5_)));
          set_has_quick_item_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_quick_item_6;
        break;
      }

      // optional int32 quick_item_6 = 20;
      case 20: {
        if (tag == 160) {
         parse_quick_item_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_6_)));
          set_has_quick_item_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_quick_item_7;
        break;
      }

      // optional int32 quick_item_7 = 21;
      case 21: {
        if (tag == 168) {
         parse_quick_item_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_7_)));
          set_has_quick_item_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_quick_item_8;
        break;
      }

      // optional int32 quick_item_8 = 22;
      case 22: {
        if (tag == 176) {
         parse_quick_item_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_8_)));
          set_has_quick_item_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_quick_item_9;
        break;
      }

      // optional int32 quick_item_9 = 23;
      case 23: {
        if (tag == 184) {
         parse_quick_item_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_9_)));
          set_has_quick_item_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_quick_item_10;
        break;
      }

      // optional int32 quick_item_10 = 24;
      case 24: {
        if (tag == 192) {
         parse_quick_item_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_item_10_)));
          set_has_quick_item_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_tool_belt_1;
        break;
      }

      // optional int32 tool_belt_1 = 25;
      case 25: {
        if (tag == 200) {
         parse_tool_belt_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_belt_1_)));
          set_has_tool_belt_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_tool_belt_2;
        break;
      }

      // optional int32 tool_belt_2 = 26;
      case 26: {
        if (tag == 208) {
         parse_tool_belt_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_belt_2_)));
          set_has_tool_belt_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_tool_belt_3;
        break;
      }

      // optional int32 tool_belt_3 = 27;
      case 27: {
        if (tag == 216) {
         parse_tool_belt_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_belt_3_)));
          set_has_tool_belt_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_tool_belt_4;
        break;
      }

      // optional int32 tool_belt_4 = 28;
      case 28: {
        if (tag == 224) {
         parse_tool_belt_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_belt_4_)));
          set_has_tool_belt_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_tool_belt_5;
        break;
      }

      // optional int32 tool_belt_5 = 29;
      case 29: {
        if (tag == 232) {
         parse_tool_belt_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_belt_5_)));
          set_has_tool_belt_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_arrow_1;
        break;
      }

      // optional int32 arrow_1 = 30;
      case 30: {
        if (tag == 240) {
         parse_arrow_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrow_1_)));
          set_has_arrow_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_arrow_2;
        break;
      }

      // optional int32 arrow_2 = 31;
      case 31: {
        if (tag == 248) {
         parse_arrow_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrow_2_)));
          set_has_arrow_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_bolt_1;
        break;
      }

      // optional int32 bolt_1 = 32;
      case 32: {
        if (tag == 256) {
         parse_bolt_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bolt_1_)));
          set_has_bolt_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_bolt_2;
        break;
      }

      // optional int32 bolt_2 = 33;
      case 33: {
        if (tag == 264) {
         parse_bolt_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bolt_2_)));
          set_has_bolt_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_spell_1;
        break;
      }

      // optional int32 spell_1 = 34;
      case 34: {
        if (tag == 272) {
         parse_spell_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_1_)));
          set_has_spell_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_spell_2;
        break;
      }

      // optional int32 spell_2 = 35;
      case 35: {
        if (tag == 280) {
         parse_spell_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_2_)));
          set_has_spell_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_spell_3;
        break;
      }

      // optional int32 spell_3 = 36;
      case 36: {
        if (tag == 288) {
         parse_spell_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_3_)));
          set_has_spell_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_spell_4;
        break;
      }

      // optional int32 spell_4 = 37;
      case 37: {
        if (tag == 296) {
         parse_spell_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_4_)));
          set_has_spell_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_spell_5;
        break;
      }

      // optional int32 spell_5 = 38;
      case 38: {
        if (tag == 304) {
         parse_spell_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_5_)));
          set_has_spell_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_spell_6;
        break;
      }

      // optional int32 spell_6 = 39;
      case 39: {
        if (tag == 312) {
         parse_spell_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_6_)));
          set_has_spell_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_spell_7;
        break;
      }

      // optional int32 spell_7 = 40;
      case 40: {
        if (tag == 320) {
         parse_spell_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_7_)));
          set_has_spell_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_spell_8;
        break;
      }

      // optional int32 spell_8 = 41;
      case 41: {
        if (tag == 328) {
         parse_spell_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_8_)));
          set_has_spell_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_spell_9;
        break;
      }

      // optional int32 spell_9 = 42;
      case 42: {
        if (tag == 336) {
         parse_spell_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_9_)));
          set_has_spell_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_spell_10;
        break;
      }

      // optional int32 spell_10 = 43;
      case 43: {
        if (tag == 344) {
         parse_spell_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_10_)));
          set_has_spell_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_spell_11;
        break;
      }

      // optional int32 spell_11 = 44;
      case 44: {
        if (tag == 352) {
         parse_spell_11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_11_)));
          set_has_spell_11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_spell_12;
        break;
      }

      // optional int32 spell_12 = 45;
      case 45: {
        if (tag == 360) {
         parse_spell_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_12_)));
          set_has_spell_12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_spell_13;
        break;
      }

      // optional int32 spell_13 = 46;
      case 46: {
        if (tag == 368) {
         parse_spell_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_13_)));
          set_has_spell_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_spell_14;
        break;
      }

      // optional int32 spell_14 = 47;
      case 47: {
        if (tag == 376) {
         parse_spell_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_14_)));
          set_has_spell_14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_covenant_item;
        break;
      }

      // optional int32 covenant_item = 48;
      case 48: {
        if (tag == 384) {
         parse_covenant_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &covenant_item_)));
          set_has_covenant_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_left_weapon_1_durability;
        break;
      }

      // optional int32 left_weapon_1_durability = 49;
      case 49: {
        if (tag == 392) {
         parse_left_weapon_1_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_weapon_1_durability_)));
          set_has_left_weapon_1_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_left_weapon_2_durability;
        break;
      }

      // optional int32 left_weapon_2_durability = 50;
      case 50: {
        if (tag == 400) {
         parse_left_weapon_2_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_weapon_2_durability_)));
          set_has_left_weapon_2_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_left_weapon_3_durability;
        break;
      }

      // optional int32 left_weapon_3_durability = 51;
      case 51: {
        if (tag == 408) {
         parse_left_weapon_3_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_weapon_3_durability_)));
          set_has_left_weapon_3_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_right_weapon_1_durability;
        break;
      }

      // optional int32 right_weapon_1_durability = 52;
      case 52: {
        if (tag == 416) {
         parse_right_weapon_1_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_weapon_1_durability_)));
          set_has_right_weapon_1_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_right_weapon_2_durability;
        break;
      }

      // optional int32 right_weapon_2_durability = 53;
      case 53: {
        if (tag == 424) {
         parse_right_weapon_2_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_weapon_2_durability_)));
          set_has_right_weapon_2_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_right_weapon_3_durability;
        break;
      }

      // optional int32 right_weapon_3_durability = 54;
      case 54: {
        if (tag == 432) {
         parse_right_weapon_3_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_weapon_3_durability_)));
          set_has_right_weapon_3_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_head_durability;
        break;
      }

      // optional int32 head_durability = 55;
      case 55: {
        if (tag == 440) {
         parse_head_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_durability_)));
          set_has_head_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_chest_durability;
        break;
      }

      // optional int32 chest_durability = 56;
      case 56: {
        if (tag == 448) {
         parse_chest_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chest_durability_)));
          set_has_chest_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_hands_durability;
        break;
      }

      // optional int32 hands_durability = 57;
      case 57: {
        if (tag == 456) {
         parse_hands_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hands_durability_)));
          set_has_hands_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_legs_durability;
        break;
      }

      // optional int32 legs_durability = 58;
      case 58: {
        if (tag == 464) {
         parse_legs_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legs_durability_)));
          set_has_legs_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_unknown_59;
        break;
      }

      // optional int32 unknown_59 = 59;
      case 59: {
        if (tag == 472) {
         parse_unknown_59:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_59_)));
          set_has_unknown_59();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_unknown_60;
        break;
      }

      // optional int32 unknown_60 = 60;
      case 60: {
        if (tag == 480) {
         parse_unknown_60:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_60_)));
          set_has_unknown_60();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.Equipment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.Equipment)
  return false;
#undef DO_
}

void Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.Equipment)
  // optional int32 left_weapon_1 = 1;
  if (has_left_weapon_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left_weapon_1(), output);
  }

  // optional int32 left_weapon_2 = 2;
  if (has_left_weapon_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_weapon_2(), output);
  }

  // optional int32 left_weapon_3 = 3;
  if (has_left_weapon_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_weapon_3(), output);
  }

  // optional int32 right_weapon_1 = 4;
  if (has_right_weapon_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_weapon_1(), output);
  }

  // optional int32 right_weapon_2 = 5;
  if (has_right_weapon_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->right_weapon_2(), output);
  }

  // optional int32 right_weapon_3 = 6;
  if (has_right_weapon_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->right_weapon_3(), output);
  }

  // optional int32 head = 7;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->head(), output);
  }

  // optional int32 chest = 8;
  if (has_chest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->chest(), output);
  }

  // optional int32 hands = 9;
  if (has_hands()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hands(), output);
  }

  // optional int32 legs = 10;
  if (has_legs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->legs(), output);
  }

  // optional int32 ring_1 = 11;
  if (has_ring_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ring_1(), output);
  }

  // optional int32 ring_2 = 12;
  if (has_ring_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ring_2(), output);
  }

  // optional int32 ring_3 = 13;
  if (has_ring_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ring_3(), output);
  }

  // optional int32 ring_4 = 14;
  if (has_ring_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ring_4(), output);
  }

  // optional int32 quick_item_1 = 15;
  if (has_quick_item_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->quick_item_1(), output);
  }

  // optional int32 quick_item_2 = 16;
  if (has_quick_item_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->quick_item_2(), output);
  }

  // optional int32 quick_item_3 = 17;
  if (has_quick_item_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->quick_item_3(), output);
  }

  // optional int32 quick_item_4 = 18;
  if (has_quick_item_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->quick_item_4(), output);
  }

  // optional int32 quick_item_5 = 19;
  if (has_quick_item_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->quick_item_5(), output);
  }

  // optional int32 quick_item_6 = 20;
  if (has_quick_item_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->quick_item_6(), output);
  }

  // optional int32 quick_item_7 = 21;
  if (has_quick_item_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->quick_item_7(), output);
  }

  // optional int32 quick_item_8 = 22;
  if (has_quick_item_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->quick_item_8(), output);
  }

  // optional int32 quick_item_9 = 23;
  if (has_quick_item_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->quick_item_9(), output);
  }

  // optional int32 quick_item_10 = 24;
  if (has_quick_item_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->quick_item_10(), output);
  }

  // optional int32 tool_belt_1 = 25;
  if (has_tool_belt_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tool_belt_1(), output);
  }

  // optional int32 tool_belt_2 = 26;
  if (has_tool_belt_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tool_belt_2(), output);
  }

  // optional int32 tool_belt_3 = 27;
  if (has_tool_belt_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->tool_belt_3(), output);
  }

  // optional int32 tool_belt_4 = 28;
  if (has_tool_belt_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->tool_belt_4(), output);
  }

  // optional int32 tool_belt_5 = 29;
  if (has_tool_belt_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->tool_belt_5(), output);
  }

  // optional int32 arrow_1 = 30;
  if (has_arrow_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->arrow_1(), output);
  }

  // optional int32 arrow_2 = 31;
  if (has_arrow_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->arrow_2(), output);
  }

  // optional int32 bolt_1 = 32;
  if (has_bolt_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->bolt_1(), output);
  }

  // optional int32 bolt_2 = 33;
  if (has_bolt_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->bolt_2(), output);
  }

  // optional int32 spell_1 = 34;
  if (has_spell_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->spell_1(), output);
  }

  // optional int32 spell_2 = 35;
  if (has_spell_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->spell_2(), output);
  }

  // optional int32 spell_3 = 36;
  if (has_spell_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->spell_3(), output);
  }

  // optional int32 spell_4 = 37;
  if (has_spell_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->spell_4(), output);
  }

  // optional int32 spell_5 = 38;
  if (has_spell_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->spell_5(), output);
  }

  // optional int32 spell_6 = 39;
  if (has_spell_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->spell_6(), output);
  }

  // optional int32 spell_7 = 40;
  if (has_spell_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->spell_7(), output);
  }

  // optional int32 spell_8 = 41;
  if (has_spell_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->spell_8(), output);
  }

  // optional int32 spell_9 = 42;
  if (has_spell_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->spell_9(), output);
  }

  // optional int32 spell_10 = 43;
  if (has_spell_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->spell_10(), output);
  }

  // optional int32 spell_11 = 44;
  if (has_spell_11()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->spell_11(), output);
  }

  // optional int32 spell_12 = 45;
  if (has_spell_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->spell_12(), output);
  }

  // optional int32 spell_13 = 46;
  if (has_spell_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->spell_13(), output);
  }

  // optional int32 spell_14 = 47;
  if (has_spell_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->spell_14(), output);
  }

  // optional int32 covenant_item = 48;
  if (has_covenant_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->covenant_item(), output);
  }

  // optional int32 left_weapon_1_durability = 49;
  if (has_left_weapon_1_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->left_weapon_1_durability(), output);
  }

  // optional int32 left_weapon_2_durability = 50;
  if (has_left_weapon_2_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->left_weapon_2_durability(), output);
  }

  // optional int32 left_weapon_3_durability = 51;
  if (has_left_weapon_3_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->left_weapon_3_durability(), output);
  }

  // optional int32 right_weapon_1_durability = 52;
  if (has_right_weapon_1_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->right_weapon_1_durability(), output);
  }

  // optional int32 right_weapon_2_durability = 53;
  if (has_right_weapon_2_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->right_weapon_2_durability(), output);
  }

  // optional int32 right_weapon_3_durability = 54;
  if (has_right_weapon_3_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->right_weapon_3_durability(), output);
  }

  // optional int32 head_durability = 55;
  if (has_head_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->head_durability(), output);
  }

  // optional int32 chest_durability = 56;
  if (has_chest_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->chest_durability(), output);
  }

  // optional int32 hands_durability = 57;
  if (has_hands_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->hands_durability(), output);
  }

  // optional int32 legs_durability = 58;
  if (has_legs_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->legs_durability(), output);
  }

  // optional int32 unknown_59 = 59;
  if (has_unknown_59()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->unknown_59(), output);
  }

  // optional int32 unknown_60 = 60;
  if (has_unknown_60()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->unknown_60(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.Equipment)
}

int Equipment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 left_weapon_1 = 1;
    if (has_left_weapon_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_weapon_1());
    }

    // optional int32 left_weapon_2 = 2;
    if (has_left_weapon_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_weapon_2());
    }

    // optional int32 left_weapon_3 = 3;
    if (has_left_weapon_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_weapon_3());
    }

    // optional int32 right_weapon_1 = 4;
    if (has_right_weapon_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_weapon_1());
    }

    // optional int32 right_weapon_2 = 5;
    if (has_right_weapon_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_weapon_2());
    }

    // optional int32 right_weapon_3 = 6;
    if (has_right_weapon_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_weapon_3());
    }

    // optional int32 head = 7;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional int32 chest = 8;
    if (has_chest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hands = 9;
    if (has_hands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hands());
    }

    // optional int32 legs = 10;
    if (has_legs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legs());
    }

    // optional int32 ring_1 = 11;
    if (has_ring_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_1());
    }

    // optional int32 ring_2 = 12;
    if (has_ring_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_2());
    }

    // optional int32 ring_3 = 13;
    if (has_ring_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_3());
    }

    // optional int32 ring_4 = 14;
    if (has_ring_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_4());
    }

    // optional int32 quick_item_1 = 15;
    if (has_quick_item_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_1());
    }

    // optional int32 quick_item_2 = 16;
    if (has_quick_item_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 quick_item_3 = 17;
    if (has_quick_item_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_3());
    }

    // optional int32 quick_item_4 = 18;
    if (has_quick_item_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_4());
    }

    // optional int32 quick_item_5 = 19;
    if (has_quick_item_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_5());
    }

    // optional int32 quick_item_6 = 20;
    if (has_quick_item_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_6());
    }

    // optional int32 quick_item_7 = 21;
    if (has_quick_item_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_7());
    }

    // optional int32 quick_item_8 = 22;
    if (has_quick_item_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_8());
    }

    // optional int32 quick_item_9 = 23;
    if (has_quick_item_9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_9());
    }

    // optional int32 quick_item_10 = 24;
    if (has_quick_item_10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_item_10());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 tool_belt_1 = 25;
    if (has_tool_belt_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tool_belt_1());
    }

    // optional int32 tool_belt_2 = 26;
    if (has_tool_belt_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tool_belt_2());
    }

    // optional int32 tool_belt_3 = 27;
    if (has_tool_belt_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tool_belt_3());
    }

    // optional int32 tool_belt_4 = 28;
    if (has_tool_belt_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tool_belt_4());
    }

    // optional int32 tool_belt_5 = 29;
    if (has_tool_belt_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tool_belt_5());
    }

    // optional int32 arrow_1 = 30;
    if (has_arrow_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrow_1());
    }

    // optional int32 arrow_2 = 31;
    if (has_arrow_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrow_2());
    }

    // optional int32 bolt_1 = 32;
    if (has_bolt_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bolt_1());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 bolt_2 = 33;
    if (has_bolt_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bolt_2());
    }

    // optional int32 spell_1 = 34;
    if (has_spell_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_1());
    }

    // optional int32 spell_2 = 35;
    if (has_spell_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_2());
    }

    // optional int32 spell_3 = 36;
    if (has_spell_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_3());
    }

    // optional int32 spell_4 = 37;
    if (has_spell_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_4());
    }

    // optional int32 spell_5 = 38;
    if (has_spell_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_5());
    }

    // optional int32 spell_6 = 39;
    if (has_spell_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_6());
    }

    // optional int32 spell_7 = 40;
    if (has_spell_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_7());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 spell_8 = 41;
    if (has_spell_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_8());
    }

    // optional int32 spell_9 = 42;
    if (has_spell_9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_9());
    }

    // optional int32 spell_10 = 43;
    if (has_spell_10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_10());
    }

    // optional int32 spell_11 = 44;
    if (has_spell_11()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_11());
    }

    // optional int32 spell_12 = 45;
    if (has_spell_12()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_12());
    }

    // optional int32 spell_13 = 46;
    if (has_spell_13()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_13());
    }

    // optional int32 spell_14 = 47;
    if (has_spell_14()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_14());
    }

    // optional int32 covenant_item = 48;
    if (has_covenant_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->covenant_item());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 left_weapon_1_durability = 49;
    if (has_left_weapon_1_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_weapon_1_durability());
    }

    // optional int32 left_weapon_2_durability = 50;
    if (has_left_weapon_2_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_weapon_2_durability());
    }

    // optional int32 left_weapon_3_durability = 51;
    if (has_left_weapon_3_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_weapon_3_durability());
    }

    // optional int32 right_weapon_1_durability = 52;
    if (has_right_weapon_1_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_weapon_1_durability());
    }

    // optional int32 right_weapon_2_durability = 53;
    if (has_right_weapon_2_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_weapon_2_durability());
    }

    // optional int32 right_weapon_3_durability = 54;
    if (has_right_weapon_3_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_weapon_3_durability());
    }

    // optional int32 head_durability = 55;
    if (has_head_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_durability());
    }

    // optional int32 chest_durability = 56;
    if (has_chest_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chest_durability());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 hands_durability = 57;
    if (has_hands_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hands_durability());
    }

    // optional int32 legs_durability = 58;
    if (has_legs_durability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legs_durability());
    }

    // optional int32 unknown_59 = 59;
    if (has_unknown_59()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_59());
    }

    // optional int32 unknown_60 = 60;
    if (has_unknown_60()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown_60());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Equipment*>(&from));
}

void Equipment::MergeFrom(const Equipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_weapon_1()) {
      set_left_weapon_1(from.left_weapon_1());
    }
    if (from.has_left_weapon_2()) {
      set_left_weapon_2(from.left_weapon_2());
    }
    if (from.has_left_weapon_3()) {
      set_left_weapon_3(from.left_weapon_3());
    }
    if (from.has_right_weapon_1()) {
      set_right_weapon_1(from.right_weapon_1());
    }
    if (from.has_right_weapon_2()) {
      set_right_weapon_2(from.right_weapon_2());
    }
    if (from.has_right_weapon_3()) {
      set_right_weapon_3(from.right_weapon_3());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_chest()) {
      set_chest(from.chest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hands()) {
      set_hands(from.hands());
    }
    if (from.has_legs()) {
      set_legs(from.legs());
    }
    if (from.has_ring_1()) {
      set_ring_1(from.ring_1());
    }
    if (from.has_ring_2()) {
      set_ring_2(from.ring_2());
    }
    if (from.has_ring_3()) {
      set_ring_3(from.ring_3());
    }
    if (from.has_ring_4()) {
      set_ring_4(from.ring_4());
    }
    if (from.has_quick_item_1()) {
      set_quick_item_1(from.quick_item_1());
    }
    if (from.has_quick_item_2()) {
      set_quick_item_2(from.quick_item_2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_quick_item_3()) {
      set_quick_item_3(from.quick_item_3());
    }
    if (from.has_quick_item_4()) {
      set_quick_item_4(from.quick_item_4());
    }
    if (from.has_quick_item_5()) {
      set_quick_item_5(from.quick_item_5());
    }
    if (from.has_quick_item_6()) {
      set_quick_item_6(from.quick_item_6());
    }
    if (from.has_quick_item_7()) {
      set_quick_item_7(from.quick_item_7());
    }
    if (from.has_quick_item_8()) {
      set_quick_item_8(from.quick_item_8());
    }
    if (from.has_quick_item_9()) {
      set_quick_item_9(from.quick_item_9());
    }
    if (from.has_quick_item_10()) {
      set_quick_item_10(from.quick_item_10());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tool_belt_1()) {
      set_tool_belt_1(from.tool_belt_1());
    }
    if (from.has_tool_belt_2()) {
      set_tool_belt_2(from.tool_belt_2());
    }
    if (from.has_tool_belt_3()) {
      set_tool_belt_3(from.tool_belt_3());
    }
    if (from.has_tool_belt_4()) {
      set_tool_belt_4(from.tool_belt_4());
    }
    if (from.has_tool_belt_5()) {
      set_tool_belt_5(from.tool_belt_5());
    }
    if (from.has_arrow_1()) {
      set_arrow_1(from.arrow_1());
    }
    if (from.has_arrow_2()) {
      set_arrow_2(from.arrow_2());
    }
    if (from.has_bolt_1()) {
      set_bolt_1(from.bolt_1());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_bolt_2()) {
      set_bolt_2(from.bolt_2());
    }
    if (from.has_spell_1()) {
      set_spell_1(from.spell_1());
    }
    if (from.has_spell_2()) {
      set_spell_2(from.spell_2());
    }
    if (from.has_spell_3()) {
      set_spell_3(from.spell_3());
    }
    if (from.has_spell_4()) {
      set_spell_4(from.spell_4());
    }
    if (from.has_spell_5()) {
      set_spell_5(from.spell_5());
    }
    if (from.has_spell_6()) {
      set_spell_6(from.spell_6());
    }
    if (from.has_spell_7()) {
      set_spell_7(from.spell_7());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_spell_8()) {
      set_spell_8(from.spell_8());
    }
    if (from.has_spell_9()) {
      set_spell_9(from.spell_9());
    }
    if (from.has_spell_10()) {
      set_spell_10(from.spell_10());
    }
    if (from.has_spell_11()) {
      set_spell_11(from.spell_11());
    }
    if (from.has_spell_12()) {
      set_spell_12(from.spell_12());
    }
    if (from.has_spell_13()) {
      set_spell_13(from.spell_13());
    }
    if (from.has_spell_14()) {
      set_spell_14(from.spell_14());
    }
    if (from.has_covenant_item()) {
      set_covenant_item(from.covenant_item());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_left_weapon_1_durability()) {
      set_left_weapon_1_durability(from.left_weapon_1_durability());
    }
    if (from.has_left_weapon_2_durability()) {
      set_left_weapon_2_durability(from.left_weapon_2_durability());
    }
    if (from.has_left_weapon_3_durability()) {
      set_left_weapon_3_durability(from.left_weapon_3_durability());
    }
    if (from.has_right_weapon_1_durability()) {
      set_right_weapon_1_durability(from.right_weapon_1_durability());
    }
    if (from.has_right_weapon_2_durability()) {
      set_right_weapon_2_durability(from.right_weapon_2_durability());
    }
    if (from.has_right_weapon_3_durability()) {
      set_right_weapon_3_durability(from.right_weapon_3_durability());
    }
    if (from.has_head_durability()) {
      set_head_durability(from.head_durability());
    }
    if (from.has_chest_durability()) {
      set_chest_durability(from.chest_durability());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_hands_durability()) {
      set_hands_durability(from.hands_durability());
    }
    if (from.has_legs_durability()) {
      set_legs_durability(from.legs_durability());
    }
    if (from.has_unknown_59()) {
      set_unknown_59(from.unknown_59());
    }
    if (from.has_unknown_60()) {
      set_unknown_60(from.unknown_60());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Equipment::CopyFrom(const Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {

  return true;
}

void Equipment::Swap(Equipment* other) {
  if (other != this) {
    std::swap(left_weapon_1_, other->left_weapon_1_);
    std::swap(left_weapon_2_, other->left_weapon_2_);
    std::swap(left_weapon_3_, other->left_weapon_3_);
    std::swap(right_weapon_1_, other->right_weapon_1_);
    std::swap(right_weapon_2_, other->right_weapon_2_);
    std::swap(right_weapon_3_, other->right_weapon_3_);
    std::swap(head_, other->head_);
    std::swap(chest_, other->chest_);
    std::swap(hands_, other->hands_);
    std::swap(legs_, other->legs_);
    std::swap(ring_1_, other->ring_1_);
    std::swap(ring_2_, other->ring_2_);
    std::swap(ring_3_, other->ring_3_);
    std::swap(ring_4_, other->ring_4_);
    std::swap(quick_item_1_, other->quick_item_1_);
    std::swap(quick_item_2_, other->quick_item_2_);
    std::swap(quick_item_3_, other->quick_item_3_);
    std::swap(quick_item_4_, other->quick_item_4_);
    std::swap(quick_item_5_, other->quick_item_5_);
    std::swap(quick_item_6_, other->quick_item_6_);
    std::swap(quick_item_7_, other->quick_item_7_);
    std::swap(quick_item_8_, other->quick_item_8_);
    std::swap(quick_item_9_, other->quick_item_9_);
    std::swap(quick_item_10_, other->quick_item_10_);
    std::swap(tool_belt_1_, other->tool_belt_1_);
    std::swap(tool_belt_2_, other->tool_belt_2_);
    std::swap(tool_belt_3_, other->tool_belt_3_);
    std::swap(tool_belt_4_, other->tool_belt_4_);
    std::swap(tool_belt_5_, other->tool_belt_5_);
    std::swap(arrow_1_, other->arrow_1_);
    std::swap(arrow_2_, other->arrow_2_);
    std::swap(bolt_1_, other->bolt_1_);
    std::swap(bolt_2_, other->bolt_2_);
    std::swap(spell_1_, other->spell_1_);
    std::swap(spell_2_, other->spell_2_);
    std::swap(spell_3_, other->spell_3_);
    std::swap(spell_4_, other->spell_4_);
    std::swap(spell_5_, other->spell_5_);
    std::swap(spell_6_, other->spell_6_);
    std::swap(spell_7_, other->spell_7_);
    std::swap(spell_8_, other->spell_8_);
    std::swap(spell_9_, other->spell_9_);
    std::swap(spell_10_, other->spell_10_);
    std::swap(spell_11_, other->spell_11_);
    std::swap(spell_12_, other->spell_12_);
    std::swap(spell_13_, other->spell_13_);
    std::swap(spell_14_, other->spell_14_);
    std::swap(covenant_item_, other->covenant_item_);
    std::swap(left_weapon_1_durability_, other->left_weapon_1_durability_);
    std::swap(left_weapon_2_durability_, other->left_weapon_2_durability_);
    std::swap(left_weapon_3_durability_, other->left_weapon_3_durability_);
    std::swap(right_weapon_1_durability_, other->right_weapon_1_durability_);
    std::swap(right_weapon_2_durability_, other->right_weapon_2_durability_);
    std::swap(right_weapon_3_durability_, other->right_weapon_3_durability_);
    std::swap(head_durability_, other->head_durability_);
    std::swap(chest_durability_, other->chest_durability_);
    std::swap(hands_durability_, other->hands_durability_);
    std::swap(legs_durability_, other->legs_durability_);
    std::swap(unknown_59_, other->unknown_59_);
    std::swap(unknown_60_, other->unknown_60_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Equipment::GetTypeName() const {
  return "DS3_Frpg2PlayerData.Equipment";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLocation::kMapIdFieldNumber;
const int PlayerLocation::kOnlineAreaIdFieldNumber;
#endif  // !_MSC_VER

PlayerLocation::PlayerLocation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.PlayerLocation)
}

void PlayerLocation::InitAsDefaultInstance() {
}

PlayerLocation::PlayerLocation(const PlayerLocation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.PlayerLocation)
}

void PlayerLocation::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  online_area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLocation::~PlayerLocation() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.PlayerLocation)
  SharedDtor();
}

void PlayerLocation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerLocation& PlayerLocation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

PlayerLocation* PlayerLocation::default_instance_ = NULL;

PlayerLocation* PlayerLocation::New() const {
  return new PlayerLocation;
}

void PlayerLocation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerLocation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(map_id_, online_area_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.PlayerLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online_area_id;
        break;
      }

      // optional uint32 online_area_id = 2;
      case 2: {
        if (tag == 16) {
         parse_online_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_area_id_)));
          set_has_online_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.PlayerLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.PlayerLocation)
  return false;
#undef DO_
}

void PlayerLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.PlayerLocation)
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 online_area_id = 2;
  if (has_online_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online_area_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.PlayerLocation)
}

int PlayerLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 online_area_id = 2;
    if (has_online_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_area_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLocation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerLocation*>(&from));
}

void PlayerLocation::MergeFrom(const PlayerLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_online_area_id()) {
      set_online_area_id(from.online_area_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerLocation::CopyFrom(const PlayerLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLocation::IsInitialized() const {

  return true;
}

void PlayerLocation::Swap(PlayerLocation* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(online_area_id_, other->online_area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerLocation::GetTypeName() const {
  return "DS3_Frpg2PlayerData.PlayerLocation";
}


// ===================================================================

#ifndef _MSC_VER
const int DefenseInfo::kPhysicalFieldNumber;
const int DefenseInfo::kStrikeFieldNumber;
const int DefenseInfo::kSlashFieldNumber;
const int DefenseInfo::kThrustFieldNumber;
const int DefenseInfo::kMagicFieldNumber;
const int DefenseInfo::kFireFieldNumber;
const int DefenseInfo::kLightningFieldNumber;
const int DefenseInfo::kDarkFieldNumber;
#endif  // !_MSC_VER

DefenseInfo::DefenseInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.DefenseInfo)
}

void DefenseInfo::InitAsDefaultInstance() {
}

DefenseInfo::DefenseInfo(const DefenseInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.DefenseInfo)
}

void DefenseInfo::SharedCtor() {
  _cached_size_ = 0;
  physical_ = 0u;
  strike_ = 0u;
  slash_ = 0u;
  thrust_ = 0u;
  magic_ = 0u;
  fire_ = 0u;
  lightning_ = 0u;
  dark_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefenseInfo::~DefenseInfo() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.DefenseInfo)
  SharedDtor();
}

void DefenseInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DefenseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DefenseInfo& DefenseInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

DefenseInfo* DefenseInfo::default_instance_ = NULL;

DefenseInfo* DefenseInfo::New() const {
  return new DefenseInfo;
}

void DefenseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DefenseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(physical_, dark_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DefenseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.DefenseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 physical = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_)));
          set_has_physical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_strike;
        break;
      }

      // optional uint32 strike = 2;
      case 2: {
        if (tag == 16) {
         parse_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strike_)));
          set_has_strike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slash;
        break;
      }

      // optional uint32 slash = 3;
      case 3: {
        if (tag == 24) {
         parse_slash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slash_)));
          set_has_slash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_thrust;
        break;
      }

      // optional uint32 thrust = 4;
      case 4: {
        if (tag == 32) {
         parse_thrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thrust_)));
          set_has_thrust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_magic;
        break;
      }

      // optional uint32 magic = 5;
      case 5: {
        if (tag == 40) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fire;
        break;
      }

      // optional uint32 fire = 6;
      case 6: {
        if (tag == 48) {
         parse_fire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lightning;
        break;
      }

      // optional uint32 lightning = 7;
      case 7: {
        if (tag == 56) {
         parse_lightning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightning_)));
          set_has_lightning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dark;
        break;
      }

      // optional uint32 dark = 8;
      case 8: {
        if (tag == 64) {
         parse_dark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dark_)));
          set_has_dark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.DefenseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.DefenseInfo)
  return false;
#undef DO_
}

void DefenseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.DefenseInfo)
  // optional uint32 physical = 1;
  if (has_physical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->physical(), output);
  }

  // optional uint32 strike = 2;
  if (has_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strike(), output);
  }

  // optional uint32 slash = 3;
  if (has_slash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slash(), output);
  }

  // optional uint32 thrust = 4;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thrust(), output);
  }

  // optional uint32 magic = 5;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->magic(), output);
  }

  // optional uint32 fire = 6;
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fire(), output);
  }

  // optional uint32 lightning = 7;
  if (has_lightning()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lightning(), output);
  }

  // optional uint32 dark = 8;
  if (has_dark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dark(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.DefenseInfo)
}

int DefenseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 physical = 1;
    if (has_physical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical());
    }

    // optional uint32 strike = 2;
    if (has_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strike());
    }

    // optional uint32 slash = 3;
    if (has_slash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slash());
    }

    // optional uint32 thrust = 4;
    if (has_thrust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thrust());
    }

    // optional uint32 magic = 5;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic());
    }

    // optional uint32 fire = 6;
    if (has_fire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fire());
    }

    // optional uint32 lightning = 7;
    if (has_lightning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lightning());
    }

    // optional uint32 dark = 8;
    if (has_dark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dark());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefenseInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DefenseInfo*>(&from));
}

void DefenseInfo::MergeFrom(const DefenseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical()) {
      set_physical(from.physical());
    }
    if (from.has_strike()) {
      set_strike(from.strike());
    }
    if (from.has_slash()) {
      set_slash(from.slash());
    }
    if (from.has_thrust()) {
      set_thrust(from.thrust());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_fire()) {
      set_fire(from.fire());
    }
    if (from.has_lightning()) {
      set_lightning(from.lightning());
    }
    if (from.has_dark()) {
      set_dark(from.dark());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DefenseInfo::CopyFrom(const DefenseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefenseInfo::IsInitialized() const {

  return true;
}

void DefenseInfo::Swap(DefenseInfo* other) {
  if (other != this) {
    std::swap(physical_, other->physical_);
    std::swap(strike_, other->strike_);
    std::swap(slash_, other->slash_);
    std::swap(thrust_, other->thrust_);
    std::swap(magic_, other->magic_);
    std::swap(fire_, other->fire_);
    std::swap(lightning_, other->lightning_);
    std::swap(dark_, other->dark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DefenseInfo::GetTypeName() const {
  return "DS3_Frpg2PlayerData.DefenseInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CutRateInfo::kPhysicalFieldNumber;
const int CutRateInfo::kStrikeFieldNumber;
const int CutRateInfo::kSlashFieldNumber;
const int CutRateInfo::kThrustFieldNumber;
const int CutRateInfo::kMagicFieldNumber;
const int CutRateInfo::kFireFieldNumber;
const int CutRateInfo::kLightningFieldNumber;
const int CutRateInfo::kDarkFieldNumber;
#endif  // !_MSC_VER

CutRateInfo::CutRateInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.CutRateInfo)
}

void CutRateInfo::InitAsDefaultInstance() {
}

CutRateInfo::CutRateInfo(const CutRateInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.CutRateInfo)
}

void CutRateInfo::SharedCtor() {
  _cached_size_ = 0;
  physical_ = 0;
  strike_ = 0;
  slash_ = 0;
  thrust_ = 0;
  magic_ = 0;
  fire_ = 0;
  lightning_ = 0;
  dark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CutRateInfo::~CutRateInfo() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.CutRateInfo)
  SharedDtor();
}

void CutRateInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CutRateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CutRateInfo& CutRateInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

CutRateInfo* CutRateInfo::default_instance_ = NULL;

CutRateInfo* CutRateInfo::New() const {
  return new CutRateInfo;
}

void CutRateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CutRateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(physical_, dark_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CutRateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.CutRateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float physical = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &physical_)));
          set_has_physical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_strike;
        break;
      }

      // optional float strike = 2;
      case 2: {
        if (tag == 21) {
         parse_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strike_)));
          set_has_strike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_slash;
        break;
      }

      // optional float slash = 3;
      case 3: {
        if (tag == 29) {
         parse_slash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slash_)));
          set_has_slash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_thrust;
        break;
      }

      // optional float thrust = 4;
      case 4: {
        if (tag == 37) {
         parse_thrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thrust_)));
          set_has_thrust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_magic;
        break;
      }

      // optional float magic = 5;
      case 5: {
        if (tag == 45) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_fire;
        break;
      }

      // optional float fire = 6;
      case 6: {
        if (tag == 53) {
         parse_fire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_lightning;
        break;
      }

      // optional float lightning = 7;
      case 7: {
        if (tag == 61) {
         parse_lightning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightning_)));
          set_has_lightning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_dark;
        break;
      }

      // optional float dark = 8;
      case 8: {
        if (tag == 69) {
         parse_dark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dark_)));
          set_has_dark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.CutRateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.CutRateInfo)
  return false;
#undef DO_
}

void CutRateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.CutRateInfo)
  // optional float physical = 1;
  if (has_physical()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->physical(), output);
  }

  // optional float strike = 2;
  if (has_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->strike(), output);
  }

  // optional float slash = 3;
  if (has_slash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->slash(), output);
  }

  // optional float thrust = 4;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->thrust(), output);
  }

  // optional float magic = 5;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->magic(), output);
  }

  // optional float fire = 6;
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fire(), output);
  }

  // optional float lightning = 7;
  if (has_lightning()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lightning(), output);
  }

  // optional float dark = 8;
  if (has_dark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dark(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.CutRateInfo)
}

int CutRateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float physical = 1;
    if (has_physical()) {
      total_size += 1 + 4;
    }

    // optional float strike = 2;
    if (has_strike()) {
      total_size += 1 + 4;
    }

    // optional float slash = 3;
    if (has_slash()) {
      total_size += 1 + 4;
    }

    // optional float thrust = 4;
    if (has_thrust()) {
      total_size += 1 + 4;
    }

    // optional float magic = 5;
    if (has_magic()) {
      total_size += 1 + 4;
    }

    // optional float fire = 6;
    if (has_fire()) {
      total_size += 1 + 4;
    }

    // optional float lightning = 7;
    if (has_lightning()) {
      total_size += 1 + 4;
    }

    // optional float dark = 8;
    if (has_dark()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutRateInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CutRateInfo*>(&from));
}

void CutRateInfo::MergeFrom(const CutRateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical()) {
      set_physical(from.physical());
    }
    if (from.has_strike()) {
      set_strike(from.strike());
    }
    if (from.has_slash()) {
      set_slash(from.slash());
    }
    if (from.has_thrust()) {
      set_thrust(from.thrust());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_fire()) {
      set_fire(from.fire());
    }
    if (from.has_lightning()) {
      set_lightning(from.lightning());
    }
    if (from.has_dark()) {
      set_dark(from.dark());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CutRateInfo::CopyFrom(const CutRateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutRateInfo::IsInitialized() const {

  return true;
}

void CutRateInfo::Swap(CutRateInfo* other) {
  if (other != this) {
    std::swap(physical_, other->physical_);
    std::swap(strike_, other->strike_);
    std::swap(slash_, other->slash_);
    std::swap(thrust_, other->thrust_);
    std::swap(magic_, other->magic_);
    std::swap(fire_, other->fire_);
    std::swap(lightning_, other->lightning_);
    std::swap(dark_, other->dark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CutRateInfo::GetTypeName() const {
  return "DS3_Frpg2PlayerData.CutRateInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ResistanceInfo::kBleedFieldNumber;
const int ResistanceInfo::kPoisonFieldNumber;
const int ResistanceInfo::kFrostFieldNumber;
const int ResistanceInfo::kCurseFieldNumber;
#endif  // !_MSC_VER

ResistanceInfo::ResistanceInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.ResistanceInfo)
}

void ResistanceInfo::InitAsDefaultInstance() {
}

ResistanceInfo::ResistanceInfo(const ResistanceInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.ResistanceInfo)
}

void ResistanceInfo::SharedCtor() {
  _cached_size_ = 0;
  bleed_ = 0u;
  poison_ = 0u;
  frost_ = 0u;
  curse_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResistanceInfo::~ResistanceInfo() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.ResistanceInfo)
  SharedDtor();
}

void ResistanceInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResistanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResistanceInfo& ResistanceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

ResistanceInfo* ResistanceInfo::default_instance_ = NULL;

ResistanceInfo* ResistanceInfo::New() const {
  return new ResistanceInfo;
}

void ResistanceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResistanceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bleed_, curse_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ResistanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.ResistanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bleed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bleed_)));
          set_has_bleed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_poison;
        break;
      }

      // optional uint32 poison = 2;
      case 2: {
        if (tag == 16) {
         parse_poison:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poison_)));
          set_has_poison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frost;
        break;
      }

      // optional uint32 frost = 3;
      case 3: {
        if (tag == 24) {
         parse_frost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frost_)));
          set_has_frost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curse;
        break;
      }

      // optional uint32 curse = 4;
      case 4: {
        if (tag == 32) {
         parse_curse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curse_)));
          set_has_curse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.ResistanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.ResistanceInfo)
  return false;
#undef DO_
}

void ResistanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.ResistanceInfo)
  // optional uint32 bleed = 1;
  if (has_bleed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bleed(), output);
  }

  // optional uint32 poison = 2;
  if (has_poison()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->poison(), output);
  }

  // optional uint32 frost = 3;
  if (has_frost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frost(), output);
  }

  // optional uint32 curse = 4;
  if (has_curse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curse(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.ResistanceInfo)
}

int ResistanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bleed = 1;
    if (has_bleed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bleed());
    }

    // optional uint32 poison = 2;
    if (has_poison()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poison());
    }

    // optional uint32 frost = 3;
    if (has_frost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frost());
    }

    // optional uint32 curse = 4;
    if (has_curse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curse());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResistanceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResistanceInfo*>(&from));
}

void ResistanceInfo::MergeFrom(const ResistanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bleed()) {
      set_bleed(from.bleed());
    }
    if (from.has_poison()) {
      set_poison(from.poison());
    }
    if (from.has_frost()) {
      set_frost(from.frost());
    }
    if (from.has_curse()) {
      set_curse(from.curse());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ResistanceInfo::CopyFrom(const ResistanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResistanceInfo::IsInitialized() const {

  return true;
}

void ResistanceInfo::Swap(ResistanceInfo* other) {
  if (other != this) {
    std::swap(bleed_, other->bleed_);
    std::swap(poison_, other->poison_);
    std::swap(frost_, other->frost_);
    std::swap(curse_, other->curse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResistanceInfo::GetTypeName() const {
  return "DS3_Frpg2PlayerData.ResistanceInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vector& Vector::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.Vector)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.Vector)
}

int Vector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vector*>(&from));
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Vector::GetTypeName() const {
  return "DS3_Frpg2PlayerData.Vector";
}


// ===================================================================

#ifndef _MSC_VER
const int BonfireInfo::kBonfireIdFieldNumber;
const int BonfireInfo::kHasBeenLitFieldNumber;
#endif  // !_MSC_VER

BonfireInfo::BonfireInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS3_Frpg2PlayerData.BonfireInfo)
}

void BonfireInfo::InitAsDefaultInstance() {
}

BonfireInfo::BonfireInfo(const BonfireInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS3_Frpg2PlayerData.BonfireInfo)
}

void BonfireInfo::SharedCtor() {
  _cached_size_ = 0;
  bonfire_id_ = 0u;
  has_been_lit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BonfireInfo::~BonfireInfo() {
  // @@protoc_insertion_point(destructor:DS3_Frpg2PlayerData.BonfireInfo)
  SharedDtor();
}

void BonfireInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BonfireInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BonfireInfo& BonfireInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DS3_5fFrpg2PlayerData_2eproto();
#endif
  return *default_instance_;
}

BonfireInfo* BonfireInfo::default_instance_ = NULL;

BonfireInfo* BonfireInfo::New() const {
  return new BonfireInfo;
}

void BonfireInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BonfireInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bonfire_id_, has_been_lit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BonfireInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DS3_Frpg2PlayerData.BonfireInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bonfire_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonfire_id_)));
          set_has_bonfire_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_has_been_lit;
        break;
      }

      // required uint32 has_been_lit = 2;
      case 2: {
        if (tag == 16) {
         parse_has_been_lit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_been_lit_)));
          set_has_has_been_lit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS3_Frpg2PlayerData.BonfireInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS3_Frpg2PlayerData.BonfireInfo)
  return false;
#undef DO_
}

void BonfireInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS3_Frpg2PlayerData.BonfireInfo)
  // required uint32 bonfire_id = 1;
  if (has_bonfire_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bonfire_id(), output);
  }

  // required uint32 has_been_lit = 2;
  if (has_has_been_lit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->has_been_lit(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DS3_Frpg2PlayerData.BonfireInfo)
}

int BonfireInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bonfire_id = 1;
    if (has_bonfire_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonfire_id());
    }

    // required uint32 has_been_lit = 2;
    if (has_has_been_lit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->has_been_lit());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BonfireInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BonfireInfo*>(&from));
}

void BonfireInfo::MergeFrom(const BonfireInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonfire_id()) {
      set_bonfire_id(from.bonfire_id());
    }
    if (from.has_has_been_lit()) {
      set_has_been_lit(from.has_been_lit());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BonfireInfo::CopyFrom(const BonfireInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BonfireInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BonfireInfo::Swap(BonfireInfo* other) {
  if (other != this) {
    std::swap(bonfire_id_, other->bonfire_id_);
    std::swap(has_been_lit_, other->has_been_lit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BonfireInfo::GetTypeName() const {
  return "DS3_Frpg2PlayerData.BonfireInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DS3_Frpg2PlayerData

// @@protoc_insertion_point(global_scope)
