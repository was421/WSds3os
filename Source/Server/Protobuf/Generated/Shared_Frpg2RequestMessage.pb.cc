// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Shared_Frpg2RequestMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Shared_Frpg2RequestMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Shared_Frpg2RequestMessage {

void protobuf_ShutdownFile_Shared_5fFrpg2RequestMessage_2eproto() {
  delete RequestQueryLoginServerInfo::default_instance_;
  delete RequestQueryLoginServerInfoResponse::default_instance_;
  delete RequestQueryLoginServerInfoForXboxOne::default_instance_;
  delete RequestHandshake::default_instance_;
  delete RequestHandshakeResponse::default_instance_;
  delete GetServiceStatus::default_instance_;
  delete GetServiceStatusForXboxOne::default_instance_;
  delete GetServiceStatusResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RequestQueryLoginServerInfo::default_instance_ = new RequestQueryLoginServerInfo();
  RequestQueryLoginServerInfoResponse::default_instance_ = new RequestQueryLoginServerInfoResponse();
  RequestQueryLoginServerInfoForXboxOne::default_instance_ = new RequestQueryLoginServerInfoForXboxOne();
  RequestHandshake::default_instance_ = new RequestHandshake();
  RequestHandshakeResponse::default_instance_ = new RequestHandshakeResponse();
  GetServiceStatus::default_instance_ = new GetServiceStatus();
  GetServiceStatusForXboxOne::default_instance_ = new GetServiceStatusForXboxOne();
  GetServiceStatusResponse::default_instance_ = new GetServiceStatusResponse();
  RequestQueryLoginServerInfo::default_instance_->InitAsDefaultInstance();
  RequestQueryLoginServerInfoResponse::default_instance_->InitAsDefaultInstance();
  RequestQueryLoginServerInfoForXboxOne::default_instance_->InitAsDefaultInstance();
  RequestHandshake::default_instance_->InitAsDefaultInstance();
  RequestHandshakeResponse::default_instance_->InitAsDefaultInstance();
  GetServiceStatus::default_instance_->InitAsDefaultInstance();
  GetServiceStatusForXboxOne::default_instance_->InitAsDefaultInstance();
  GetServiceStatusResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Shared_5fFrpg2RequestMessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto_once_);
void protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto_once_,
                 &protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Shared_5fFrpg2RequestMessage_2eproto {
  StaticDescriptorInitializer_Shared_5fFrpg2RequestMessage_2eproto() {
    protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
  }
} static_descriptor_initializer_Shared_5fFrpg2RequestMessage_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RequestQueryLoginServerInfo::kSteamIdFieldNumber;
const int RequestQueryLoginServerInfo::kF2FieldNumber;
const int RequestQueryLoginServerInfo::kAppVersionFieldNumber;
#endif  // !_MSC_VER

RequestQueryLoginServerInfo::RequestQueryLoginServerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
}

void RequestQueryLoginServerInfo::InitAsDefaultInstance() {
}

RequestQueryLoginServerInfo::RequestQueryLoginServerInfo(const RequestQueryLoginServerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
}

void RequestQueryLoginServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQueryLoginServerInfo::~RequestQueryLoginServerInfo() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
  SharedDtor();
}

void RequestQueryLoginServerInfo::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  if (f2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestQueryLoginServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestQueryLoginServerInfo& RequestQueryLoginServerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestQueryLoginServerInfo* RequestQueryLoginServerInfo::default_instance_ = NULL;

RequestQueryLoginServerInfo* RequestQueryLoginServerInfo::New() const {
  return new RequestQueryLoginServerInfo;
}

void RequestQueryLoginServerInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
    if (has_f2()) {
      if (f2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f2_->clear();
      }
    }
    app_version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestQueryLoginServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string steam_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f2;
        break;
      }

      // optional string f2 = 2;
      case 2: {
        if (tag == 18) {
         parse_f2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_app_version;
        break;
      }

      // required uint64 app_version = 3;
      case 3: {
        if (tag == 24) {
         parse_app_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &app_version_)));
          set_has_app_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
  return false;
#undef DO_
}

void RequestQueryLoginServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
  // required string steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->steam_id(), output);
  }

  // optional string f2 = 2;
  if (has_f2()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f2(), output);
  }

  // required uint64 app_version = 3;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->app_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo)
}

int RequestQueryLoginServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // optional string f2 = 2;
    if (has_f2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f2());
    }

    // required uint64 app_version = 3;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->app_version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQueryLoginServerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestQueryLoginServerInfo*>(&from));
}

void RequestQueryLoginServerInfo::MergeFrom(const RequestQueryLoginServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_f2()) {
      set_f2(from.f2());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestQueryLoginServerInfo::CopyFrom(const RequestQueryLoginServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryLoginServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void RequestQueryLoginServerInfo::Swap(RequestQueryLoginServerInfo* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(f2_, other->f2_);
    std::swap(app_version_, other->app_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestQueryLoginServerInfo::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.RequestQueryLoginServerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestQueryLoginServerInfoResponse::kPortFieldNumber;
const int RequestQueryLoginServerInfoResponse::kServerIpFieldNumber;
#endif  // !_MSC_VER

RequestQueryLoginServerInfoResponse::RequestQueryLoginServerInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
}

void RequestQueryLoginServerInfoResponse::InitAsDefaultInstance() {
}

RequestQueryLoginServerInfoResponse::RequestQueryLoginServerInfoResponse(const RequestQueryLoginServerInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
}

void RequestQueryLoginServerInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  port_ = GOOGLE_LONGLONG(0);
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQueryLoginServerInfoResponse::~RequestQueryLoginServerInfoResponse() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
  SharedDtor();
}

void RequestQueryLoginServerInfoResponse::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestQueryLoginServerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestQueryLoginServerInfoResponse& RequestQueryLoginServerInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestQueryLoginServerInfoResponse* RequestQueryLoginServerInfoResponse::default_instance_ = NULL;

RequestQueryLoginServerInfoResponse* RequestQueryLoginServerInfoResponse::New() const {
  return new RequestQueryLoginServerInfoResponse;
}

void RequestQueryLoginServerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    port_ = GOOGLE_LONGLONG(0);
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestQueryLoginServerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_ip;
        break;
      }

      // required string server_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
  return false;
#undef DO_
}

void RequestQueryLoginServerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
  // required int64 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->port(), output);
  }

  // required string server_ip = 2;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_ip(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse)
}

int RequestQueryLoginServerInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->port());
    }

    // required string server_ip = 2;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQueryLoginServerInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestQueryLoginServerInfoResponse*>(&from));
}

void RequestQueryLoginServerInfoResponse::MergeFrom(const RequestQueryLoginServerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestQueryLoginServerInfoResponse::CopyFrom(const RequestQueryLoginServerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryLoginServerInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestQueryLoginServerInfoResponse::Swap(RequestQueryLoginServerInfoResponse* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestQueryLoginServerInfoResponse::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestQueryLoginServerInfoForXboxOne::RequestQueryLoginServerInfoForXboxOne()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
}

void RequestQueryLoginServerInfoForXboxOne::InitAsDefaultInstance() {
}

RequestQueryLoginServerInfoForXboxOne::RequestQueryLoginServerInfoForXboxOne(const RequestQueryLoginServerInfoForXboxOne& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
}

void RequestQueryLoginServerInfoForXboxOne::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQueryLoginServerInfoForXboxOne::~RequestQueryLoginServerInfoForXboxOne() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
  SharedDtor();
}

void RequestQueryLoginServerInfoForXboxOne::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestQueryLoginServerInfoForXboxOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestQueryLoginServerInfoForXboxOne& RequestQueryLoginServerInfoForXboxOne::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestQueryLoginServerInfoForXboxOne* RequestQueryLoginServerInfoForXboxOne::default_instance_ = NULL;

RequestQueryLoginServerInfoForXboxOne* RequestQueryLoginServerInfoForXboxOne::New() const {
  return new RequestQueryLoginServerInfoForXboxOne;
}

void RequestQueryLoginServerInfoForXboxOne::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestQueryLoginServerInfoForXboxOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
  return false;
#undef DO_
}

void RequestQueryLoginServerInfoForXboxOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne)
}

int RequestQueryLoginServerInfoForXboxOne::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQueryLoginServerInfoForXboxOne::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestQueryLoginServerInfoForXboxOne*>(&from));
}

void RequestQueryLoginServerInfoForXboxOne::MergeFrom(const RequestQueryLoginServerInfoForXboxOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestQueryLoginServerInfoForXboxOne::CopyFrom(const RequestQueryLoginServerInfoForXboxOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryLoginServerInfoForXboxOne::IsInitialized() const {

  return true;
}

void RequestQueryLoginServerInfoForXboxOne::Swap(RequestQueryLoginServerInfoForXboxOne* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestQueryLoginServerInfoForXboxOne::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.RequestQueryLoginServerInfoForXboxOne";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHandshake::kAesCwcKeyFieldNumber;
#endif  // !_MSC_VER

RequestHandshake::RequestHandshake()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.RequestHandshake)
}

void RequestHandshake::InitAsDefaultInstance() {
}

RequestHandshake::RequestHandshake(const RequestHandshake& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.RequestHandshake)
}

void RequestHandshake::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aes_cwc_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHandshake::~RequestHandshake() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.RequestHandshake)
  SharedDtor();
}

void RequestHandshake::SharedDtor() {
  if (aes_cwc_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aes_cwc_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestHandshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestHandshake& RequestHandshake::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestHandshake* RequestHandshake::default_instance_ = NULL;

RequestHandshake* RequestHandshake::New() const {
  return new RequestHandshake;
}

void RequestHandshake::Clear() {
  if (has_aes_cwc_key()) {
    if (aes_cwc_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      aes_cwc_key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.RequestHandshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes aes_cwc_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aes_cwc_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.RequestHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.RequestHandshake)
  return false;
#undef DO_
}

void RequestHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.RequestHandshake)
  // required bytes aes_cwc_key = 1;
  if (has_aes_cwc_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->aes_cwc_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.RequestHandshake)
}

int RequestHandshake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes aes_cwc_key = 1;
    if (has_aes_cwc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aes_cwc_key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHandshake::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestHandshake*>(&from));
}

void RequestHandshake::MergeFrom(const RequestHandshake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aes_cwc_key()) {
      set_aes_cwc_key(from.aes_cwc_key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestHandshake::CopyFrom(const RequestHandshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHandshake::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestHandshake::Swap(RequestHandshake* other) {
  if (other != this) {
    std::swap(aes_cwc_key_, other->aes_cwc_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestHandshake::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.RequestHandshake";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestHandshakeResponse::RequestHandshakeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
}

void RequestHandshakeResponse::InitAsDefaultInstance() {
}

RequestHandshakeResponse::RequestHandshakeResponse(const RequestHandshakeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
}

void RequestHandshakeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHandshakeResponse::~RequestHandshakeResponse() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
  SharedDtor();
}

void RequestHandshakeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestHandshakeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestHandshakeResponse& RequestHandshakeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

RequestHandshakeResponse* RequestHandshakeResponse::default_instance_ = NULL;

RequestHandshakeResponse* RequestHandshakeResponse::New() const {
  return new RequestHandshakeResponse;
}

void RequestHandshakeResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestHandshakeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
  return false;
#undef DO_
}

void RequestHandshakeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.RequestHandshakeResponse)
}

int RequestHandshakeResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHandshakeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestHandshakeResponse*>(&from));
}

void RequestHandshakeResponse::MergeFrom(const RequestHandshakeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestHandshakeResponse::CopyFrom(const RequestHandshakeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHandshakeResponse::IsInitialized() const {

  return true;
}

void RequestHandshakeResponse::Swap(RequestHandshakeResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestHandshakeResponse::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.RequestHandshakeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceStatus::kIdFieldNumber;
const int GetServiceStatus::kSteamIdFieldNumber;
const int GetServiceStatus::kUnknown1FieldNumber;
const int GetServiceStatus::kAppVersionFieldNumber;
#endif  // !_MSC_VER

GetServiceStatus::GetServiceStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.GetServiceStatus)
}

void GetServiceStatus::InitAsDefaultInstance() {
}

GetServiceStatus::GetServiceStatus(const GetServiceStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.GetServiceStatus)
}

void GetServiceStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceStatus::~GetServiceStatus() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.GetServiceStatus)
  SharedDtor();
}

void GetServiceStatus::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  if (unknown_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unknown_1_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetServiceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetServiceStatus& GetServiceStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

GetServiceStatus* GetServiceStatus::default_instance_ = NULL;

GetServiceStatus* GetServiceStatus::New() const {
  return new GetServiceStatus;
}

void GetServiceStatus::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
    if (has_unknown_1()) {
      if (unknown_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unknown_1_->clear();
      }
    }
    app_version_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetServiceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.GetServiceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_steam_id;
        break;
      }

      // required string steam_id = 2;
      case 2: {
        if (tag == 18) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unknown_1;
        break;
      }

      // optional string unknown_1 = 3;
      case 3: {
        if (tag == 26) {
         parse_unknown_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unknown_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_app_version;
        break;
      }

      // required int64 app_version = 4;
      case 4: {
        if (tag == 32) {
         parse_app_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_version_)));
          set_has_app_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.GetServiceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.GetServiceStatus)
  return false;
#undef DO_
}

void GetServiceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.GetServiceStatus)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->steam_id(), output);
  }

  // optional string unknown_1 = 3;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unknown_1(), output);
  }

  // required int64 app_version = 4;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->app_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.GetServiceStatus)
}

int GetServiceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // optional string unknown_1 = 3;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unknown_1());
    }

    // required int64 app_version = 4;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->app_version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetServiceStatus*>(&from));
}

void GetServiceStatus::MergeFrom(const GetServiceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetServiceStatus::CopyFrom(const GetServiceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void GetServiceStatus::Swap(GetServiceStatus* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(app_version_, other->app_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetServiceStatus::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.GetServiceStatus";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServiceStatusForXboxOne::GetServiceStatusForXboxOne()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
}

void GetServiceStatusForXboxOne::InitAsDefaultInstance() {
}

GetServiceStatusForXboxOne::GetServiceStatusForXboxOne(const GetServiceStatusForXboxOne& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
}

void GetServiceStatusForXboxOne::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceStatusForXboxOne::~GetServiceStatusForXboxOne() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
  SharedDtor();
}

void GetServiceStatusForXboxOne::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetServiceStatusForXboxOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetServiceStatusForXboxOne& GetServiceStatusForXboxOne::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

GetServiceStatusForXboxOne* GetServiceStatusForXboxOne::default_instance_ = NULL;

GetServiceStatusForXboxOne* GetServiceStatusForXboxOne::New() const {
  return new GetServiceStatusForXboxOne;
}

void GetServiceStatusForXboxOne::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetServiceStatusForXboxOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
  return false;
#undef DO_
}

void GetServiceStatusForXboxOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne)
}

int GetServiceStatusForXboxOne::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceStatusForXboxOne::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetServiceStatusForXboxOne*>(&from));
}

void GetServiceStatusForXboxOne::MergeFrom(const GetServiceStatusForXboxOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetServiceStatusForXboxOne::CopyFrom(const GetServiceStatusForXboxOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceStatusForXboxOne::IsInitialized() const {

  return true;
}

void GetServiceStatusForXboxOne::Swap(GetServiceStatusForXboxOne* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetServiceStatusForXboxOne::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.GetServiceStatusForXboxOne";
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceStatusResponse::kIdFieldNumber;
const int GetServiceStatusResponse::kSteamIdFieldNumber;
const int GetServiceStatusResponse::kUnknown1FieldNumber;
const int GetServiceStatusResponse::kAppVersionFieldNumber;
#endif  // !_MSC_VER

GetServiceStatusResponse::GetServiceStatusResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
}

void GetServiceStatusResponse::InitAsDefaultInstance() {
}

GetServiceStatusResponse::GetServiceStatusResponse(const GetServiceStatusResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
}

void GetServiceStatusResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_1_ = GOOGLE_LONGLONG(0);
  app_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceStatusResponse::~GetServiceStatusResponse() {
  // @@protoc_insertion_point(destructor:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
  SharedDtor();
}

void GetServiceStatusResponse::SharedDtor() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetServiceStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetServiceStatusResponse& GetServiceStatusResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Shared_5fFrpg2RequestMessage_2eproto();
#endif
  return *default_instance_;
}

GetServiceStatusResponse* GetServiceStatusResponse::default_instance_ = NULL;

GetServiceStatusResponse* GetServiceStatusResponse::New() const {
  return new GetServiceStatusResponse;
}

void GetServiceStatusResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetServiceStatusResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(unknown_1_, app_version_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_steam_id()) {
      if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steam_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetServiceStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_steam_id;
        break;
      }

      // optional string steam_id = 2;
      case 2: {
        if (tag == 18) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_1;
        break;
      }

      // optional int64 unknown_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unknown_1_)));
          set_has_unknown_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_app_version;
        break;
      }

      // optional int64 app_version = 4;
      case 4: {
        if (tag == 32) {
         parse_app_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_version_)));
          set_has_app_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
  return false;
#undef DO_
}

void GetServiceStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->steam_id(), output);
  }

  // optional int64 unknown_1 = 3;
  if (has_unknown_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->unknown_1(), output);
  }

  // optional int64 app_version = 4;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->app_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Shared_Frpg2RequestMessage.GetServiceStatusResponse)
}

int GetServiceStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_id());
    }

    // optional int64 unknown_1 = 3;
    if (has_unknown_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unknown_1());
    }

    // optional int64 app_version = 4;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->app_version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceStatusResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetServiceStatusResponse*>(&from));
}

void GetServiceStatusResponse::MergeFrom(const GetServiceStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_unknown_1()) {
      set_unknown_1(from.unknown_1());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetServiceStatusResponse::CopyFrom(const GetServiceStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceStatusResponse::IsInitialized() const {

  return true;
}

void GetServiceStatusResponse::Swap(GetServiceStatusResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(unknown_1_, other->unknown_1_);
    std::swap(app_version_, other->app_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetServiceStatusResponse::GetTypeName() const {
  return "Shared_Frpg2RequestMessage.GetServiceStatusResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Shared_Frpg2RequestMessage

// @@protoc_insertion_point(global_scope)
